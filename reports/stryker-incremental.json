{
  "files": {
    "src/node-lib/cms/sanity-client/index.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "1",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 3,
              "line": 447
            },
            "start": {
              "column": 25,
              "line": 45
            }
          }
        },
        {
          "id": "174",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 457
            },
            "start": {
              "column": 29,
              "line": 454
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/webinars/index.tsx(20,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 66
            },
            "start": {
              "column": 75,
              "line": 46
            }
          }
        },
        {
          "id": "2",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/pages/blog/[blogSlug].tsx(78,39): error TS2339: Property 'blogPosts' does not exist on type '{}'.\nsrc/pages/blog/[blogSlug].tsx(80,34): error TS7006: Parameter 'blog' implicitly has an 'any' type.\nsrc/pages/blog/[blogSlug].tsx(96,38): error TS2339: Property 'blogPostBySlug' does not exist on type '{}'.\nsrc/pages/blog/[blogSlug].tsx(100,39): error TS2339: Property 'blogPosts' does not exist on type '{}'.\nsrc/pages/blog/[blogSlug].tsx(103,22): error TS7006: Parameter 'blogResult' implicitly has an 'any' type.\nsrc/pages/blog/[blogSlug].tsx(104,23): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/blog/[blogSlug].tsx(104,33): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/blog/[blogSlug].tsx(119,7): error TS2322: Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }[]' is not assignable to type '{ title: string; slug: string; }[]'.\n  Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }' is missing the following properties from type '{ title: string; slug: string; }': title, slug\nsrc/pages/webinars/[webinarSlug].tsx(82,42): error TS2339: Property 'webinars' does not exist on type '{}'.\nsrc/pages/webinars/[webinarSlug].tsx(84,37): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/pages/webinars/[webinarSlug].tsx(101,41): error TS2339: Property 'webinarBySlug' does not exist on type '{}'.\nsrc/pages/webinars/[webinarSlug].tsx(111,42): error TS2339: Property 'webinars' does not exist on type '{}'.\nsrc/pages/webinars/[webinarSlug].tsx(115,25): error TS7006: Parameter 'w' implicitly has an 'any' type.\nsrc/pages/webinars/[webinarSlug].tsx(116,23): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/webinars/[webinarSlug].tsx(116,33): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/webinars/[webinarSlug].tsx(127,7): error TS2322: Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }[]' is not assignable to type '{ title: string; slug: string; }[]'.\n  Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }' is missing the following properties from type '{ title: string; slug: string; }': title, slug\nsrc/node-lib/cms/sanity-client/index.test.ts(59,31): error TS2339: Property 'webinarBySlug' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(67,46): error TS2339: Property 'webinarBySlug' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(84,27): error TS2339: Property 'webinarBySlug' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(91,46): error TS2339: Property 'webinars' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(107,38): error TS2339: Property 'webinars' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(158,28): error TS7053: Element implicitly has an 'any' type because expression of type '\"homepage\" | \"aboutBoardPage\" | \"aboutLeadershipPage\" | \"aboutPartnersPage\" | \"aboutWhoWeArePage\" | \"aboutWorkWithUsPage\" | \"planningPage\" | \"curriculumPage\" | \"contactPage\" | \"blogListingPage\"' can't be used to index type '{}'.\n  Property 'homepage' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(210,28): error TS7053: Element implicitly has an 'any' type because expression of type '\"webinars\" | \"blogPosts\" | \"landingPages\" | \"policyPages\"' can't be used to index type '{}'.\n  Property 'webinars' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(256,28): error TS7053: Element implicitly has an 'any' type because expression of type '\"blogPostBySlug\" | \"webinarBySlug\" | \"landingPageBySlug\" | \"policyPageBySlug\"' can't be used to index type '{}'.\n  Property 'blogPostBySlug' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(309,31): error TS2339: Property 'landingPageBySlug' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(317,46): error TS2339: Property 'landingPageBySlug' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(334,27): error TS2339: Property 'landingPageBySlug' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(341,46): error TS2339: Property 'landingPages' does not exist on type '{}'.\nsrc/node-lib/cms/sanity-client/index.test.ts(355,38): error TS2339: Property 'landingPages' does not exist on type '{}'.\nsrc/pages/contact-us.tsx(124,36): error TS2339: Property 'contactPage' does not exist on type '{}'.\nsrc/__tests__/pages/contact-us.test.tsx(65,28): error TS2339: Property 'contactPage' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/contact-us.test.tsx(71,21): error TS2339: Property 'contactPage' does not exist on type 'MockedObject<{}>'.\nsrc/pages/develop-your-curriculum.tsx(222,42): error TS2339: Property 'curriculumPage' does not exist on type '{}'.\nsrc/pages/index.tsx(395,40): error TS2339: Property 'homepage' does not exist on type '{}'.\nsrc/pages/index.tsx(405,39): error TS2339: Property 'blogPosts' does not exist on type '{}'.\nsrc/pages/index.tsx(410,38): error TS7006: Parameter 'blog' implicitly has an 'any' type.\nsrc/pages/index.tsx(415,42): error TS2339: Property 'webinars' does not exist on type '{}'.\nsrc/pages/index.tsx(420,11): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/pages/index.tsx(424,14): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/__tests__/pages/index.test.tsx(136,21): error TS2339: Property 'homepage' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/index.test.tsx(137,21): error TS2339: Property 'blogPosts' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/index.test.tsx(138,21): error TS2339: Property 'webinars' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/index.test.tsx(142,21): error TS2339: Property 'blogPosts' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/index.test.tsx(156,21): error TS2339: Property 'blogPosts' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/index.test.tsx(168,21): error TS2339: Property 'webinars' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/index.test.tsx(180,21): error TS2339: Property 'blogPosts' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/index.test.tsx(183,28): error TS2339: Property 'blogPosts' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/index.test.tsx(191,21): error TS2339: Property 'homepage' does not exist on type 'MockedObject<{}>'.\nsrc/pages/lesson-planning.tsx(472,40): error TS2339: Property 'planningPage' does not exist on type '{}'.\nsrc/pages/support-your-team.tsx(151,39): error TS2339: Property 'supportPage' does not exist on type '{}'.\nsrc/pages/about-us/board.tsx(145,42): error TS2339: Property 'aboutBoardPage' does not exist on type '{}'.\nsrc/__tests__/pages/about-us/board.test.tsx(123,21): error TS2339: Property 'aboutBoardPage' does not exist on type 'MockedObject<{}>'.\nsrc/pages/about-us/leadership.tsx(65,47): error TS2339: Property 'aboutLeadershipPage' does not exist on type '{}'.\nsrc/__tests__/pages/about-us/leadership.test.tsx(82,21): error TS2339: Property 'aboutLeadershipPage' does not exist on type 'MockedObject<{}>'.\nsrc/pages/about-us/partners.tsx(114,45): error TS2339: Property 'aboutPartnersPage' does not exist on type '{}'.\nsrc/__tests__/pages/about-us/partners.test.tsx(71,21): error TS2339: Property 'aboutPartnersPage' does not exist on type 'MockedObject<{}>'.\nsrc/pages/about-us/who-we-are.tsx(165,45): error TS2339: Property 'aboutWhoWeArePage' does not exist on type '{}'.\nsrc/__tests__/pages/about-us/who-we-are.test.tsx(148,21): error TS2339: Property 'aboutWhoWeArePage' does not exist on type 'MockedObject<{}>'.\nsrc/pages/about-us/work-with-us.tsx(92,47): error TS2339: Property 'aboutWorkWithUsPage' does not exist on type '{}'.\nsrc/__tests__/pages/about-us/work-with-us.test.tsx(154,21): error TS2339: Property 'aboutWorkWithUsPage' does not exist on type 'MockedObject<{}>'.\nsrc/pages/blog/index.tsx(18,36): error TS2339: Property 'blogListingPage' does not exist on type '{}'.\nsrc/pages/blog/index.tsx(28,39): error TS2339: Property 'blogPosts' does not exist on type '{}'.\nsrc/pages/blog/index.tsx(34,22): error TS7006: Parameter 'blogResult' implicitly has an 'any' type.\nsrc/pages/blog/index.tsx(35,23): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/blog/index.tsx(35,33): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/blog/index.tsx(38,56): error TS7006: Parameter 'blog' implicitly has an 'any' type.\nsrc/pages/blog/index.tsx(48,7): error TS2322: Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }[]' is not assignable to type '{ title: string; slug: string; }[]'.\n  Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }' is missing the following properties from type '{ title: string; slug: string; }': title, slug\nsrc/pages/blog/categories/[categorySlug].tsx(8,39): error TS2339: Property 'blogPosts' does not exist on type '{}'.\nsrc/pages/blog/categories/[categorySlug].tsx(10,34): error TS7006: Parameter 'blogResult' implicitly has an 'any' type.\nsrc/pages/legal/[policyPageSlug].tsx(116,41): error TS2339: Property 'policyPages' does not exist on type '{}'.\nsrc/pages/legal/[policyPageSlug].tsx(118,36): error TS7006: Parameter 'policyPage' implicitly has an 'any' type.\nsrc/pages/legal/[policyPageSlug].tsx(135,40): error TS2339: Property 'policyPageBySlug' does not exist on type '{}'.\nsrc/pages/lp/[landingPageSlug].tsx(82,42): error TS2339: Property 'landingPages' does not exist on type '{}'.\nsrc/pages/lp/[landingPageSlug].tsx(84,37): error TS7006: Parameter 'landingPage' implicitly has an 'any' type.\nsrc/pages/lp/[landingPageSlug].tsx(101,45): error TS2339: Property 'landingPageBySlug' does not exist on type '{}'.\nsrc/__tests__/pages/lp/[landingPageSlug].test.tsx(63,19): error TS2339: Property 'landingPages' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/lp/[landingPageSlug].test.tsx(64,19): error TS2339: Property 'landingPageBySlug' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/lp/[landingPageSlug].test.tsx(102,28): error TS2339: Property 'landingPageBySlug' does not exist on type 'MockedObject<{}>'.\nsrc/__tests__/pages/lp/[landingPageSlug].test.tsx(109,21): error TS2339: Property 'landingPageBySlug' does not exist on type 'MockedObject<{}>'.\nsrc/pages/webinars/index.tsx(16,36): error TS2339: Property 'webinarsListingPage' does not exist on type '{}'.\nsrc/pages/webinars/index.tsx(25,42): error TS2339: Property 'webinars' does not exist on type '{}'.\nsrc/pages/webinars/index.tsx(30,62): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/pages/webinars/index.tsx(40,15): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/pages/webinars/index.tsx(41,15): error TS7006: Parameter 'item' implicitly has an 'any' type.\nsrc/pages/webinars/index.tsx(43,21): error TS2571: Object is of type 'unknown'.\nsrc/pages/webinars/index.tsx(43,31): error TS2571: Object is of type 'unknown'.\nsrc/pages/webinars/index.tsx(48,7): error TS2322: Type 'unknown[]' is not assignable to type '{ title: string; slug: string; }[]'.\n  Type 'unknown' is not assignable to type '{ title: string; slug: string; }'.\nsrc/pages/webinars/categories/[categorySlug].tsx(8,39): error TS2339: Property 'webinars' does not exist on type '{}'.\nsrc/pages/webinars/categories/[categorySlug].tsx(10,34): error TS7006: Parameter 'blogResult' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "109",
            "110",
            "111",
            "112",
            "113"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 447
            },
            "start": {
              "column": 32,
              "line": 45
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allWebinarListingPage[0]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 71,
              "line": 51
            },
            "start": {
              "column": 37,
              "line": 51
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 50
            },
            "start": {
              "column": 63,
              "line": 47
            }
          }
        },
        {
          "id": "0",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(40,4): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "34",
            "36",
            "37",
            "38",
            "39",
            "40",
            "42",
            "43",
            "44",
            "45",
            "46",
            "48",
            "49",
            "50",
            "51",
            "52",
            "54",
            "55",
            "56",
            "57",
            "58",
            "60",
            "61",
            "62",
            "63",
            "64",
            "86",
            "87",
            "88",
            "89",
            "90",
            "92",
            "93",
            "94",
            "95",
            "96",
            "98",
            "99",
            "100",
            "101",
            "102",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 43
            },
            "start": {
              "column": 18,
              "line": 40
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(58,7): error TS2345: Argument of type '{ __typename?: \"WebinarListingPage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summary?: any; seo?: { __typename?: \"Seo\" | undefined; title?: string | ... 1 more ... | undefined; description?: string | ... 1 more ... | undefined; canonicalURL?...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(58,7): error TS2345: Argument of type '{ __typename?: \"WebinarListingPage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summary?: any; seo?: { __typename?: \"Seo\" | undefined; title?: string | ... 1 more ... | undefined; description?: string | ... 1 more ... | undefined; canonicalURL?...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allWebinarListingPage",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 51
            },
            "start": {
              "column": 37,
              "line": 51
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "BooleanLiteral",
          "replacement": "webinarsListingPageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(58,7): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 33,
              "line": 53
            },
            "start": {
              "column": 9,
              "line": 53
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(56,7): error TS2345: Argument of type '{ __typename?: \"WebinarListingPage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summary?: any; seo?: { __typename?: \"Seo\" | undefined; title?: string | ... 1 more ... | undefined; description?: string | ... 1 more ... | undefined; canonicalURL?...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 55
            },
            "start": {
              "column": 35,
              "line": 53
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/blog/index.tsx(22,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "59",
            "60",
            "61",
            "62",
            "63",
            "64"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 88
            },
            "start": {
              "column": 71,
              "line": 68
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "BooleanLiteral",
          "replacement": "blogListingPageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(80,7): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "59",
            "60",
            "61",
            "62",
            "63",
            "64"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 75
            },
            "start": {
              "column": 9,
              "line": 75
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(80,7): error TS2345: Argument of type '{ __typename?: \"NewsListingPage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summary?: any; seo?: { __typename?: \"Seo\" | undefined; title?: string | ... 1 more ... | undefined; description?: string | ... 1 more ... | undefined; canonicalURL?: s...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "59",
            "60",
            "61",
            "62",
            "63",
            "64"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 75
            },
            "start": {
              "column": 9,
              "line": 75
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(80,7): error TS2345: Argument of type '{ __typename?: \"NewsListingPage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summary?: any; seo?: { __typename?: \"Seo\" | undefined; title?: string | ... 1 more ... | undefined; description?: string | ... 1 more ... | undefined; canonicalURL?: s...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "59",
            "60",
            "61",
            "62",
            "63",
            "64"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 75
            },
            "start": {
              "column": 9,
              "line": 75
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(78,7): error TS2345: Argument of type '{ __typename?: \"NewsListingPage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summary?: any; seo?: { __typename?: \"Seo\" | undefined; title?: string | ... 1 more ... | undefined; description?: string | ... 1 more ... | undefined; canonicalURL?: s...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "59"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 77
            },
            "start": {
              "column": 31,
              "line": 75
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/webinars/[webinarSlug].tsx(84,32): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/webinars/[webinarSlug].tsx(84,37): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/pages/webinars/[webinarSlug].tsx(115,20): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/webinars/[webinarSlug].tsx(115,25): error TS7006: Parameter 'w' implicitly has an 'any' type.\nsrc/pages/webinars/[webinarSlug].tsx(116,23): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/webinars/[webinarSlug].tsx(116,33): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/webinars/[webinarSlug].tsx(127,7): error TS2322: Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }[]' is not assignable to type '{ title: string; slug: string; }[]'.\n  Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }' is missing the following properties from type '{ title: string; slug: string; }': title, slug\nsrc/node-lib/cms/sanity-client/index.test.ts(92,27): error TS2339: Property 'slug' does not exist on type 'never'.\nsrc/node-lib/cms/sanity-client/index.test.ts(95,27): error TS2339: Property 'slug' does not exist on type 'never'.\nsrc/pages/index.tsx(420,6): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/index.tsx(420,11): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/pages/index.tsx(424,14): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/__tests__/pages/index.test.tsx(138,48): error TS2345: Argument of type 'never[]' is not assignable to parameter of type 'void | Promise<void>'.\nsrc/__tests__/pages/index.test.tsx(168,52): error TS2345: Argument of type '{ id: string; date: Date; seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; ... 4 more ...; video: { ...; }; }[]' is not assignable to parameter of type 'void | Promise<void>'.\nsrc/pages/webinars/index.tsx(30,35): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/webinars/index.tsx(30,62): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/pages/webinars/index.tsx(40,10): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/webinars/index.tsx(40,15): error TS7006: Parameter 'webinar' implicitly has an 'any' type.\nsrc/pages/webinars/index.tsx(41,15): error TS7006: Parameter 'item' implicitly has an 'any' type.\nsrc/pages/webinars/index.tsx(43,21): error TS2571: Object is of type 'unknown'.\nsrc/pages/webinars/index.tsx(43,31): error TS2571: Object is of type 'unknown'.\nsrc/pages/webinars/index.tsx(48,7): error TS2322: Type 'unknown[]' is not assignable to type '{ title: string; slug: string; }[]'.\n  Type 'unknown' is not assignable to type '{ title: string; slug: string; }'.\nsrc/pages/webinars/categories/[categorySlug].tsx(10,29): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/webinars/categories/[categorySlug].tsx(10,34): error TS7006: Parameter 'blogResult' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "3",
            "4",
            "65",
            "66",
            "67",
            "68",
            "69"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 106
            },
            "start": {
              "column": 68,
              "line": 90
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "59",
            "60",
            "61",
            "62",
            "63",
            "64"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 72
            },
            "start": {
              "column": 59,
              "line": 69
            }
          }
        },
        {
          "id": "13",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allNewsListingPage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "59",
            "60",
            "61",
            "62",
            "63",
            "64"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 73
            },
            "start": {
              "column": 33,
              "line": 73
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allNewsListingPage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "59",
            "60",
            "61",
            "62",
            "63",
            "64"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 73
            },
            "start": {
              "column": 33,
              "line": 73
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/webinars/[webinarSlug].tsx(105,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/pages/webinars/[webinarSlug].tsx(119,5): error TS2698: Spread types may only be created from object types.\nsrc/pages/webinars/[webinarSlug].tsx(120,25): error TS2339: Property 'date' does not exist on type 'never'.\nsrc/pages/webinars/[webinarSlug].tsx(121,27): error TS2339: Property 'hosts' does not exist on type 'never'.\nsrc/node-lib/cms/sanity-client/index.test.ts(71,22): error TS2339: Property 'slug' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 125
            },
            "start": {
              "column": 8,
              "line": 110
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/pages/webinars/[webinarSlug].tsx(85,36): error TS2339: Property 'slug' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; id: string; ... 5 more ...; video: { ...; }; }'.\n  Property 'slug' does not exist on type 'string'.\nsrc/pages/webinars/[webinarSlug].tsx(115,33): error TS2339: Property 'category' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; id: string; ... 5 more ...; video: { ...; }; }'.\n  Property 'category' does not exist on type 'string'.\nsrc/node-lib/cms/sanity-client/index.test.ts(92,27): error TS2339: Property 'slug' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; id: string; ... 5 more ...; video: { ...; }; }'.\n  Property 'slug' does not exist on type 'string'.\nsrc/node-lib/cms/sanity-client/index.test.ts(95,27): error TS2339: Property 'slug' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; id: string; ... 5 more ...; video: { ...; }; }'.\n  Property 'slug' does not exist on type 'string'.\nsrc/pages/index.tsx(421,7): error TS2698: Spread types may only be created from object types.\nsrc/pages/webinars/index.tsx(30,39): error TS2345: Argument of type '<T extends { date: Date; }>(item: T) => T & {    date: string;}' is not assignable to parameter of type '((value: { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; id: string; slug: string; ... 4 more ...; video: { ...; }; }, index: number, array: { ...; }[]) => { ...; } & { ...; }) & ((value: string, inde...'.\n  Type '<T extends { date: Date; }>(item: T) => T & {    date: string;}' is not assignable to type '(value: string, index: number, array: string[]) => { date: Date; } & { date: string; }'.\n    Types of parameters 'item' and 'value' are incompatible.\n      Type 'string' is not assignable to type '{ date: Date; }'.\nsrc/pages/webinars/index.tsx(32,22): error TS2339: Property 'category' does not exist on type '{ date: Date; } & { date: string; }'.\nsrc/pages/webinars/index.tsx(40,35): error TS2339: Property 'category' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; id: string; ... 5 more ...; video: { ...; }; }'.\n  Property 'category' does not exist on type 'string'.\nsrc/pages/webinars/index.tsx(47,7): error TS2322: Type '({ date: Date; } & { date: string; })[]' is not assignable to type 'SerializedWebinarPreview[]'.\n  Type '{ date: Date; } & { date: string; }' is not assignable to type 'SerializedWebinarPreview'.\n    Type '{ date: Date; } & { date: string; }' is missing the following properties from type 'Omit<{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; id: string; slug: string; ... 4 more ...; video: { ...; }; }, \"date\">': title, id, slug, hosts, and 3 more.\nsrc/pages/webinars/categories/[categorySlug].tsx(12,32): error TS2339: Property 'category' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; id: string; ... 5 more ...; video: { ...; }; }'.\n  Property 'category' does not exist on type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "65"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 98
            },
            "start": {
              "column": 14,
              "line": 98
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "BooleanLiteral",
          "replacement": "webinar",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(122,68): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90"
          ],
          "location": {
            "end": {
              "column": 17,
              "line": 118
            },
            "start": {
              "column": 9,
              "line": 118
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "3",
            "4",
            "65",
            "66",
            "67",
            "68",
            "69"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 95
            },
            "start": {
              "column": 63,
              "line": 92
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(122,68): error TS2345: Argument of type '{ __typename?: \"Webinar\" | undefined; title?: string | null | undefined; date?: any; id?: string | null | undefined; summaryPortableText?: any; slug?: { __typename?: \"Slug\" | undefined; current?: string | ... 1 more ... | undefined; } | null | undefined; category?: { ...; } | ... 1 more ... | undefined; hosts?: ({ ....' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90"
          ],
          "location": {
            "end": {
              "column": 17,
              "line": 118
            },
            "start": {
              "column": 9,
              "line": 118
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(122,68): error TS2345: Argument of type '{ __typename?: \"Webinar\" | undefined; title?: string | null | undefined; date?: any; id?: string | null | undefined; summaryPortableText?: any; slug?: { __typename?: \"Slug\" | undefined; current?: string | ... 1 more ... | undefined; } | null | undefined; category?: { ...; } | ... 1 more ... | undefined; hosts?: ({ ....' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90"
          ],
          "location": {
            "end": {
              "column": 17,
              "line": 118
            },
            "start": {
              "column": 9,
              "line": 118
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/blog/[blogSlug].tsx(80,29): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/blog/[blogSlug].tsx(80,34): error TS7006: Parameter 'blog' implicitly has an 'any' type.\nsrc/pages/blog/[blogSlug].tsx(103,17): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/blog/[blogSlug].tsx(103,22): error TS7006: Parameter 'blogResult' implicitly has an 'any' type.\nsrc/pages/blog/[blogSlug].tsx(104,23): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/blog/[blogSlug].tsx(104,33): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/blog/[blogSlug].tsx(119,7): error TS2322: Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }[]' is not assignable to type '{ title: string; slug: string; }[]'.\n  Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }' is missing the following properties from type '{ title: string; slug: string; }': title, slug\nsrc/pages/index.tsx(410,33): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/index.tsx(410,38): error TS7006: Parameter 'blog' implicitly has an 'any' type.\nsrc/__tests__/pages/index.test.tsx(137,49): error TS2345: Argument of type 'never[]' is not assignable to parameter of type 'void | Promise<void>'.\nsrc/__tests__/pages/index.test.tsx(142,53): error TS2345: Argument of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; summary: string; id: string; ... 4 more ...; mainImage: { ...; }; }[]' is not assignable to parameter of type 'void | Promise<void>'.\nsrc/__tests__/pages/index.test.tsx(156,53): error TS2345: Argument of type '{ id: string; date: Date; seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; ... 4 more ...; mainImage: { ...; }; }[]' is not assignable to parameter of type 'void | Promise<void>'.\nsrc/__tests__/pages/index.test.tsx(180,53): error TS2345: Argument of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; summary: string; id: string; ... 4 more ...; mainImage: { ...; }; }[]' is not assignable to parameter of type 'void | Promise<void>'.\nsrc/pages/blog/index.tsx(34,17): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/blog/index.tsx(34,22): error TS7006: Parameter 'blogResult' implicitly has an 'any' type.\nsrc/pages/blog/index.tsx(35,23): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/blog/index.tsx(35,33): error TS2339: Property 'title' does not exist on type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }'.\nsrc/pages/blog/index.tsx(38,29): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/blog/index.tsx(38,56): error TS7006: Parameter 'blog' implicitly has an 'any' type.\nsrc/pages/blog/index.tsx(48,7): error TS2322: Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }[]' is not assignable to type '{ title: string; slug: string; }[]'.\n  Type '{ toString: () => string; charAt: (pos: number) => string; charCodeAt: (index: number) => number; concat: (...strings: string[]) => string; indexOf: (searchString: string, position?: number | undefined) => number; ... 44 more ...; [Symbol.iterator]: () => IterableIterator<...>; }' is missing the following properties from type '{ title: string; slug: string; }': title, slug\nsrc/pages/blog/categories/[categorySlug].tsx(10,29): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/blog/categories/[categorySlug].tsx(10,34): error TS7006: Parameter 'blogResult' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "70",
            "71",
            "72",
            "73",
            "74"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 142
            },
            "start": {
              "column": 69,
              "line": 126
            }
          }
        },
        {
          "id": "33",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(120,68): error TS2345: Argument of type '{ __typename?: \"Webinar\" | undefined; title?: string | null | undefined; date?: any; id?: string | null | undefined; summaryPortableText?: any; slug?: { __typename?: \"Slug\" | undefined; current?: string | ... 1 more ... | undefined; } | null | undefined; category?: { ...; } | ... 1 more ... | undefined; hosts?: ({ ....' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "85"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 120
            },
            "start": {
              "column": 19,
              "line": 118
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/blog/[blogSlug].tsx(106,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/pages/blog/[blogSlug].tsx(113,5): error TS2698: Spread types may only be created from object types.\nsrc/pages/blog/[blogSlug].tsx(114,22): error TS2339: Property 'date' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "91",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 161
            },
            "start": {
              "column": 8,
              "line": 146
            }
          }
        },
        {
          "id": "40",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/pages/blog/[blogSlug].tsx(81,30): error TS2339: Property 'slug' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; summary: string; ... 5 more ...; mainImage: { ...; }; }'.\n  Property 'slug' does not exist on type 'string'.\nsrc/pages/blog/[blogSlug].tsx(103,48): error TS2339: Property 'category' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; summary: string; ... 5 more ...; mainImage: { ...; }; }'.\n  Property 'category' does not exist on type 'string'.\nsrc/pages/index.tsx(411,5): error TS2698: Spread types may only be created from object types.\nsrc/pages/blog/index.tsx(34,48): error TS2339: Property 'category' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; summary: string; ... 5 more ...; mainImage: { ...; }; }'.\n  Property 'category' does not exist on type 'string'.\nsrc/pages/blog/index.tsx(38,33): error TS2345: Argument of type '<T extends { date: Date; }>(item: T) => T & {    date: string;}' is not assignable to parameter of type '((value: { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; summary: string; ... 5 more ...; mainImage: { ...; }; }, index: number, array: { ...; }[]) => { ...; } & { ...; }) & ((value: string, index: nu...'.\n  Type '<T extends { date: Date; }>(item: T) => T & {    date: string;}' is not assignable to type '(value: string, index: number, array: string[]) => { date: Date; } & { date: string; }'.\n    Types of parameters 'item' and 'value' are incompatible.\n      Type 'string' is not assignable to type '{ date: Date; }'.\nsrc/pages/blog/index.tsx(40,19): error TS2339: Property 'category' does not exist on type '{ date: Date; } & { date: string; }'.\nsrc/pages/blog/index.tsx(47,7): error TS2322: Type '({ date: Date; } & { date: string; })[]' is not assignable to type 'SerializedBlogPostPreview[]'.\n  Type '{ date: Date; } & { date: string; }' is not assignable to type 'SerializedBlogPostPreview'.\n    Type '{ date: Date; } & { date: string; }' is missing the following properties from type 'Omit<{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; summary: string; id: string; ... 4 more ...; mainImage: { ...; }; }, \"date\">': title, summary, id, slug, and 3 more.\nsrc/pages/blog/categories/[categorySlug].tsx(12,32): error TS2339: Property 'category' does not exist on type 'string | { seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; summary: string; ... 5 more ...; mainImage: { ...; }; }'.\n  Property 'category' does not exist on type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "70"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 134
            },
            "start": {
              "column": 14,
              "line": 134
            }
          }
        },
        {
          "id": "47",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(158,68): error TS2345: Argument of type '{ __typename?: \"NewsPost\" | undefined; title?: string | null | undefined; date?: any; summary?: string | null | undefined; id?: string | null | undefined; contentPortableText?: any; author?: { ...; } | ... 1 more ... | undefined; slug?: { ...; } | ... 1 more ... | undefined; mainImage?: { ...; } | ... 1 more ... | u...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "91",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 154
            },
            "start": {
              "column": 9,
              "line": 154
            }
          }
        },
        {
          "id": "45",
          "mutatorName": "BooleanLiteral",
          "replacement": "blogPost",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(158,68): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "91",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 154
            },
            "start": {
              "column": 9,
              "line": 154
            }
          }
        },
        {
          "id": "46",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(158,68): error TS2345: Argument of type '{ __typename?: \"NewsPost\" | undefined; title?: string | null | undefined; date?: any; summary?: string | null | undefined; id?: string | null | undefined; contentPortableText?: any; author?: { ...; } | ... 1 more ... | undefined; slug?: { ...; } | ... 1 more ... | undefined; mainImage?: { ...; } | ... 1 more ... | u...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "91",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 154
            },
            "start": {
              "column": 9,
              "line": 154
            }
          }
        },
        {
          "id": "21",
          "mutatorName": "BooleanLiteral",
          "replacement": "webinarResults.allWebinar",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "3",
            "4",
            "65",
            "66",
            "67",
            "68",
            "69"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 97
            },
            "start": {
              "column": 9,
              "line": 97
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "3",
            "4",
            "65",
            "66",
            "67",
            "68",
            "69"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 97
            },
            "start": {
              "column": 9,
              "line": 97
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "3",
            "4",
            "65",
            "66",
            "67",
            "68",
            "69"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 97
            },
            "start": {
              "column": 9,
              "line": 97
            }
          }
        },
        {
          "id": "48",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(156,68): error TS2345: Argument of type '{ __typename?: \"NewsPost\" | undefined; title?: string | null | undefined; date?: any; summary?: string | null | undefined; id?: string | null | undefined; contentPortableText?: any; author?: { ...; } | ... 1 more ... | undefined; slug?: { ...; } | ... 1 more ... | undefined; mainImage?: { ...; } | ... 1 more ... | u...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "91"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 156
            },
            "start": {
              "column": 20,
              "line": 154
            }
          }
        },
        {
          "id": "49",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/index.tsx(399,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/__tests__/pages/index.test.tsx(136,48): error TS2345: Argument of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; heading: string; id: string; summaryPortableText: any[]; sidebarCard1: { ...; }; sidebarCard2: { ...; }; sidebarForm: { ...; }; }' is not assignable to parameter of type 'void | Promise<void>'.\nsrc/__tests__/pages/index.test.tsx(191,52): error TS2345: Argument of type 'null' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 178
            },
            "start": {
              "column": 64,
              "line": 162
            }
          }
        },
        {
          "id": "53",
          "mutatorName": "BooleanLiteral",
          "replacement": "homepageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(174,7): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 169
            },
            "start": {
              "column": 9,
              "line": 169
            }
          }
        },
        {
          "id": "24",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "65"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 99
            },
            "start": {
              "column": 37,
              "line": 97
            }
          }
        },
        {
          "id": "54",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(174,7): error TS2345: Argument of type '{ __typename?: \"Homepage\" | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; sidebarCard1?: { __typename?: \"Card\" | undefined; title?: string | ... 1 more ... | undefined; bodyPortableText?: any; image?: { ...; } | ... 1 more ... | undefined; cta?: { ...; } |...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 169
            },
            "start": {
              "column": 9,
              "line": 169
            }
          }
        },
        {
          "id": "55",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(174,7): error TS2345: Argument of type '{ __typename?: \"Homepage\" | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; sidebarCard1?: { __typename?: \"Card\" | undefined; title?: string | ... 1 more ... | undefined; bodyPortableText?: any; image?: { ...; } | ... 1 more ... | undefined; cta?: { ...; } |...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 169
            },
            "start": {
              "column": 9,
              "line": 169
            }
          }
        },
        {
          "id": "57",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/lesson-planning.tsx(476,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 199
            },
            "start": {
              "column": 68,
              "line": 179
            }
          }
        },
        {
          "id": "56",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(172,7): error TS2345: Argument of type '{ __typename?: \"Homepage\" | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; sidebarCard1?: { __typename?: \"Card\" | undefined; title?: string | ... 1 more ... | undefined; bodyPortableText?: any; image?: { ...; } | ... 1 more ... | undefined; cta?: { ...; } |...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\nsrc/__tests__/pages/index.test.tsx(191,52): error TS2345: Argument of type 'null' is not assignable to parameter of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; heading: string; id: string; summaryPortableText: any[]; sidebarCard1: { ...; }; sidebarCard2: { ...; }; sidebarForm: { ...; }; } | Promise<...>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "5"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 171
            },
            "start": {
              "column": 24,
              "line": 169
            }
          }
        },
        {
          "id": "62",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(191,7): error TS2345: Argument of type '{ __typename?: \"PlanningCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; stepsHeading?: string | null | undefined; learnMoreHeading?: string | ... 1 more ... | undefined; ... 8 more ...; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 186
            },
            "start": {
              "column": 9,
              "line": 186
            }
          }
        },
        {
          "id": "61",
          "mutatorName": "BooleanLiteral",
          "replacement": "planningPageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(191,7): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 186
            },
            "start": {
              "column": 9,
              "line": 186
            }
          }
        },
        {
          "id": "63",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(191,7): error TS2345: Argument of type '{ __typename?: \"PlanningCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; stepsHeading?: string | null | undefined; learnMoreHeading?: string | ... 1 more ... | undefined; ... 8 more ...; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 186
            },
            "start": {
              "column": 9,
              "line": 186
            }
          }
        },
        {
          "id": "64",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(189,7): error TS2345: Argument of type '{ __typename?: \"PlanningCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; stepsHeading?: string | null | undefined; learnMoreHeading?: string | ... 1 more ... | undefined; ... 8 more ...; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "11"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 188
            },
            "start": {
              "column": 28,
              "line": 186
            }
          }
        },
        {
          "id": "65",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/about-us/who-we-are.tsx(169,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/__tests__/pages/about-us/who-we-are.test.tsx(148,61): error TS2345: Argument of type 'null' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 224
            },
            "start": {
              "column": 73,
              "line": 200
            }
          }
        },
        {
          "id": "71",
          "mutatorName": "BooleanLiteral",
          "replacement": "whoWeArePageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(214,7): error TS2698: Spread types may only be created from object types.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 208
            },
            "start": {
              "column": 9,
              "line": 208
            }
          }
        },
        {
          "id": "27",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 115
            },
            "start": {
              "column": 64,
              "line": 111
            }
          }
        },
        {
          "id": "29",
          "mutatorName": "OptionalChaining",
          "replacement": "webinarResult.allWebinar",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 116
            },
            "start": {
              "column": 21,
              "line": 116
            }
          }
        },
        {
          "id": "28",
          "mutatorName": "OptionalChaining",
          "replacement": "webinarResult?.allWebinar[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 116
            },
            "start": {
              "column": 21,
              "line": 116
            }
          }
        },
        {
          "id": "35",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "70",
            "71",
            "72",
            "73",
            "74"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 131
            },
            "start": {
              "column": 65,
              "line": 128
            }
          }
        },
        {
          "id": "74",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/__tests__/pages/about-us/who-we-are.test.tsx(148,61): error TS2345: Argument of type 'null' is not assignable to parameter of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; heading: string; id: string; ... 4 more ...; principles: { ...; }[]; } | Promise<...>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "17"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 210
            },
            "start": {
              "column": 28,
              "line": 208
            }
          }
        },
        {
          "id": "76",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/about-us/leadership.tsx(69,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/__tests__/pages/about-us/leadership.test.tsx(82,63): error TS2345: Argument of type 'null' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 249
            },
            "start": {
              "column": 75,
              "line": 225
            }
          }
        },
        {
          "id": "82",
          "mutatorName": "BooleanLiteral",
          "replacement": "leadershipPageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(239,7): error TS2698: Spread types may only be created from object types.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 233
            },
            "start": {
              "column": 9,
              "line": 233
            }
          }
        },
        {
          "id": "85",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/__tests__/pages/about-us/leadership.test.tsx(82,63): error TS2345: Argument of type 'null' is not assignable to parameter of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; heading: string; id: string; summaryPortableText: any[]; contactSection: { ...; }; introPortableText: any[]; leadershipTeam: { ...; }[]; } | Promise<...>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "23"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 235
            },
            "start": {
              "column": 30,
              "line": 233
            }
          }
        },
        {
          "id": "87",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/about-us/board.tsx(149,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/__tests__/pages/about-us/board.test.tsx(123,58): error TS2345: Argument of type 'null' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 274
            },
            "start": {
              "column": 70,
              "line": 250
            }
          }
        },
        {
          "id": "93",
          "mutatorName": "BooleanLiteral",
          "replacement": "boardPageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(264,7): error TS2698: Spread types may only be created from object types.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 258
            },
            "start": {
              "column": 9,
              "line": 258
            }
          }
        },
        {
          "id": "38",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "70",
            "71",
            "72",
            "73",
            "74"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 133
            },
            "start": {
              "column": 9,
              "line": 133
            }
          }
        },
        {
          "id": "36",
          "mutatorName": "BooleanLiteral",
          "replacement": "blogPostsResult.allNewsPost",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "70",
            "71",
            "72",
            "73",
            "74"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 133
            },
            "start": {
              "column": 9,
              "line": 133
            }
          }
        },
        {
          "id": "37",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "70",
            "71",
            "72",
            "73",
            "74"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 133
            },
            "start": {
              "column": 9,
              "line": 133
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "70"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 135
            },
            "start": {
              "column": 39,
              "line": 133
            }
          }
        },
        {
          "id": "96",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/__tests__/pages/about-us/board.test.tsx(123,58): error TS2345: Argument of type 'null' is not assignable to parameter of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; heading: string; id: string; ... 5 more ...; boardMembers: { ...; }[]; } | Promise<...>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "29"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 260
            },
            "start": {
              "column": 25,
              "line": 258
            }
          }
        },
        {
          "id": "98",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/about-us/partners.tsx(118,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/__tests__/pages/about-us/partners.test.tsx(71,61): error TS2345: Argument of type 'null' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 299
            },
            "start": {
              "column": 73,
              "line": 275
            }
          }
        },
        {
          "id": "104",
          "mutatorName": "BooleanLiteral",
          "replacement": "partnersPageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(289,7): error TS2698: Spread types may only be created from object types.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 283
            },
            "start": {
              "column": 9,
              "line": 283
            }
          }
        },
        {
          "id": "107",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/__tests__/pages/about-us/partners.test.tsx(71,61): error TS2345: Argument of type 'null' is not assignable to parameter of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; heading: string; id: string; ... 4 more ...; curriculumPartners: { ...; }[]; } | Promise<...>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "35"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 285
            },
            "start": {
              "column": 28,
              "line": 283
            }
          }
        },
        {
          "id": "115",
          "mutatorName": "BooleanLiteral",
          "replacement": "workWithUsPage",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(314,7): error TS2698: Spread types may only be created from object types.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 308
            },
            "start": {
              "column": 9,
              "line": 308
            }
          }
        },
        {
          "id": "109",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/about-us/work-with-us.tsx(96,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/__tests__/pages/about-us/work-with-us.test.tsx(154,63): error TS2345: Argument of type 'null' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 324
            },
            "start": {
              "column": 75,
              "line": 300
            }
          }
        },
        {
          "id": "42",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "91",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 151
            },
            "start": {
              "column": 66,
              "line": 147
            }
          }
        },
        {
          "id": "44",
          "mutatorName": "OptionalChaining",
          "replacement": "blogPostResult.allNewsPost",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "91",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 152
            },
            "start": {
              "column": 22,
              "line": 152
            }
          }
        },
        {
          "id": "43",
          "mutatorName": "OptionalChaining",
          "replacement": "blogPostResult?.allNewsPost[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "91",
            "92",
            "93",
            "94",
            "95",
            "96"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 152
            },
            "start": {
              "column": 22,
              "line": 152
            }
          }
        },
        {
          "id": "50",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 166
            },
            "start": {
              "column": 52,
              "line": 163
            }
          }
        },
        {
          "id": "118",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/__tests__/pages/about-us/work-with-us.test.tsx(154,63): error TS2345: Argument of type 'null' is not assignable to parameter of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; heading: string; id: string; summaryPortableText: any[]; contactSection: { ...; }; introPortableText: any[]; cards: { ...; }; } | Promise<...>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "41"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 310
            },
            "start": {
              "column": 26,
              "line": 308
            }
          }
        },
        {
          "id": "120",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/develop-your-curriculum.tsx(226,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "47",
            "48",
            "49",
            "50",
            "51",
            "52"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 344
            },
            "start": {
              "column": 70,
              "line": 325
            }
          }
        },
        {
          "id": "126",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(337,7): error TS2345: Argument of type '{ __typename?: \"CurriculumCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; ... 4 more ...; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "47",
            "48",
            "49",
            "50",
            "51",
            "52"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 332
            },
            "start": {
              "column": 9,
              "line": 332
            }
          }
        },
        {
          "id": "124",
          "mutatorName": "BooleanLiteral",
          "replacement": "curriculumPageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(337,7): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "47",
            "48",
            "49",
            "50",
            "51",
            "52"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 332
            },
            "start": {
              "column": 9,
              "line": 332
            }
          }
        },
        {
          "id": "129",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 349
            },
            "start": {
              "column": 59,
              "line": 346
            }
          }
        },
        {
          "id": "130",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allSupportCorePage[0]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 350
            },
            "start": {
              "column": 29,
              "line": 350
            }
          }
        },
        {
          "id": "125",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(337,7): error TS2345: Argument of type '{ __typename?: \"CurriculumCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; ... 4 more ...; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "47",
            "48",
            "49",
            "50",
            "51",
            "52"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 332
            },
            "start": {
              "column": 9,
              "line": 332
            }
          }
        },
        {
          "id": "127",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(335,7): error TS2345: Argument of type '{ __typename?: \"CurriculumCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; ... 4 more ...; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "47"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 334
            },
            "start": {
              "column": 30,
              "line": 332
            }
          }
        },
        {
          "id": "128",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/support-your-team.tsx(155,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 357
            },
            "start": {
              "column": 67,
              "line": 345
            }
          }
        },
        {
          "id": "132",
          "mutatorName": "BooleanLiteral",
          "replacement": "supportPageData",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 352
            },
            "start": {
              "column": 9,
              "line": 352
            }
          }
        },
        {
          "id": "131",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allSupportCorePage",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 350
            },
            "start": {
              "column": 29,
              "line": 350
            }
          }
        },
        {
          "id": "133",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 352
            },
            "start": {
              "column": 9,
              "line": 352
            }
          }
        },
        {
          "id": "51",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allHomepage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 167
            },
            "start": {
              "column": 26,
              "line": 167
            }
          }
        },
        {
          "id": "58",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 183
            },
            "start": {
              "column": 60,
              "line": 180
            }
          }
        },
        {
          "id": "52",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allHomepage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 167
            },
            "start": {
              "column": 26,
              "line": 167
            }
          }
        },
        {
          "id": "59",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allPlanningCorePage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 184
            },
            "start": {
              "column": 30,
              "line": 184
            }
          }
        },
        {
          "id": "134",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 25,
              "line": 352
            },
            "start": {
              "column": 9,
              "line": 352
            }
          }
        },
        {
          "id": "136",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/contact-us.tsx(128,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/__tests__/pages/contact-us.test.tsx(71,55): error TS2345: Argument of type 'null' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57",
            "58"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 374
            },
            "start": {
              "column": 67,
              "line": 358
            }
          }
        },
        {
          "id": "140",
          "mutatorName": "BooleanLiteral",
          "replacement": "contactPageData",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(370,7): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57",
            "58"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 365
            },
            "start": {
              "column": 9,
              "line": 365
            }
          }
        },
        {
          "id": "135",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 354
            },
            "start": {
              "column": 27,
              "line": 352
            }
          }
        },
        {
          "id": "141",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(370,7): error TS2345: Argument of type '{ __typename?: \"ContactCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; bodyPortableText?: any; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57",
            "58"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 365
            },
            "start": {
              "column": 9,
              "line": 365
            }
          }
        },
        {
          "id": "142",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(370,7): error TS2345: Argument of type '{ __typename?: \"ContactCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; bodyPortableText?: any; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57",
            "58"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 365
            },
            "start": {
              "column": 9,
              "line": 365
            }
          }
        },
        {
          "id": "144",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/legal/[policyPageSlug].tsx(118,31): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/legal/[policyPageSlug].tsx(118,36): error TS7006: Parameter 'policyPage' implicitly has an 'any' type.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "75",
            "76",
            "77",
            "78",
            "79"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 391
            },
            "start": {
              "column": 71,
              "line": 375
            }
          }
        },
        {
          "id": "143",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(368,7): error TS2345: Argument of type '{ __typename?: \"ContactCorePage\" | undefined; title?: string | null | undefined; heading?: string | null | undefined; id?: string | null | undefined; summaryPortableText?: any; bodyPortableText?: any; seo?: { ...; } | ... 1 more ... | undefined; } | undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\nsrc/__tests__/pages/contact-us.test.tsx(71,55): error TS2345: Argument of type 'null' is not assignable to parameter of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; title: string; heading: string; id: string; summaryPortableText: any[]; bodyPortableText: any[]; } | Promise<...>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "53"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 367
            },
            "start": {
              "column": 27,
              "line": 365
            }
          }
        },
        {
          "id": "151",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/pages/legal/[policyPageSlug].tsx(139,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/pages/legal/[policyPageSlug].tsx(146,5): error TS2698: Spread types may only be created from object types.\nsrc/pages/legal/[policyPageSlug].tsx(147,33): error TS2339: Property 'lastUpdatedAt' does not exist on type 'never'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 410
            },
            "start": {
              "column": 8,
              "line": 395
            }
          }
        },
        {
          "id": "150",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/pages/legal/[policyPageSlug].tsx(119,42): error TS2339: Property 'slug' does not exist on type 'string | { title: string; id: string; slug: string; }'.\n  Property 'slug' does not exist on type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "75"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 383
            },
            "start": {
              "column": 14,
              "line": 383
            }
          }
        },
        {
          "id": "155",
          "mutatorName": "BooleanLiteral",
          "replacement": "policyPage",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(407,68): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 403
            },
            "start": {
              "column": 9,
              "line": 403
            }
          }
        },
        {
          "id": "156",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(407,68): error TS2345: Argument of type '{ __typename?: \"PolicyPage\" | undefined; title?: string | null | undefined; id?: string | null | undefined; lastUpdatedAt?: any; bodyPortableText?: any; slug?: { __typename?: \"Slug\" | undefined; current?: string | ... 1 more ... | undefined; } | null | undefined; seo?: { ...; } | ... 1 more ... | undefined; } | unde...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 403
            },
            "start": {
              "column": 9,
              "line": 403
            }
          }
        },
        {
          "id": "60",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allPlanningCorePage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 57,
              "line": 184
            },
            "start": {
              "column": 30,
              "line": 184
            }
          }
        },
        {
          "id": "67",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allAboutCorePageWhoWeAre[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 205
            },
            "start": {
              "column": 30,
              "line": 205
            }
          }
        },
        {
          "id": "66",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 204
            },
            "start": {
              "column": 61,
              "line": 201
            }
          }
        },
        {
          "id": "68",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allAboutCorePageWhoWeAre",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 205
            },
            "start": {
              "column": 30,
              "line": 205
            }
          }
        },
        {
          "id": "157",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(407,68): error TS2345: Argument of type '{ __typename?: \"PolicyPage\" | undefined; title?: string | null | undefined; id?: string | null | undefined; lastUpdatedAt?: any; bodyPortableText?: any; slug?: { __typename?: \"Slug\" | undefined; current?: string | ... 1 more ... | undefined; } | null | undefined; seo?: { ...; } | ... 1 more ... | undefined; } | unde...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 403
            },
            "start": {
              "column": 9,
              "line": 403
            }
          }
        },
        {
          "id": "158",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(405,68): error TS2345: Argument of type '{ __typename?: \"PolicyPage\" | undefined; title?: string | null | undefined; id?: string | null | undefined; lastUpdatedAt?: any; bodyPortableText?: any; slug?: { __typename?: \"Slug\" | undefined; current?: string | ... 1 more ... | undefined; } | null | undefined; seo?: { ...; } | ... 1 more ... | undefined; } | unde...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "97"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 405
            },
            "start": {
              "column": 22,
              "line": 403
            }
          }
        },
        {
          "id": "159",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.test.ts(343,27): error TS2339: Property 'slug' does not exist on type 'never'.\nsrc/pages/lp/[landingPageSlug].tsx(84,32): error TS2339: Property 'map' does not exist on type 'void'.\nsrc/pages/lp/[landingPageSlug].tsx(84,37): error TS7006: Parameter 'landingPage' implicitly has an 'any' type.\nsrc/__tests__/pages/lp/[landingPageSlug].test.tsx(63,50): error TS2345: Argument of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; headerCta?: { linkType: \"internal\"; label: string; internal: { ...; } | ... 16 more ... | { ...; }; } | { ...; } | { ...; } | null | undefined; id: string; slug: strin...' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "80",
            "81",
            "82",
            "83",
            "84",
            "112",
            "113"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 427
            },
            "start": {
              "column": 72,
              "line": 411
            }
          }
        },
        {
          "id": "170",
          "mutatorName": "BooleanLiteral",
          "replacement": "landingPage",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(443,68): error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 439
            },
            "start": {
              "column": 9,
              "line": 439
            }
          }
        },
        {
          "id": "165",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/node-lib/cms/sanity-client/index.test.ts(343,27): error TS2339: Property 'slug' does not exist on type 'string | { id: string; slug: string; }'.\n  Property 'slug' does not exist on type 'string'.\nsrc/pages/lp/[landingPageSlug].tsx(85,44): error TS2339: Property 'slug' does not exist on type 'string | { id: string; slug: string; }'.\n  Property 'slug' does not exist on type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "80"
          ],
          "location": {
            "end": {
              "column": 16,
              "line": 419
            },
            "start": {
              "column": 14,
              "line": 419
            }
          }
        },
        {
          "id": "166",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.test.ts(321,22): error TS2339: Property 'slug' does not exist on type 'never'.\nsrc/pages/lp/[landingPageSlug].tsx(105,8): error TS1345: An expression of type 'void' cannot be tested for truthiness.\nsrc/__tests__/pages/lp/[landingPageSlug].test.tsx(64,55): error TS2345: Argument of type '{ seo?: { description?: string | null | undefined; title?: string | null | undefined; canonicalURL?: string | null | undefined; } | null | undefined; headerCta?: { linkType: \"internal\"; label: string; internal: { ...; } | ... 16 more ... | { ...; }; } | { ...; } | { ...; } | null | undefined; id: string; slug: strin...' is not assignable to parameter of type 'void | Promise<void>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 446
            },
            "start": {
              "column": 8,
              "line": 431
            }
          }
        },
        {
          "id": "171",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(443,68): error TS2345: Argument of type '{ __typename?: \"LandingPage\" | undefined; id?: string | null | undefined; slug?: { __typename?: \"Slug\" | undefined; current?: string | null | undefined; } | null | undefined; headerCta?: { ...; } | ... 1 more ... | undefined; hero?: { ...; } | ... 1 more ... | undefined; content?: ({ ...; } | ... 3 more ... | null)[...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 439
            },
            "start": {
              "column": 9,
              "line": 439
            }
          }
        },
        {
          "id": "172",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(443,68): error TS2345: Argument of type '{ __typename?: \"LandingPage\" | undefined; id?: string | null | undefined; slug?: { __typename?: \"Slug\" | undefined; current?: string | null | undefined; } | null | undefined; headerCta?: { ...; } | ... 1 more ... | undefined; hero?: { ...; } | ... 1 more ... | undefined; content?: ({ ...; } | ... 3 more ... | null)[...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 439
            },
            "start": {
              "column": 9,
              "line": 439
            }
          }
        },
        {
          "id": "176",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(457,3): error TS2322: Type '{ is_draft: undefined; } | {}' is not assignable to type '{ is_draft: boolean | undefined; }'.\n  Property 'is_draft' is missing in type '{}' but required in type '{ is_draft: boolean | undefined; }'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "11",
            "12",
            "13",
            "15",
            "17",
            "18",
            "19",
            "21",
            "23",
            "24",
            "25",
            "27",
            "29",
            "30",
            "31",
            "33",
            "35",
            "36",
            "37",
            "39",
            "41",
            "42",
            "43",
            "45",
            "47",
            "48",
            "49",
            "51",
            "53",
            "54",
            "55",
            "57",
            "59",
            "60",
            "61",
            "63",
            "65",
            "66",
            "68",
            "70",
            "71",
            "73",
            "75",
            "76",
            "78",
            "80",
            "81",
            "83",
            "85",
            "86",
            "87",
            "89",
            "91",
            "92",
            "93",
            "95",
            "97",
            "98",
            "99",
            "101",
            "103",
            "104",
            "105",
            "107",
            "109",
            "110",
            "111",
            "112",
            "113"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 457
            },
            "start": {
              "column": 45,
              "line": 457
            }
          }
        },
        {
          "id": "173",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(441,68): error TS2345: Argument of type '{ __typename?: \"LandingPage\" | undefined; id?: string | null | undefined; slug?: { __typename?: \"Slug\" | undefined; current?: string | null | undefined; } | null | undefined; headerCta?: { ...; } | ... 1 more ... | undefined; hero?: { ...; } | ... 1 more ... | undefined; content?: ({ ...; } | ... 3 more ... | null)[...' is not assignable to parameter of type 'Record<string, unknown>'.\n  Type 'undefined' is not assignable to type 'Record<string, unknown>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "103"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 441
            },
            "start": {
              "column": 23,
              "line": 439
            }
          }
        },
        {
          "id": "175",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/index.ts(457,3): error TS2322: Type '{} | { is_draft: false; }' is not assignable to type '{ is_draft: boolean | undefined; }'.\n  Property 'is_draft' is missing in type '{}' but required in type '{ is_draft: boolean | undefined; }'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 457
            },
            "start": {
              "column": 19,
              "line": 457
            }
          }
        },
        {
          "id": "69",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.aboutCorePage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 206
            },
            "start": {
              "column": 28,
              "line": 206
            }
          }
        },
        {
          "id": "72",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 208
            },
            "start": {
              "column": 9,
              "line": 208
            }
          }
        },
        {
          "id": "70",
          "mutatorName": "OptionalChaining",
          "replacement": "result.aboutCorePage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 206
            },
            "start": {
              "column": 28,
              "line": 206
            }
          }
        },
        {
          "id": "77",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 229
            },
            "start": {
              "column": 63,
              "line": 226
            }
          }
        },
        {
          "id": "73",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "17",
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 208
            },
            "start": {
              "column": 9,
              "line": 208
            }
          }
        },
        {
          "id": "79",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allAboutCorePageLeadership",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 230
            },
            "start": {
              "column": 32,
              "line": 230
            }
          }
        },
        {
          "id": "75",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "18",
            "19",
            "20",
            "21",
            "22"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 215
            },
            "start": {
              "column": 22,
              "line": 212
            }
          }
        },
        {
          "id": "78",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allAboutCorePageLeadership[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 230
            },
            "start": {
              "column": 32,
              "line": 230
            }
          }
        },
        {
          "id": "84",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 233
            },
            "start": {
              "column": 9,
              "line": 233
            }
          }
        },
        {
          "id": "81",
          "mutatorName": "OptionalChaining",
          "replacement": "result.aboutCorePage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 231
            },
            "start": {
              "column": 28,
              "line": 231
            }
          }
        },
        {
          "id": "80",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.aboutCorePage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 231
            },
            "start": {
              "column": 28,
              "line": 231
            }
          }
        },
        {
          "id": "83",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "23",
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 233
            },
            "start": {
              "column": 9,
              "line": 233
            }
          }
        },
        {
          "id": "89",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allAboutCorePageBoard[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 255
            },
            "start": {
              "column": 27,
              "line": 255
            }
          }
        },
        {
          "id": "90",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allAboutCorePageBoard",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 255
            },
            "start": {
              "column": 27,
              "line": 255
            }
          }
        },
        {
          "id": "88",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 254
            },
            "start": {
              "column": 58,
              "line": 251
            }
          }
        },
        {
          "id": "86",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "24",
            "25",
            "26",
            "27",
            "28"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 240
            },
            "start": {
              "column": 22,
              "line": 237
            }
          }
        },
        {
          "id": "97",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 265
            },
            "start": {
              "column": 22,
              "line": 262
            }
          }
        },
        {
          "id": "91",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.aboutCorePage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 256
            },
            "start": {
              "column": 28,
              "line": 256
            }
          }
        },
        {
          "id": "92",
          "mutatorName": "OptionalChaining",
          "replacement": "result.aboutCorePage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 256
            },
            "start": {
              "column": 28,
              "line": 256
            }
          }
        },
        {
          "id": "94",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 258
            },
            "start": {
              "column": 9,
              "line": 258
            }
          }
        },
        {
          "id": "95",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 258
            },
            "start": {
              "column": 9,
              "line": 258
            }
          }
        },
        {
          "id": "100",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allAboutCorePagePartners[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 280
            },
            "start": {
              "column": 30,
              "line": 280
            }
          }
        },
        {
          "id": "99",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 279
            },
            "start": {
              "column": 61,
              "line": 276
            }
          }
        },
        {
          "id": "101",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allAboutCorePagePartners",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 280
            },
            "start": {
              "column": 30,
              "line": 280
            }
          }
        },
        {
          "id": "103",
          "mutatorName": "OptionalChaining",
          "replacement": "result.aboutCorePage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 281
            },
            "start": {
              "column": 28,
              "line": 281
            }
          }
        },
        {
          "id": "106",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 283
            },
            "start": {
              "column": 9,
              "line": 283
            }
          }
        },
        {
          "id": "102",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.aboutCorePage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 281
            },
            "start": {
              "column": 28,
              "line": 281
            }
          }
        },
        {
          "id": "108",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 290
            },
            "start": {
              "column": 22,
              "line": 287
            }
          }
        },
        {
          "id": "105",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 283
            },
            "start": {
              "column": 9,
              "line": 283
            }
          }
        },
        {
          "id": "112",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allAboutCorePageWorkWithUs",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 305
            },
            "start": {
              "column": 28,
              "line": 305
            }
          }
        },
        {
          "id": "110",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 304
            },
            "start": {
              "column": 63,
              "line": 301
            }
          }
        },
        {
          "id": "111",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allAboutCorePageWorkWithUs[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 305
            },
            "start": {
              "column": 28,
              "line": 305
            }
          }
        },
        {
          "id": "113",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.aboutCorePage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 306
            },
            "start": {
              "column": 28,
              "line": 306
            }
          }
        },
        {
          "id": "116",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 308
            },
            "start": {
              "column": 9,
              "line": 308
            }
          }
        },
        {
          "id": "117",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 308
            },
            "start": {
              "column": 9,
              "line": 308
            }
          }
        },
        {
          "id": "137",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57",
            "58"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 362
            },
            "start": {
              "column": 59,
              "line": 359
            }
          }
        },
        {
          "id": "123",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allCurriculumCorePage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "47",
            "48",
            "49",
            "50",
            "51",
            "52"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 330
            },
            "start": {
              "column": 32,
              "line": 330
            }
          }
        },
        {
          "id": "114",
          "mutatorName": "OptionalChaining",
          "replacement": "result.aboutCorePage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "41",
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 306
            },
            "start": {
              "column": 28,
              "line": 306
            }
          }
        },
        {
          "id": "121",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "47",
            "48",
            "49",
            "50",
            "51",
            "52"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 329
            },
            "start": {
              "column": 62,
              "line": 326
            }
          }
        },
        {
          "id": "122",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allCurriculumCorePage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "47",
            "48",
            "49",
            "50",
            "51",
            "52"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 330
            },
            "start": {
              "column": 32,
              "line": 330
            }
          }
        },
        {
          "id": "138",
          "mutatorName": "OptionalChaining",
          "replacement": "result?.allContactCorePage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57",
            "58"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 363
            },
            "start": {
              "column": 29,
              "line": 363
            }
          }
        },
        {
          "id": "119",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "42",
            "43",
            "44",
            "45",
            "46"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 315
            },
            "start": {
              "column": 22,
              "line": 312
            }
          }
        },
        {
          "id": "152",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 400
            },
            "start": {
              "column": 70,
              "line": 396
            }
          }
        },
        {
          "id": "154",
          "mutatorName": "OptionalChaining",
          "replacement": "policyPageResult.allPolicyPage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 402
            },
            "start": {
              "column": 24,
              "line": 402
            }
          }
        },
        {
          "id": "139",
          "mutatorName": "OptionalChaining",
          "replacement": "result.allContactCorePage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "53",
            "54",
            "55",
            "56",
            "57",
            "58"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 363
            },
            "start": {
              "column": 29,
              "line": 363
            }
          }
        },
        {
          "id": "145",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "75",
            "76",
            "77",
            "78",
            "79"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 380
            },
            "start": {
              "column": 69,
              "line": 377
            }
          }
        },
        {
          "id": "149",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "75"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 384
            },
            "start": {
              "column": 43,
              "line": 382
            }
          }
        },
        {
          "id": "146",
          "mutatorName": "BooleanLiteral",
          "replacement": "policyPageResults.allPolicyPage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "75",
            "76",
            "77",
            "78",
            "79"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 382
            },
            "start": {
              "column": 9,
              "line": 382
            }
          }
        },
        {
          "id": "147",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "75",
            "76",
            "77",
            "78",
            "79"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 382
            },
            "start": {
              "column": 9,
              "line": 382
            }
          }
        },
        {
          "id": "153",
          "mutatorName": "OptionalChaining",
          "replacement": "policyPageResult?.allPolicyPage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 402
            },
            "start": {
              "column": 24,
              "line": 402
            }
          }
        },
        {
          "id": "148",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "75",
            "76",
            "77",
            "78",
            "79"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 382
            },
            "start": {
              "column": 9,
              "line": 382
            }
          }
        },
        {
          "id": "167",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 436
            },
            "start": {
              "column": 72,
              "line": 432
            }
          }
        },
        {
          "id": "168",
          "mutatorName": "OptionalChaining",
          "replacement": "landingPageResult?.allLandingPage[0]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 437
            },
            "start": {
              "column": 25,
              "line": 437
            }
          }
        },
        {
          "id": "161",
          "mutatorName": "BooleanLiteral",
          "replacement": "landingPageResults.allLandingPage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "80",
            "81",
            "82",
            "83",
            "84",
            "112",
            "113"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 418
            },
            "start": {
              "column": 9,
              "line": 418
            }
          }
        },
        {
          "id": "164",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "80"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 420
            },
            "start": {
              "column": 45,
              "line": 418
            }
          }
        },
        {
          "id": "160",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "80",
            "81",
            "82",
            "83",
            "84",
            "112",
            "113"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 416
            },
            "start": {
              "column": 71,
              "line": 413
            }
          }
        },
        {
          "id": "162",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "80",
            "81",
            "82",
            "83",
            "84",
            "112",
            "113"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 418
            },
            "start": {
              "column": 9,
              "line": 418
            }
          }
        },
        {
          "id": "163",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "80",
            "81",
            "82",
            "83",
            "84",
            "112",
            "113"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 418
            },
            "start": {
              "column": 9,
              "line": 418
            }
          }
        },
        {
          "id": "169",
          "mutatorName": "OptionalChaining",
          "replacement": "landingPageResult.allLandingPage",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 437
            },
            "start": {
              "column": 25,
              "line": 437
            }
          }
        },
        {
          "id": "177",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "11",
            "12",
            "13",
            "15",
            "17",
            "18",
            "19",
            "21",
            "23",
            "24",
            "25",
            "27",
            "29",
            "30",
            "31",
            "33",
            "35",
            "36",
            "37",
            "39",
            "41",
            "42",
            "43",
            "45",
            "47",
            "48",
            "49",
            "51",
            "53",
            "54",
            "55",
            "57",
            "59",
            "60",
            "61",
            "63",
            "65",
            "66",
            "68",
            "70",
            "71",
            "73",
            "75",
            "76",
            "78",
            "80",
            "81",
            "83",
            "85",
            "86",
            "87",
            "89",
            "91",
            "92",
            "93",
            "95",
            "97",
            "98",
            "99",
            "101",
            "103",
            "104",
            "105",
            "107",
            "109",
            "110",
            "111",
            "112",
            "113"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 457
            },
            "start": {
              "column": 57,
              "line": 457
            }
          }
        }
      ],
      "source": "import { z } from \"zod\";\n\nimport sanityGraphqlApi from \"../../sanity-graphql\";\nimport {\n  aboutBoardPageSchema,\n  aboutLeadershipPageSchema,\n  aboutPartnersPageSchema,\n  aboutWhoWeArePageSchema,\n  aboutWorkWithUsPageSchema,\n  homePageSchema,\n  curriculumPageSchema,\n  contactPageSchema,\n  blogPostPreviewSchema,\n  blogPostSchema,\n  planningPageSchema,\n  policyPagePreviewSchema,\n  policyPageSchema,\n  webinarPreviewSchema,\n  webinarSchema,\n  landingPagePreviewSchema,\n  landingPageSchema,\n  supportPageSchema,\n  blogListingPageSchema,\n} from \"../../../common-lib/cms-types\";\nimport { webinarsListingPageSchema } from \"../../../common-lib/cms-types/webinarsListingPage\";\n\nimport { resolveSanityReferences } from \"./resolveSanityReferences\";\nimport { parseResults } from \"./parseResults\";\n\nexport type Params = {\n  previewMode?: boolean;\n};\n\nexport type ListParams = Params & {\n  limit?: number;\n};\n\nconst resolveEmbeddedReferences = async <T extends Record<string, unknown>>(\n  document: T\n): Promise<T> => {\n  const withPortableTextReferences = await resolveSanityReferences(document);\n  return withPortableTextReferences;\n};\n\nconst getSanityClient = () => ({\n  webinarsListingPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.webinarsListingPage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const webinarsListingPageData = result?.allWebinarListingPage?.[0];\n\n    if (!webinarsListingPageData) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(\n      webinarsListingPageData\n    );\n\n    return parseResults(\n      webinarsListingPageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n\n  blogListingPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.newsListingPage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const blogListingPageData = result?.allNewsListingPage?.[0];\n\n    if (!blogListingPageData) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(\n      blogListingPageData\n    );\n\n    return parseResults(\n      blogListingPageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n\n  webinars: async ({ previewMode, ...params }: ListParams = {}) => {\n    const webinarListSchema = z.array(webinarPreviewSchema);\n    const webinarResults = await sanityGraphqlApi.allWebinars({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n\n    if (!webinarResults.allWebinar) {\n      return [];\n    }\n\n    return parseResults(\n      webinarListSchema,\n      webinarResults.allWebinar,\n      previewMode\n    );\n  },\n  webinarBySlug: async (\n    slug: string,\n    { previewMode, ...params }: Params = {}\n  ) => {\n    const webinarResult = await sanityGraphqlApi.webinarBySlug({\n      ...params,\n      isDraftFilter: getDraftFilterParam(previewMode),\n      slug,\n    });\n    const webinar = webinarResult?.allWebinar?.[0];\n\n    if (!webinar) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(webinar);\n\n    return parseResults(webinarSchema, withResolvedReferences, previewMode);\n  },\n  blogPosts: async ({ previewMode, ...params }: ListParams = {}) => {\n    const blogPostListSchema = z.array(blogPostPreviewSchema);\n    const blogPostsResult = await sanityGraphqlApi.allBlogPosts({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n\n    if (!blogPostsResult.allNewsPost) {\n      return [];\n    }\n\n    return parseResults(\n      blogPostListSchema,\n      blogPostsResult.allNewsPost,\n      previewMode\n    );\n  },\n  blogPostBySlug: async (\n    slug: string,\n    { previewMode, ...params }: Params = {}\n  ) => {\n    const blogPostResult = await sanityGraphqlApi.blogPostBySlug({\n      ...params,\n      isDraftFilter: getDraftFilterParam(previewMode),\n      slug,\n    });\n    const blogPost = blogPostResult?.allNewsPost?.[0];\n\n    if (!blogPost) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(blogPost);\n\n    return parseResults(blogPostSchema, withResolvedReferences, previewMode);\n  },\n  homepage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.homepage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const homepageData = result?.allHomepage?.[0];\n\n    if (!homepageData) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(\n      homepageData\n    );\n\n    return parseResults(homePageSchema, withResolvedReferences, previewMode);\n  },\n  planningPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.planningCorePage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const planningPageData = result?.allPlanningCorePage?.[0];\n\n    if (!planningPageData) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(\n      planningPageData\n    );\n\n    return parseResults(\n      planningPageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n  aboutWhoWeArePage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.aboutWhoWeArePage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const whoWeArePageData = result?.allAboutCorePageWhoWeAre?.[0];\n    const parentPageData = result?.aboutCorePage?.[0];\n\n    if (!whoWeArePageData) {\n      return null;\n    }\n\n    const pageData = {\n      ...parentPageData,\n      ...whoWeArePageData,\n    };\n\n    const withResolvedReferences = await resolveEmbeddedReferences(pageData);\n\n    return parseResults(\n      aboutWhoWeArePageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n  aboutLeadershipPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.aboutLeadershipPage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const leadershipPageData = result?.allAboutCorePageLeadership?.[0];\n    const parentPageData = result?.aboutCorePage?.[0];\n\n    if (!leadershipPageData) {\n      return null;\n    }\n\n    const pageData = {\n      ...parentPageData,\n      ...leadershipPageData,\n    };\n\n    const withResolvedReferences = await resolveEmbeddedReferences(pageData);\n\n    return parseResults(\n      aboutLeadershipPageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n  aboutBoardPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.aboutBoardPage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const boardPageData = result?.allAboutCorePageBoard?.[0];\n    const parentPageData = result?.aboutCorePage?.[0];\n\n    if (!boardPageData) {\n      return null;\n    }\n\n    const pageData = {\n      ...parentPageData,\n      ...boardPageData,\n    };\n\n    const withResolvedReferences = await resolveEmbeddedReferences(pageData);\n\n    return parseResults(\n      aboutBoardPageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n  aboutPartnersPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.aboutPartnersPage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const partnersPageData = result?.allAboutCorePagePartners?.[0];\n    const parentPageData = result?.aboutCorePage?.[0];\n\n    if (!partnersPageData) {\n      return null;\n    }\n\n    const pageData = {\n      ...parentPageData,\n      ...partnersPageData,\n    };\n\n    const withResolvedReferences = await resolveEmbeddedReferences(pageData);\n\n    return parseResults(\n      aboutPartnersPageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n  aboutWorkWithUsPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.aboutWorkWithUsPage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const workWithUsPage = result?.allAboutCorePageWorkWithUs?.[0];\n    const parentPageData = result?.aboutCorePage?.[0];\n\n    if (!workWithUsPage) {\n      return null;\n    }\n\n    const pageData = {\n      ...parentPageData,\n      ...workWithUsPage,\n    };\n\n    const withResolvedReferences = await resolveEmbeddedReferences(pageData);\n\n    return parseResults(\n      aboutWorkWithUsPageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n  curriculumPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.curriculumCorePage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const curriculumPageData = result?.allCurriculumCorePage?.[0];\n\n    if (!curriculumPageData) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(\n      curriculumPageData\n    );\n    return parseResults(\n      curriculumPageSchema,\n      withResolvedReferences,\n      previewMode\n    );\n  },\n  supportPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.supportCorePage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const supportPageData = result?.allSupportCorePage?.[0];\n\n    if (!supportPageData) {\n      return null;\n    }\n\n    return parseResults(supportPageSchema, supportPageData, previewMode);\n  },\n  contactPage: async ({ previewMode, ...params }: Params = {}) => {\n    const result = await sanityGraphqlApi.contactCorePage({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n    const contactPageData = result?.allContactCorePage?.[0];\n\n    if (!contactPageData) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(\n      contactPageData\n    );\n\n    return parseResults(contactPageSchema, withResolvedReferences, previewMode);\n  },\n  policyPages: async ({ previewMode, ...params }: ListParams = {}) => {\n    const policyPageListSchema = z.array(policyPagePreviewSchema);\n    const policyPageResults = await sanityGraphqlApi.allPolicyPages({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n\n    if (!policyPageResults.allPolicyPage) {\n      return [];\n    }\n\n    return parseResults(\n      policyPageListSchema,\n      policyPageResults.allPolicyPage,\n      previewMode\n    );\n  },\n  policyPageBySlug: async (\n    slug: string,\n    { previewMode, ...params }: Params = {}\n  ) => {\n    const policyPageResult = await sanityGraphqlApi.policyPageBySlug({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n      slug,\n    });\n\n    const policyPage = policyPageResult?.allPolicyPage?.[0];\n    if (!policyPage) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(policyPage);\n\n    return parseResults(policyPageSchema, withResolvedReferences, previewMode);\n  },\n  landingPages: async ({ previewMode, ...params }: ListParams = {}) => {\n    const landingPageListSchema = z.array(landingPagePreviewSchema);\n    const landingPageResults = await sanityGraphqlApi.allLandingPages({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n    });\n\n    if (!landingPageResults.allLandingPage) {\n      return [];\n    }\n\n    return parseResults(\n      landingPageListSchema,\n      landingPageResults.allLandingPage,\n      previewMode\n    );\n  },\n  landingPageBySlug: async (\n    slug: string,\n    { previewMode, ...params }: Params = {}\n  ) => {\n    const landingPageResult = await sanityGraphqlApi.landingPageBySlug({\n      isDraftFilter: getDraftFilterParam(previewMode),\n      ...params,\n      slug,\n    });\n    const landingPage = landingPageResult?.allLandingPage?.[0];\n\n    if (!landingPage) {\n      return null;\n    }\n\n    const withResolvedReferences = await resolveEmbeddedReferences(landingPage);\n\n    return parseResults(landingPageSchema, withResolvedReferences, previewMode);\n  },\n});\n\n/**\n * When in preview mode we want to fetch draft and non-draft\n * content and filter client side, but for production we\n * never want draft content\n */\nconst getDraftFilterParam = (\n  isPreviewMode: boolean | undefined\n): { is_draft: boolean | undefined } =>\n  isPreviewMode ? { is_draft: undefined } : { is_draft: false };\n\nexport default getSanityClient;\n"
    },
    "src/node-lib/cms/sanity-client/parseResults.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "178",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 19
            },
            "start": {
              "column": 30,
              "line": 18
            }
          }
        },
        {
          "id": "226",
          "mutatorName": "Regex",
          "replacement": "/drafts\\./",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 37,
              "line": 82
            },
            "start": {
              "column": 26,
              "line": 82
            }
          }
        },
        {
          "id": "227",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 67,
              "line": 83
            },
            "start": {
              "column": 17,
              "line": 83
            }
          }
        },
        {
          "id": "228",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 74,
              "line": 84
            },
            "start": {
              "column": 26,
              "line": 84
            }
          }
        },
        {
          "id": "179",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 19
            },
            "start": {
              "column": 32,
              "line": 19
            }
          }
        },
        {
          "id": "180",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(92,50): error TS2339: Property 'parse' does not exist on type 'void'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 30
            },
            "start": {
              "column": 3,
              "line": 24
            }
          }
        },
        {
          "id": "184",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(34,4): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 36
            },
            "start": {
              "column": 29,
              "line": 34
            }
          }
        },
        {
          "id": "188",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(35,31): error TS2571: Object is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "189",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof schema === \"object\" || schema !== null",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(35,72): error TS2532: Object is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "187",
          "mutatorName": "LogicalOperator",
          "replacement": "typeof schema === \"object\" && schema !== null || \"element\" in schema",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(35,72): error TS2571: Object is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "190",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(35,50): error TS2532: Object is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "191",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof schema !== \"object\"",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(35,72): error TS2532: Object is possibly 'undefined'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "192",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(35,10): error TS2367: This condition will always return 'false' since the types '\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\"' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 35
            },
            "start": {
              "column": 28,
              "line": 35
            }
          }
        },
        {
          "id": "193",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(35,61): error TS2531: Object is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 35
            },
            "start": {
              "column": 40,
              "line": 35
            }
          }
        },
        {
          "id": "194",
          "mutatorName": "EqualityOperator",
          "replacement": "schema === null",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(35,72): error TS2531: Object is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 35
            },
            "start": {
              "column": 40,
              "line": 35
            }
          }
        },
        {
          "id": "197",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(59,3): error TS2322: Type 'T' is not assignable to type 'T[]'.\nsrc/node-lib/cms/sanity-client/parseResults.ts(59,27): error TS2345: Argument of type '(acc: T[], item: T) => void' is not assignable to parameter of type '(previousValue: T[], currentValue: T, currentIndex: number, array: T[]) => T[]'.\n  Type 'void' is not assignable to type 'T[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 79
            },
            "start": {
              "column": 42,
              "line": 59
            }
          }
        },
        {
          "id": "196",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(58,4): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 80
            },
            "start": {
              "column": 11,
              "line": 58
            }
          }
        },
        {
          "id": "206",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(67,37): error TS2345: Argument of type 'T | undefined' is not assignable to parameter of type 'T'.\n  'T' could be instantiated with an arbitrary type which could be unrelated to 'T | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "207",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(67,37): error TS2345: Argument of type 'T | undefined' is not assignable to parameter of type 'T'.\n  'T' could be instantiated with an arbitrary type which could be unrelated to 'T | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "208",
          "mutatorName": "LogicalOperator",
          "replacement": "alreadyExists || prevItem",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(67,37): error TS2345: Argument of type 'T | undefined' is not assignable to parameter of type 'T'.\n  'T' could be instantiated with an arbitrary type which could be unrelated to 'T | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 66
            },
            "start": {
              "column": 9,
              "line": 66
            }
          }
        },
        {
          "id": "209",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(59,3): error TS2322: Type 'T' is not assignable to type 'T[]'.\nsrc/node-lib/cms/sanity-client/parseResults.ts(59,27): error TS2345: Argument of type '(acc: T[], item: T) => T[] | undefined' is not assignable to parameter of type '(previousValue: T[], currentValue: T, currentIndex: number, array: T[]) => T[]'.\n  Type 'T[] | undefined' is not assignable to type 'T[]'.\n    Type 'undefined' is not assignable to type 'T[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 76
            },
            "start": {
              "column": 36,
              "line": 66
            }
          }
        },
        {
          "id": "215",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(59,3): error TS2322: Type 'T' is not assignable to type 'T[]'.\nsrc/node-lib/cms/sanity-client/parseResults.ts(59,27): error TS2345: Argument of type '(acc: T[], item: T) => T[] | undefined' is not assignable to parameter of type '(previousValue: T[], currentValue: T, currentIndex: number, array: T[]) => T[]'.\n  Type 'T[] | undefined' is not assignable to type 'T[]'.\n    Type 'undefined' is not assignable to type 'T[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "218",
            "220"
          ],
          "location": {
            "end": {
              "column": 8,
              "line": 72
            },
            "start": {
              "column": 21,
              "line": 70
            }
          }
        },
        {
          "id": "216",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(59,3): error TS2322: Type 'T' is not assignable to type 'T[]'.\nsrc/node-lib/cms/sanity-client/parseResults.ts(59,27): error TS2345: Argument of type '(acc: T[], item: T) => T[] | undefined' is not assignable to parameter of type '(previousValue: T[], currentValue: T, currentIndex: number, array: T[]) => T[]'.\n  Type 'T[] | undefined' is not assignable to type 'T[]'.\n    Type 'undefined' is not assignable to type 'T[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "219",
            "225"
          ],
          "location": {
            "end": {
              "column": 8,
              "line": 75
            },
            "start": {
              "column": 14,
              "line": 72
            }
          }
        },
        {
          "id": "223",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(59,3): error TS2322: Type 'T' is not assignable to type 'T[]'.\nsrc/node-lib/cms/sanity-client/parseResults.ts(59,27): error TS2345: Argument of type '(acc: T[], item: T) => T[] | undefined' is not assignable to parameter of type '(previousValue: T[], currentValue: T, currentIndex: number, array: T[]) => T[]'.\n  Type 'T[] | undefined' is not assignable to type 'T[]'.\n    Type 'undefined' is not assignable to type 'T[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 78
            },
            "start": {
              "column": 12,
              "line": 76
            }
          }
        },
        {
          "id": "225",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(59,3): error TS2322: Type 'T' is not assignable to type 'T[]'.\nsrc/node-lib/cms/sanity-client/parseResults.ts(79,7): error TS2322: Type 'string' is not assignable to type 'T'.\n  'T' could be instantiated with an arbitrary type which could be unrelated to 'string'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 8,
              "line": 79
            },
            "start": {
              "column": 6,
              "line": 79
            }
          }
        },
        {
          "id": "230",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(90,4): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "34",
            "36",
            "37",
            "38",
            "39",
            "40",
            "42",
            "43",
            "44",
            "45",
            "46",
            "48",
            "49",
            "50",
            "51",
            "52",
            "54",
            "55",
            "56",
            "57",
            "58",
            "60",
            "61",
            "62",
            "63",
            "64",
            "66",
            "67",
            "68",
            "69",
            "71",
            "72",
            "73",
            "74",
            "76",
            "77",
            "78",
            "79",
            "81",
            "82",
            "83",
            "84",
            "86",
            "87",
            "88",
            "89",
            "90",
            "92",
            "93",
            "94",
            "95",
            "96",
            "98",
            "99",
            "100",
            "101",
            "102",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "221",
            "222",
            "223",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 124
            },
            "start": {
              "column": 42,
              "line": 90
            }
          }
        },
        {
          "id": "232",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(97,67): error TS2345: Argument of type 'S' is not assignable to parameter of type 'ZodArray<unknown, \"many\">'.\n  Type 'ZodType<any, ZodTypeDef, any>' is missing the following properties from type 'ZodArray<unknown, \"many\">': element, min, max, length, nonempty\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "34",
            "36",
            "37",
            "38",
            "39",
            "40",
            "42",
            "43",
            "44",
            "45",
            "46",
            "48",
            "49",
            "50",
            "51",
            "52",
            "54",
            "55",
            "56",
            "57",
            "58",
            "60",
            "61",
            "62",
            "63",
            "64",
            "66",
            "67",
            "68",
            "69",
            "71",
            "72",
            "73",
            "74",
            "76",
            "77",
            "78",
            "79",
            "81",
            "82",
            "83",
            "84",
            "86",
            "87",
            "88",
            "89",
            "90",
            "92",
            "93",
            "94",
            "95",
            "96",
            "98",
            "99",
            "100",
            "101",
            "102",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "221",
            "222",
            "223",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 91
            },
            "start": {
              "column": 7,
              "line": 91
            }
          }
        },
        {
          "id": "234",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(97,67): error TS2345: Argument of type 'S' is not assignable to parameter of type 'ZodArray<unknown, \"many\">'.\n  Type 'ZodType<any, ZodTypeDef, any>' is missing the following properties from type 'ZodArray<unknown, \"many\">': element, min, max, length, nonempty\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 92
            },
            "start": {
              "column": 9,
              "line": 92
            }
          }
        },
        {
          "id": "235",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/parseResults.ts(97,67): error TS2345: Argument of type 'S' is not assignable to parameter of type 'ZodArray<unknown, \"many\">'.\n  Type 'ZodType<any, ZodTypeDef, any>' is missing the following properties from type 'ZodArray<unknown, \"many\">': element, min, max, length, nonempty\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 92
            },
            "start": {
              "column": 9,
              "line": 92
            }
          }
        },
        {
          "id": "183",
          "mutatorName": "MethodExpression",
          "replacement": "wrapValue(val)",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 29
            },
            "start": {
              "column": 32,
              "line": 29
            }
          }
        },
        {
          "id": "182",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 29
            },
            "start": {
              "column": 23,
              "line": 29
            }
          }
        },
        {
          "id": "186",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "181",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 28
            },
            "start": {
              "column": 39,
              "line": 25
            }
          }
        },
        {
          "id": "199",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 61
            },
            "start": {
              "column": 15,
              "line": 61
            }
          }
        },
        {
          "id": "200",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 61
            },
            "start": {
              "column": 15,
              "line": 61
            }
          }
        },
        {
          "id": "198",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 61
            },
            "start": {
              "column": 7,
              "line": 61
            }
          }
        },
        {
          "id": "195",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 68,
              "line": 35
            },
            "start": {
              "column": 59,
              "line": 35
            }
          }
        },
        {
          "id": "185",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 35
            },
            "start": {
              "column": 10,
              "line": 35
            }
          }
        },
        {
          "id": "202",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 63
            },
            "start": {
              "column": 27,
              "line": 63
            }
          }
        },
        {
          "id": "203",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 63
            },
            "start": {
              "column": 27,
              "line": 63
            }
          }
        },
        {
          "id": "204",
          "mutatorName": "EqualityOperator",
          "replacement": "alreadyExistsIdx > 0",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 63
            },
            "start": {
              "column": 27,
              "line": 63
            }
          }
        },
        {
          "id": "212",
          "mutatorName": "EqualityOperator",
          "replacement": "itemToKeep !== prevItem",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 68
            },
            "start": {
              "column": 24,
              "line": 68
            }
          }
        },
        {
          "id": "205",
          "mutatorName": "EqualityOperator",
          "replacement": "alreadyExistsIdx < 0",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 63
            },
            "start": {
              "column": 27,
              "line": 63
            }
          }
        },
        {
          "id": "201",
          "mutatorName": "EqualityOperator",
          "replacement": "getProp(el) !== getProp(item)",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 61
            },
            "start": {
              "column": 15,
              "line": 61
            }
          }
        },
        {
          "id": "210",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 68
            },
            "start": {
              "column": 24,
              "line": 68
            }
          }
        },
        {
          "id": "213",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 70
            },
            "start": {
              "column": 11,
              "line": 70
            }
          }
        },
        {
          "id": "211",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 68
            },
            "start": {
              "column": 24,
              "line": 68
            }
          }
        },
        {
          "id": "218",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "219",
            "225"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 73
            },
            "start": {
              "column": 44,
              "line": 73
            }
          }
        },
        {
          "id": "219",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "219",
            "225"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 73
            },
            "start": {
              "column": 54,
              "line": 73
            }
          }
        },
        {
          "id": "217",
          "mutatorName": "MethodExpression",
          "replacement": "acc",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "219",
            "225"
          ],
          "location": {
            "end": {
              "column": 77,
              "line": 73
            },
            "start": {
              "column": 33,
              "line": 73
            }
          }
        },
        {
          "id": "214",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "218",
            "219",
            "220",
            "225"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 70
            },
            "start": {
              "column": 11,
              "line": 70
            }
          }
        },
        {
          "id": "229",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "225"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 84
            },
            "start": {
              "column": 71,
              "line": 84
            }
          }
        },
        {
          "id": "224",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "218",
            "219",
            "220",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 28,
              "line": 77
            },
            "start": {
              "column": 14,
              "line": 77
            }
          }
        },
        {
          "id": "220",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "219",
            "225"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 73
            },
            "start": {
              "column": 54,
              "line": 73
            }
          }
        },
        {
          "id": "221",
          "mutatorName": "EqualityOperator",
          "replacement": "i === alreadyExistsIdx",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "219",
            "225"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 73
            },
            "start": {
              "column": 54,
              "line": 73
            }
          }
        },
        {
          "id": "222",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "219",
            "225"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 74
            },
            "start": {
              "column": 16,
              "line": 74
            }
          }
        },
        {
          "id": "231",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "30",
            "31",
            "32",
            "33",
            "34",
            "36",
            "37",
            "38",
            "39",
            "40",
            "42",
            "43",
            "44",
            "45",
            "46",
            "48",
            "49",
            "50",
            "51",
            "52",
            "54",
            "55",
            "56",
            "57",
            "58",
            "60",
            "61",
            "62",
            "63",
            "64",
            "66",
            "67",
            "68",
            "69",
            "71",
            "72",
            "73",
            "74",
            "76",
            "77",
            "78",
            "79",
            "81",
            "82",
            "83",
            "84",
            "86",
            "87",
            "88",
            "89",
            "90",
            "92",
            "93",
            "94",
            "95",
            "96",
            "98",
            "99",
            "100",
            "101",
            "102",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "221",
            "222",
            "223",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 91
            },
            "start": {
              "column": 7,
              "line": 91
            }
          }
        },
        {
          "id": "237",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 111
            },
            "start": {
              "column": 9,
              "line": 111
            }
          }
        },
        {
          "id": "233",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 121
            },
            "start": {
              "column": 22,
              "line": 91
            }
          }
        },
        {
          "id": "238",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 113
            },
            "start": {
              "column": 9,
              "line": 113
            }
          }
        },
        {
          "id": "236",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "67",
            "69",
            "72",
            "74",
            "77",
            "79",
            "82",
            "84",
            "224",
            "225"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 118
            },
            "start": {
              "column": 35,
              "line": 92
            }
          }
        },
        {
          "id": "239",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "8",
            "10",
            "14",
            "16",
            "20",
            "22",
            "26",
            "28",
            "32",
            "34",
            "38",
            "40",
            "44",
            "46",
            "50",
            "52",
            "56",
            "58",
            "62",
            "64",
            "88",
            "90",
            "94",
            "96",
            "100",
            "102",
            "106",
            "108"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 120
            },
            "start": {
              "column": 12,
              "line": 118
            }
          }
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/ban-ts-comment */\n/**\n * ban-ts-comment is ignored for this file as I can't figure\n * out the correct generics to unwrap the zod schemas\n *\n * Probably something more like this:\n *    type ArrayElementType<T> = T extends ZodArray<infer E> ? E : T;\n * but alas, I'm having to write this one off for now\n * - Ross, Sep '22\n */\nimport { z, ZodArray, ZodSchema, ZodTypeAny } from \"zod\";\n\ntype WrapValue = {\n  <D, T extends Array<D>>(item: T): T;\n  <T>(item: T): T[];\n};\n\nconst wrapValue: WrapValue = (item: unknown) =>\n  Array.isArray(item) ? item : [item];\n\n// @ts-ignore\nexport function createInvalidRejectingSchema<E, S extends ZodArray<E, \"many\">>(\n  arraySchema: S\n) {\n  const validate = (item: unknown) => {\n    // @ts-ignore - `element` does exist on all ZodArrays, my attempt at the generic type is just wrong\n    return arraySchema.element.safeParse(item).success;\n  };\n  return z.preprocess((val) => wrapValue(val).filter(validate), arraySchema);\n}\n\nconst isZodArraySchema = <T extends ZodTypeAny>(\n  schema: unknown\n): schema is ZodArray<T> => {\n  return typeof schema === \"object\" && schema !== null && \"element\" in schema;\n};\n/**\n * Filters a list to only unique items\n * - calls getProp on each item to get the value to compare\n * - when 2 items clash (getProp returns the same for both) onConflict\n *   is invoked. If it returns the previously seen value it's left at\n *   it's current index, otherwise the current/new value will be appended to acc\n *\n * @example\n *   uniqBy(\n *     [{ id: 1 }, { id: 2, keepMe: true }, { id: 3 }, { id: 2 }],\n *     (x) => x.id,\n *     (prev, current) =>\n *       current.keepMe ? current : prev.keepMe ? prev : current\n *   )\n *   // -> [{ id: 1 }, { id: 2, keepMe: true }, { id: 3 }]\n */\n\nexport const uniqBy = <T>(\n  data: T[],\n  getProp: (el: T) => unknown,\n  onConflict: (prev: T, current: T) => T\n): T[] => {\n  return data.reduce<T[]>((acc, item) => {\n    const alreadyExistsIdx = acc.findIndex(\n      (el) => getProp(el) === getProp(item)\n    );\n    const alreadyExists = alreadyExistsIdx >= 0;\n    const prevItem = acc[alreadyExistsIdx];\n\n    if (alreadyExists && prevItem) {\n      const itemToKeep = onConflict(prevItem, item);\n      const keepPrev = itemToKeep === prevItem;\n\n      if (keepPrev) {\n        return acc;\n      } else {\n        const withoutPrevious = acc.filter((_, i) => i !== alreadyExistsIdx);\n        return [...withoutPrevious, itemToKeep];\n      }\n    } else {\n      return [...acc, item];\n    }\n  }, []);\n};\n\nconst draftPrefixRegex = /^drafts\\./;\nconst isDraft = (id: string): boolean => draftPrefixRegex.test(id);\nconst trimDraftsPrefix = (id: string) => id.replace(draftPrefixRegex, \"\");\n\nexport const parseResults = <S extends ZodSchema, D>(\n  schema: S,\n  data: D,\n  isPreviewMode?: boolean\n): ReturnType<typeof schema[\"parse\"]> => {\n  if (isPreviewMode) {\n    if (isZodArraySchema(schema)) {\n      /**\n       * Take the provided schema and create a version of it that\n       * will silently filter out any items that are invalid\n       */\n      const invalidRejectingSchema = createInvalidRejectingSchema(schema);\n      const parsedItems = invalidRejectingSchema.parse(data);\n\n      /**\n       * Filter out any duplicates, rejecting the non-draft version\n       * when a draft with a matching ID exists\n       *\n       * The ts-ignore comments are needed as uniqBy correctly infers types\n       * (see tests) but `parsedItems` is unknown because of dodgy types\n       * in `createInvalidRejectingSchema`\n       */\n      const uniqueItems = uniqBy(\n        parsedItems,\n        // @ts-ignore\n        (item) => trimDraftsPrefix(item.id),\n        // @ts-ignore\n        (prev, current) => (isDraft(prev.id) ? prev : current)\n      );\n\n      // Explicitly cast the erroneous unknown[] to the right type\n      return uniqueItems as ReturnType<S[\"parse\"]>;\n    } else {\n      return schema.parse(data);\n    }\n  }\n\n  return schema.parse(data);\n};\n"
    },
    "src/node-lib/sanity-graphql/__mocks__/index.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "316",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 45
            },
            "start": {
              "column": 16,
              "line": 25
            }
          }
        },
        {
          "id": "317",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 48,
              "line": 26
            },
            "start": {
              "column": 24,
              "line": 26
            }
          }
        },
        {
          "id": "318",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 52,
              "line": 27
            },
            "start": {
              "column": 26,
              "line": 27
            }
          }
        },
        {
          "id": "319",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 50,
              "line": 28
            },
            "start": {
              "column": 25,
              "line": 28
            }
          }
        },
        {
          "id": "320",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 29
            },
            "start": {
              "column": 27,
              "line": 29
            }
          }
        },
        {
          "id": "321",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 63,
              "line": 30
            },
            "start": {
              "column": 35,
              "line": 30
            }
          }
        },
        {
          "id": "322",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 42,
              "line": 31
            },
            "start": {
              "column": 21,
              "line": 31
            }
          }
        },
        {
          "id": "323",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 32
            },
            "start": {
              "column": 29,
              "line": 32
            }
          }
        },
        {
          "id": "324",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 33
            },
            "start": {
              "column": 30,
              "line": 33
            }
          }
        },
        {
          "id": "325",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 34
            },
            "start": {
              "column": 32,
              "line": 34
            }
          }
        },
        {
          "id": "326",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 35
            },
            "start": {
              "column": 27,
              "line": 35
            }
          }
        },
        {
          "id": "327",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 36
            },
            "start": {
              "column": 30,
              "line": 36
            }
          }
        },
        {
          "id": "328",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 64,
              "line": 37
            },
            "start": {
              "column": 32,
              "line": 37
            }
          }
        },
        {
          "id": "329",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 62,
              "line": 38
            },
            "start": {
              "column": 31,
              "line": 38
            }
          }
        },
        {
          "id": "330",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 39
            },
            "start": {
              "column": 28,
              "line": 39
            }
          }
        },
        {
          "id": "331",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 54,
              "line": 40
            },
            "start": {
              "column": 27,
              "line": 40
            }
          }
        },
        {
          "id": "332",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 58,
              "line": 41
            },
            "start": {
              "column": 29,
              "line": 41
            }
          }
        },
        {
          "id": "333",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 56,
              "line": 42
            },
            "start": {
              "column": 28,
              "line": 42
            }
          }
        },
        {
          "id": "334",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 60,
              "line": 43
            },
            "start": {
              "column": 30,
              "line": 43
            }
          }
        },
        {
          "id": "335",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 59,
              "line": 44
            },
            "start": {
              "column": 28,
              "line": 44
            }
          }
        }
      ],
      "source": "import homepageFixture from \"../fixtures/homepage.json\";\nimport aboutWhoWeArePageFixture from \"../fixtures/aboutWhoWeArePage.json\";\nimport aboutLeadershipPageFixture from \"../fixtures/aboutLeadershipPage.json\";\nimport aboutBoardPageFixture from \"../fixtures/aboutBoardPage.json\";\nimport aboutPartnersPageFixture from \"../fixtures/aboutPartnersPage.json\";\nimport aboutWorkWithUsPageFixture from \"../fixtures/aboutWorkWithUsPage.json\";\nimport allWebinarsFixture from \"../fixtures/allWebinars.json\";\nimport planningCorePageFixture from \"../fixtures/planningCorePage.json\";\nimport allBlogPostsFixture from \"../fixtures/allBlogPosts.json\";\nimport blogPostBySlugFixture from \"../fixtures/blogPostBySlug.json\";\nimport webinarBySlugFixture from \"../fixtures/webinarBySlug.json\";\nimport allLandingPagesFixture from \"../fixtures/allLandingPages.json\";\nimport curriculumCorePageFixture from \"../fixtures/curriculumCorePage.json\";\nimport contactCorePageFixture from \"../fixtures/contactCorePage.json\";\nimport allPolicyPagesFixture from \"../fixtures/allPolicyPages.json\";\nimport policyPageBySlugFixture from \"../fixtures/policyPageBySlug.json\";\nimport landingPageBySlugFixture from \"../fixtures/landingPageBySlug.json\";\nimport portableTextReferences from \"../fixtures/portableTextReferences.json\";\nimport allNewsListingPageFixture from \"../fixtures/newsListingPage.json\";\n\n/**\n * See sanity-graphql/index.ts for instructions on generating these\n * fixture files programmatically\n */\nexport default {\n  allWebinars: jest.fn(() => allWebinarsFixture),\n  webinarBySlug: jest.fn(() => webinarBySlugFixture),\n  allBlogPosts: jest.fn(() => allBlogPostsFixture),\n  blogPostBySlug: jest.fn(() => blogPostBySlugFixture),\n  portableTextReferences: jest.fn(() => portableTextReferences),\n  homepage: jest.fn(() => homepageFixture),\n  planningCorePage: jest.fn(() => planningCorePageFixture),\n  aboutWhoWeArePage: jest.fn(() => aboutWhoWeArePageFixture),\n  aboutLeadershipPage: jest.fn(() => aboutLeadershipPageFixture),\n  aboutBoardPage: jest.fn(() => aboutBoardPageFixture),\n  aboutPartnersPage: jest.fn(() => aboutPartnersPageFixture),\n  aboutWorkWithUsPage: jest.fn(() => aboutWorkWithUsPageFixture),\n  curriculumCorePage: jest.fn(() => curriculumCorePageFixture),\n  contactCorePage: jest.fn(() => contactCorePageFixture),\n  allPolicyPages: jest.fn(() => allPolicyPagesFixture),\n  policyPageBySlug: jest.fn(() => policyPageBySlugFixture),\n  allLandingPages: jest.fn(() => allLandingPagesFixture),\n  landingPageBySlug: jest.fn(() => landingPageBySlugFixture),\n  newsListingPage: jest.fn(() => allNewsListingPageFixture),\n};\n"
    },
    "src/node-lib/cms/sanity-client/resolveSanityReferences.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "240",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(20,4): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 72
            },
            "start": {
              "column": 18,
              "line": 20
            }
          }
        },
        {
          "id": "242",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(31,9): error TS2322: Type '[][]' is not assignable to type '[ObjectPath, string][]'.\n  Type '[]' is not assignable to type '[ObjectPath, string]'.\n    Source has 0 element(s) but target requires 2.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 34
            },
            "start": {
              "column": 76,
              "line": 31
            }
          }
        },
        {
          "id": "241",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(31,9): error TS2322: Type 'undefined[]' is not assignable to type '[ObjectPath, string][]'.\n  Type 'undefined' is not assignable to type '[ObjectPath, string]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 34
            },
            "start": {
              "column": 66,
              "line": 31
            }
          }
        },
        {
          "id": "246",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(37,5): error TS2322: Type 'undefined[]' is not assignable to type 'InputMaybe<string | string[]> | undefined'.\n  Type 'undefined[]' is not assignable to type 'string[]'.\n    Type 'undefined' is not assignable to type 'string'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 37
            },
            "start": {
              "column": 27,
              "line": 37
            }
          }
        },
        {
          "id": "247",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(48,39): error TS2769: No overload matches this call.\n  Overload 1 of 3, '(callbackfn: (previousValue: [ObjectPath, string], currentValue: [ObjectPath, string], currentIndex: number, array: [ObjectPath, string][]) => [...], initialValue: [...]): [...]', gave the following error.\n    Argument of type '(acc: T, [path, id]: [ObjectPath, string]) => void' is not assignable to parameter of type '(previousValue: [ObjectPath, string], currentValue: [ObjectPath, string], currentIndex: number, array: [ObjectPath, string][]) => [ObjectPath, string]'.\n      Types of parameters 'acc' and 'previousValue' are incompatible.\n        Type '[ObjectPath, string]' is not assignable to type 'T'.\n          'T' could be instantiated with an arbitrary type which could be unrelated to '[ObjectPath, string]'.\n  Overload 2 of 3, '(callbackfn: (previousValue: T, currentValue: [ObjectPath, string], currentIndex: number, array: [ObjectPath, string][]) => T, initialValue: T): T', gave the following error.\n    Argument of type '(acc: T, [path, id]: [ObjectPath, string]) => void' is not assignable to parameter of type '(previousValue: T, currentValue: [ObjectPath, string], currentIndex: number, array: [ObjectPath, string][]) => T'.\n      Type 'void' is not assignable to type 'T'.\n        'T' could be instantiated with an arbitrary type which could be unrelated to 'void'.\nsrc/node-lib/cms/sanity-client/resolveSanityReferences.ts(50,3): error TS2322: Type '[ObjectPath, string]' is not assignable to type 'T'.\n  'T' could be instantiated with an arbitrary type which could be unrelated to '[ObjectPath, string]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 69
            },
            "start": {
              "column": 60,
              "line": 48
            }
          }
        },
        {
          "id": "252",
          "mutatorName": "BooleanLiteral",
          "replacement": "queryPart",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(68,47): error TS2698: Spread types may only be created from object types.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 51
            },
            "start": {
              "column": 9,
              "line": 51
            }
          }
        },
        {
          "id": "256",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(58,26): error TS2345: Argument of type '{}' is not assignable to parameter of type 'ErrorInfo'.\n  Property 'code' is missing in type '{}' but required in type 'ErrorInfo'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "212"
          ],
          "location": {
            "end": {
              "column": 8,
              "line": 65
            },
            "start": {
              "column": 26,
              "line": 58
            }
          }
        },
        {
          "id": "257",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(59,9): error TS2322: Type '\"\"' is not assignable to type '\"misc/unknown\" | \"misc/network-error\" | \"misc/unexpected-type\" | \"misc/import-count\" | \"auth/send-sign-in-link\" | \"auth/token-expired\" | \"auth/token-error-unknown\" | \"graphql/validation\" | ... 8 more ... | \"cms/invalid-reference-data\"'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "212"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 59
            },
            "start": {
              "column": 15,
              "line": 59
            }
          }
        },
        {
          "id": "261",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(74,34): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 76
            },
            "start": {
              "column": 63,
              "line": 74
            }
          }
        },
        {
          "id": "264",
          "mutatorName": "LogicalOperator",
          "replacement": "data && typeof data === \"object\" || \"_type\" in data",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(75,65): error TS2571: Object is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 75
            },
            "start": {
              "column": 18,
              "line": 75
            }
          }
        },
        {
          "id": "265",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(75,37): error TS2571: Object is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 75
            },
            "start": {
              "column": 18,
              "line": 75
            }
          }
        },
        {
          "id": "266",
          "mutatorName": "LogicalOperator",
          "replacement": "data || typeof data === \"object\"",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(75,65): error TS2531: Object is possibly 'null'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 75
            },
            "start": {
              "column": 18,
              "line": 75
            }
          }
        },
        {
          "id": "269",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(75,26): error TS2367: This condition will always return 'false' since the types '\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\"' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 75
            },
            "start": {
              "column": 42,
              "line": 75
            }
          }
        },
        {
          "id": "271",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(78,35): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 80
            },
            "start": {
              "column": 46,
              "line": 78
            }
          }
        },
        {
          "id": "274",
          "mutatorName": "LogicalOperator",
          "replacement": "hasType(x) || x._type === \"reference\"",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(79,24): error TS2571: Object is of type 'unknown'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 79
            },
            "start": {
              "column": 10,
              "line": 79
            }
          }
        },
        {
          "id": "278",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(82,36): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 84
            },
            "start": {
              "column": 69,
              "line": 82
            }
          }
        },
        {
          "id": "287",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(83,35): error TS2367: This condition will always return 'false' since the types '\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\"' and '\"\"' have no overlap.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 83
            },
            "start": {
              "column": 52,
              "line": 83
            }
          }
        },
        {
          "id": "291",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(99,4): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 113
            },
            "start": {
              "column": 20,
              "line": 99
            }
          }
        },
        {
          "id": "293",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(100,9): error TS7034: Variable 'result' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/node-lib/cms/sanity-client/resolveSanityReferences.ts(104,10): error TS7005: Variable 'result' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 110
            },
            "start": {
              "column": 51,
              "line": 102
            }
          }
        },
        {
          "id": "292",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(106,19): error TS2345: Argument of type 'string[]' is not assignable to parameter of type 'string'.\nsrc/node-lib/cms/sanity-client/resolveSanityReferences.ts(108,19): error TS2345: Argument of type 'ObjectPath' is not assignable to parameter of type 'string'.\nsrc/node-lib/cms/sanity-client/resolveSanityReferences.ts(112,3): error TS2322: Type 'string[]' is not assignable to type 'ObjectPath[]'.\n  Type 'string' is not assignable to type 'ObjectPath'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 100
            },
            "start": {
              "column": 18,
              "line": 100
            }
          }
        },
        {
          "id": "294",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(103,11): error TS7034: Variable 'path' implicitly has type 'any[]' in some locations where its type cannot be determined.\nsrc/node-lib/cms/sanity-client/resolveSanityReferences.ts(106,19): error TS7005: Variable 'path' implicitly has an 'any[]' type.\nsrc/node-lib/cms/sanity-client/resolveSanityReferences.ts(108,47): error TS7005: Variable 'path' implicitly has an 'any[]' type.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 32,
              "line": 103
            },
            "start": {
              "column": 18,
              "line": 103
            }
          }
        },
        {
          "id": "295",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(108,34): error TS2345: Argument of type 'unknown' is not assignable to parameter of type 'Record<string, unknown> | Record<string, unknown>[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 105
            },
            "start": {
              "column": 9,
              "line": 105
            }
          }
        },
        {
          "id": "298",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(108,34): error TS2345: Argument of type 'unknown' is not assignable to parameter of type 'Record<string, unknown> | Record<string, unknown>[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 107
            },
            "start": {
              "column": 16,
              "line": 107
            }
          }
        },
        {
          "id": "299",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(108,34): error TS2345: Argument of type 'unknown' is not assignable to parameter of type 'Record<string, unknown> | Record<string, unknown>[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 107
            },
            "start": {
              "column": 16,
              "line": 107
            }
          }
        },
        {
          "id": "300",
          "mutatorName": "LogicalOperator",
          "replacement": "value || Array.isArray(value) || isRecord(value)",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(108,34): error TS2345: Argument of type '{}' is not assignable to parameter of type 'Record<string, unknown> | Record<string, unknown>[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 107
            },
            "start": {
              "column": 16,
              "line": 107
            }
          }
        },
        {
          "id": "301",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "src/node-lib/cms/sanity-client/resolveSanityReferences.ts(108,34): error TS2345: Argument of type '{}' is not assignable to parameter of type 'Record<string, unknown> | Record<string, unknown>[]'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 107
            },
            "start": {
              "column": 26,
              "line": 107
            }
          }
        },
        {
          "id": "243",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 33
            },
            "start": {
              "column": 9,
              "line": 33
            }
          }
        },
        {
          "id": "244",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 33
            },
            "start": {
              "column": 19,
              "line": 33
            }
          }
        },
        {
          "id": "245",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 38
            },
            "start": {
              "column": 70,
              "line": 36
            }
          }
        },
        {
          "id": "250",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 49
            },
            "start": {
              "column": 51,
              "line": 49
            }
          }
        },
        {
          "id": "251",
          "mutatorName": "EqualityOperator",
          "replacement": "doc.id !== id",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 49
            },
            "start": {
              "column": 51,
              "line": 49
            }
          }
        },
        {
          "id": "249",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 49
            },
            "start": {
              "column": 51,
              "line": 49
            }
          }
        },
        {
          "id": "258",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "212"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 64
            },
            "start": {
              "column": 15,
              "line": 60
            }
          }
        },
        {
          "id": "254",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 51
            },
            "start": {
              "column": 9,
              "line": 51
            }
          }
        },
        {
          "id": "255",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "212"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 66
            },
            "start": {
              "column": 21,
              "line": 51
            }
          }
        },
        {
          "id": "253",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 51
            },
            "start": {
              "column": 9,
              "line": 51
            }
          }
        },
        {
          "id": "259",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 68
            },
            "start": {
              "column": 25,
              "line": 68
            }
          }
        },
        {
          "id": "248",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 49
            },
            "start": {
              "column": 42,
              "line": 49
            }
          }
        },
        {
          "id": "263",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 75
            },
            "start": {
              "column": 18,
              "line": 75
            }
          }
        },
        {
          "id": "275",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 79
            },
            "start": {
              "column": 24,
              "line": 79
            }
          }
        },
        {
          "id": "268",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof data !== \"object\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 75
            },
            "start": {
              "column": 26,
              "line": 75
            }
          }
        },
        {
          "id": "260",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 68
            },
            "start": {
              "column": 36,
              "line": 68
            }
          }
        },
        {
          "id": "267",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 75
            },
            "start": {
              "column": 26,
              "line": 75
            }
          }
        },
        {
          "id": "262",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 75
            },
            "start": {
              "column": 18,
              "line": 75
            }
          }
        },
        {
          "id": "270",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 75
            },
            "start": {
              "column": 54,
              "line": 75
            }
          }
        },
        {
          "id": "272",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 79
            },
            "start": {
              "column": 10,
              "line": 79
            }
          }
        },
        {
          "id": "273",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 79
            },
            "start": {
              "column": 10,
              "line": 79
            }
          }
        },
        {
          "id": "277",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 79
            },
            "start": {
              "column": 36,
              "line": 79
            }
          }
        },
        {
          "id": "284",
          "mutatorName": "BooleanLiteral",
          "replacement": "Array.isArray(value)",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 83
            },
            "start": {
              "column": 10,
              "line": 83
            }
          }
        },
        {
          "id": "283",
          "mutatorName": "LogicalOperator",
          "replacement": "!Array.isArray(value) || typeof value === \"object\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 83
            },
            "start": {
              "column": 10,
              "line": 83
            }
          }
        },
        {
          "id": "285",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 83
            },
            "start": {
              "column": 35,
              "line": 83
            }
          }
        },
        {
          "id": "276",
          "mutatorName": "EqualityOperator",
          "replacement": "x._type !== \"reference\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 79
            },
            "start": {
              "column": 24,
              "line": 79
            }
          }
        },
        {
          "id": "280",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 83
            },
            "start": {
              "column": 10,
              "line": 83
            }
          }
        },
        {
          "id": "281",
          "mutatorName": "LogicalOperator",
          "replacement": "!Array.isArray(value) && typeof value === \"object\" || value !== null",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 83
            },
            "start": {
              "column": 10,
              "line": 83
            }
          }
        },
        {
          "id": "279",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 83
            },
            "start": {
              "column": 10,
              "line": 83
            }
          }
        },
        {
          "id": "282",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 83
            },
            "start": {
              "column": 10,
              "line": 83
            }
          }
        },
        {
          "id": "289",
          "mutatorName": "EqualityOperator",
          "replacement": "value === null",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 83
            },
            "start": {
              "column": 64,
              "line": 83
            }
          }
        },
        {
          "id": "288",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 78,
              "line": 83
            },
            "start": {
              "column": 64,
              "line": 83
            }
          }
        },
        {
          "id": "286",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof value !== \"object\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 83
            },
            "start": {
              "column": 35,
              "line": 83
            }
          }
        },
        {
          "id": "302",
          "mutatorName": "LogicalOperator",
          "replacement": "Array.isArray(value) && isRecord(value)",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 107
            },
            "start": {
              "column": 26,
              "line": 107
            }
          }
        },
        {
          "id": "297",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 107
            },
            "start": {
              "column": 22,
              "line": 105
            }
          }
        },
        {
          "id": "296",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 105
            },
            "start": {
              "column": 9,
              "line": 105
            }
          }
        },
        {
          "id": "303",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 109
            },
            "start": {
              "column": 68,
              "line": 107
            }
          }
        },
        {
          "id": "290",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "209",
            "210",
            "211",
            "212"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 98
            },
            "start": {
              "column": 22,
              "line": 98
            }
          }
        }
      ],
      "source": "import { get, update } from \"lodash/fp\";\nimport { z } from \"zod\";\n\nimport OakError from \"../../../errors/OakError\";\nimport sanityGraphqlApi from \"../../sanity-graphql\";\nimport { portableTextReferencedEntrySchema } from \"../../../common-lib/cms-types\";\n\ntype ObjectPath = string[];\n\nconst referencedDocumentsSchema = z.array(portableTextReferencedEntrySchema);\n\n/**\n * Given a portable text JSON blob, search for all objects that have\n * `{_type: \"reference\"}` and fetch and replace them with actual content\n */\nexport const resolveSanityReferences = async <\n  T extends Record<string, unknown> | Record<string, unknown>[]\n>(\n  portableText: T\n): Promise<T> => {\n  /**\n   * Find all paths to embedded references within the portable text, e.g.\n   * [[0, 'image', 'asset'], [5, 'video']]\n   * We hold onto this paths array so we can update them later\n   */\n  const pathsToUpdate = getAllPaths(portableText, isReference);\n\n  /**\n   * Grab the actual _ref for each of the paths and store in a tuple with the path\n   */\n  const pathsAndRefs: [ObjectPath, string][] = pathsToUpdate.map((path) => [\n    path,\n    get([...path, \"_ref\"], portableText),\n  ]);\n\n  const queryResults = await sanityGraphqlApi.portableTextReferences({\n    ids: pathsAndRefs.map(([, id]) => id),\n  });\n\n  const parsedResults = referencedDocumentsSchema.parse(\n    queryResults.allDocument\n  );\n\n  /**\n   * For each of the paths we found earlier, replace the _ref object at that\n   * location with the result of the graphql query for it's data\n   */\n  const updated = pathsAndRefs.reduce((acc, [path, id]) => {\n    const queryPart = parsedResults.find((doc) => doc.id === id);\n\n    if (!queryPart) {\n      /**\n       * If you're getting errors here make sure:\n       * - You've checked you're fetching the correct data in portableTextReferences.gql\n       * - You've ran gql-codegen:sanity\n       * - Checked they're covered in portableTextReferencedEntrySchema\n       */\n      throw new OakError({\n        code: \"cms/invalid-reference-data\",\n        meta: {\n          portableTextPath: path,\n          portableTextRefId: id,\n          queryResults: JSON.stringify(queryResults.allDocument),\n        },\n      });\n    }\n\n    return update(path, (data) => ({ ...data, ...queryPart }), acc);\n  }, portableText);\n\n  return updated;\n};\n\nconst hasType = (data: unknown): data is { _type: string } => {\n  return Boolean(data && typeof data === \"object\" && \"_type\" in data);\n};\n\nconst isReference = (x: unknown): boolean => {\n  return hasType(x) && x._type === \"reference\";\n};\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !Array.isArray(value) && typeof value === \"object\" && value !== null;\n}\n\n/**\n * Deeply search an object for each value that matches\n * the provided predicate, returning the path for each\n * match as an array\n *\n * @example\n * getAllPaths({foo: [{bar: 'baz'}]}, x => x.bar === 'baz')\n * // => [['foo', '0', 'bar']]\n */\nexport const getAllPaths = (\n  obj: Record<string, unknown> | Record<string, unknown>[],\n  pred: (v: unknown) => boolean,\n  prev: ObjectPath = []\n): ObjectPath[] => {\n  const result = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    const path = [...prev, key];\n\n    if (pred(value)) {\n      result.push(path);\n    } else if (value && (Array.isArray(value) || isRecord(value))) {\n      result.push(...getAllPaths(value, pred, path));\n    }\n  }\n\n  return result;\n};\n"
    },
    "src/node-lib/isr/index.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "304",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/isr/index.ts(5,37): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\"'.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "182",
            "183",
            "184",
            "185",
            "188",
            "189",
            "192",
            "193",
            "197",
            "198",
            "272",
            "273",
            "274",
            "275",
            "285",
            "286"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 5
            },
            "start": {
              "column": 37,
              "line": 5
            }
          }
        },
        {
          "id": "309",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/isr/index.ts(21,4): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "128",
            "129",
            "130",
            "131",
            "138",
            "139",
            "140",
            "141",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "161",
            "162",
            "163",
            "164",
            "183",
            "184",
            "188",
            "192",
            "197",
            "207",
            "237",
            "272",
            "273",
            "274",
            "275"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 29
            },
            "start": {
              "column": 28,
              "line": 21
            }
          }
        },
        {
          "id": "310",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/node-lib/isr/index.ts(25,22): error TS2339: Property 'revalidate' does not exist on type '{}'.\nsrc/node-lib/isr/index.ts(28,3): error TS2322: Type '{}' is not assignable to type 'GetStaticPropsResult<P>'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "128",
            "129",
            "130",
            "131",
            "138",
            "139",
            "140",
            "141",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "161",
            "162",
            "163",
            "164",
            "183",
            "184",
            "188",
            "192",
            "197",
            "207",
            "237",
            "272",
            "273",
            "274",
            "275"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 22
            },
            "start": {
              "column": 28,
              "line": 22
            }
          }
        },
        {
          "id": "315",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/isr/index.ts(24,54): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\"'.\nsrc/node-lib/isr/index.ts(25,5): error TS2322: Type 'NonNullEnvValue<\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\">' is not assignable to type 'number | boolean | undefined'.\n  Type 'string' is not assignable to type 'number | boolean | undefined'.\n",
          "status": "CompileError",
          "static": false,
          "coveredBy": [
            "128",
            "129",
            "130",
            "131",
            "138",
            "139",
            "140",
            "141",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "161",
            "162",
            "163",
            "164",
            "183",
            "184",
            "188",
            "192",
            "197",
            "207",
            "237",
            "272",
            "273",
            "274"
          ],
          "location": {
            "end": {
              "column": 79,
              "line": 24
            },
            "start": {
              "column": 54,
              "line": 24
            }
          }
        },
        {
          "id": "305",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "182",
            "183",
            "184",
            "185",
            "188",
            "189",
            "192",
            "193",
            "197",
            "198",
            "272",
            "273",
            "274",
            "275",
            "285",
            "286"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 6
            },
            "start": {
              "column": 5,
              "line": 6
            }
          }
        },
        {
          "id": "307",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "275"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 8
            },
            "start": {
              "column": 17,
              "line": 6
            }
          }
        },
        {
          "id": "308",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "275"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 7
            },
            "start": {
              "column": 16,
              "line": 7
            }
          }
        },
        {
          "id": "311",
          "mutatorName": "BooleanLiteral",
          "replacement": "disableIsr",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "128",
            "129",
            "130",
            "131",
            "138",
            "139",
            "140",
            "141",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "161",
            "162",
            "163",
            "164",
            "183",
            "184",
            "188",
            "192",
            "197",
            "207",
            "237",
            "272",
            "273",
            "274",
            "275"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "313",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "128",
            "129",
            "130",
            "131",
            "138",
            "139",
            "140",
            "141",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "161",
            "162",
            "163",
            "164",
            "183",
            "184",
            "188",
            "192",
            "197",
            "207",
            "237",
            "272",
            "273",
            "274",
            "275"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "312",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "128",
            "129",
            "130",
            "131",
            "138",
            "139",
            "140",
            "141",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "161",
            "162",
            "163",
            "164",
            "183",
            "184",
            "188",
            "192",
            "197",
            "207",
            "237",
            "272",
            "273",
            "274",
            "275"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 23
            },
            "start": {
              "column": 7,
              "line": 23
            }
          }
        },
        {
          "id": "314",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "coveredBy": [
            "128",
            "129",
            "130",
            "131",
            "138",
            "139",
            "140",
            "141",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "161",
            "162",
            "163",
            "164",
            "183",
            "184",
            "188",
            "192",
            "197",
            "207",
            "237",
            "272",
            "273",
            "274"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 26
            },
            "start": {
              "column": 20,
              "line": 23
            }
          }
        },
        {
          "id": "306",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "146",
            "147",
            "148",
            "152",
            "153",
            "154",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "182",
            "183",
            "184",
            "185",
            "188",
            "189",
            "192",
            "193",
            "197",
            "198",
            "272",
            "273",
            "274",
            "275",
            "285",
            "286"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 6
            },
            "start": {
              "column": 5,
              "line": 6
            }
          }
        }
      ],
      "source": "import { GetStaticPropsResult } from \"next\";\n\nimport serverConfig from \"../../config/server\";\n\nconst disableIsr = serverConfig.get(\"disableIsr\");\nif (disableIsr) {\n  console.info(\"ISR disabled in env\");\n}\n\n/**\n * Default add incremental static regeneration config to the getStaticProps result.\n * Can be disabled by setting the env `DISABLE_ISR=\"on\"`.\n *\n * Modifies the original object, lazy but simple.\n *\n * @param results Input GetStaticProps results.\n * @returns The modified results.\n */\nfunction decorateWithIsr<P>(\n  results: GetStaticPropsResult<P>\n): GetStaticPropsResult<P> {\n  const decoratedResults = { ...results };\n  if (!disableIsr) {\n    const revalidateTimeInSeconds = serverConfig.get(\"sanityRevalidateSeconds\");\n    decoratedResults.revalidate = revalidateTimeInSeconds;\n  }\n\n  return decoratedResults;\n}\n\nexport { decorateWithIsr };\n"
    },
    "src/node-lib/sanity-graphql/index.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "336",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "src/node-lib/sanity-graphql/index.ts(17,5): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 15,
              "line": 17
            }
          }
        },
        {
          "id": "337",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "NoCoverage",
          "static": false,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 43,
              "line": 18
            },
            "start": {
              "column": 35,
              "line": 18
            }
          }
        },
        {
          "id": "340",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "src/node-lib/sanity-graphql/index.ts(23,42): error TS2345: Argument of type '{}' is not assignable to parameter of type '{ projectId: string; dataset: string; datasetTag: string; useCDN: boolean; }'.\n  Type '{}' is missing the following properties from type '{ projectId: string; dataset: string; datasetTag: string; useCDN: boolean; }': projectId, dataset, datasetTag, useCDN\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 28
            },
            "start": {
              "column": 42,
              "line": 23
            }
          }
        },
        {
          "id": "341",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/sanity-graphql/index.ts(24,3): error TS2322: Type 'NonNullEnvValue<\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\">' is not assignable to type 'string'.\n  Type 'number' is not assignable to type 'string'.\nsrc/node-lib/sanity-graphql/index.ts(24,31): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\"'.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 24
            },
            "start": {
              "column": 31,
              "line": 24
            }
          }
        },
        {
          "id": "342",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/sanity-graphql/index.ts(25,3): error TS2322: Type 'NonNullEnvValue<\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\">' is not assignable to type 'string'.\n  Type 'number' is not assignable to type 'string'.\nsrc/node-lib/sanity-graphql/index.ts(25,29): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\"'.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 25
            },
            "start": {
              "column": 29,
              "line": 25
            }
          }
        },
        {
          "id": "343",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/sanity-graphql/index.ts(26,3): error TS2322: Type 'NonNullEnvValue<\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\">' is not assignable to type 'string'.\n  Type 'number' is not assignable to type 'string'.\nsrc/node-lib/sanity-graphql/index.ts(26,32): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\"'.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 26
            },
            "start": {
              "column": 32,
              "line": 26
            }
          }
        },
        {
          "id": "347",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/sanity-graphql/index.ts(27,28): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\"'.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 27
            },
            "start": {
              "column": 28,
              "line": 27
            }
          }
        },
        {
          "id": "352",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "src/node-lib/sanity-graphql/index.ts(32,47): error TS2345: Argument of type '\"\"' is not assignable to parameter of type '\"sanityProjectId\" | \"sanityDataset\" | \"sanityDatasetTag\" | \"sanityUseCDN\" | \"sanityGraphqlApiSecret\" | \"sanityPreviewSecret\" | \"sanityRevalidateSeconds\" | \"disableIsr\" | \"graphqlApiUrl\"'.\n",
          "status": "CompileError",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 32
            },
            "start": {
              "column": 47,
              "line": 32
            }
          }
        },
        {
          "id": "338",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 18
            },
            "start": {
              "column": 46,
              "line": 18
            }
          }
        },
        {
          "id": "339",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 106,
              "line": 20
            },
            "start": {
              "column": 10,
              "line": 20
            }
          }
        },
        {
          "id": "345",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 27
            },
            "start": {
              "column": 11,
              "line": 27
            }
          }
        },
        {
          "id": "344",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 27
            },
            "start": {
              "column": 11,
              "line": 27
            }
          }
        },
        {
          "id": "346",
          "mutatorName": "EqualityOperator",
          "replacement": "serverConfig.get(\"sanityUseCDN\") !== \"true\"",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 27
            },
            "start": {
              "column": 11,
              "line": 27
            }
          }
        },
        {
          "id": "348",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 27
            },
            "start": {
              "column": 48,
              "line": 27
            }
          }
        },
        {
          "id": "349",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 34
            },
            "start": {
              "column": 69,
              "line": 30
            }
          }
        },
        {
          "id": "350",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 12,
              "line": 31
            }
          }
        },
        {
          "id": "351",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "status": "Timeout",
          "static": true,
          "coveredBy": [
            "283",
            "284"
          ],
          "location": {
            "end": {
              "column": 74,
              "line": 32
            },
            "start": {
              "column": 20,
              "line": 32
            }
          }
        }
      ],
      "source": "import { GraphQLClient } from \"graphql-request\";\n\nimport serverConfig from \"../../config/server\";\n\nimport {\n  // AllBlogPostsQuery,\n  // AllWebinarsQuery,\n  getSdk,\n  // SdkFunctionWrapper,\n} from \"./generated/sdk\";\n\nconst getGraphqlEndpoint = (opts: {\n  projectId: string;\n  dataset: string;\n  datasetTag: string;\n  useCDN: boolean;\n}): string => {\n  const subdomain = opts.useCDN ? `apicdn` : `api`;\n\n  return `https://${opts.projectId}.${subdomain}.sanity.io/v1/graphql/${opts.dataset}/${opts.datasetTag}`;\n};\n\nconst graphqlAPIUrl = getGraphqlEndpoint({\n  projectId: serverConfig.get(\"sanityProjectId\"),\n  dataset: serverConfig.get(\"sanityDataset\"),\n  datasetTag: serverConfig.get(\"sanityDatasetTag\"),\n  useCDN: serverConfig.get(\"sanityUseCDN\") === \"true\",\n});\n\nexport const sanityGraphqlClient = new GraphQLClient(graphqlAPIUrl, {\n  headers: {\n    Authorization: `Bearer ${serverConfig.get(\"sanityGraphqlApiSecret\")}`,\n  },\n});\n\n/**\n * Pass fixtureGenerationWrapper as a second argument to getSdk to have fixtures\n * automatically generated for each API operation\n *\n * n.b Make sure tests aren't running when this happens\n */\n// const fixtureGenerationWrapper: SdkFunctionWrapper = async (\n//   action,\n//   operationName\n// ) => {\n//   const response = await action();\n\n//   let trimmedResponse = response;\n\n//   // Bit of a hack to keep fixture size down\n//   if (\"allWebinar\" in response) {\n//     trimmedResponse = {\n//       allWebinar: (response as AllWebinarsQuery).allWebinar\n//         .slice(0, 2)\n//         .map((webinar) => {\n//           return {\n//             ...webinar,\n//             summary: webinar.summaryPortableText.slice(0, 3),\n//           };\n//         }),\n//     };\n//   } else if (\"allNewsPost\" in response) {\n//     trimmedResponse = {\n//       allNewsPost: (response as AllBlogPostsQuery).allNewsPost.slice(0, 2),\n//     };\n//   }\n\n//   import(\"fs\").then((fs) => {\n//     fs.writeFileSync(\n//       `./src/node-lib/sanity-graphql/fixtures/${operationName}.json`,\n//       JSON.stringify(trimmedResponse, null, 2)\n//     );\n//   });\n\n//   return response;\n// };\n\nconst sanityGraphqlApi = getSdk(\n  sanityGraphqlClient /*, fixtureGenerationWrapper */\n);\n\nexport default sanityGraphqlApi;\n"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 80,
    "low": 60,
    "break": null
  },
  "testFiles": {
    "src/node-lib/cms/sanity-client/index.test.ts": {
      "tests": [
        {
          "id": "0",
          "name": "cms/sanity-client webinarsBySlug fetches the specified webinar",
          "location": {
            "start": {
              "column": 6,
              "line": 58
            }
          }
        },
        {
          "id": "1",
          "name": "cms/sanity-client webinarsBySlug returns a parsed webinar",
          "location": {
            "start": {
              "column": 6,
              "line": 66
            }
          }
        },
        {
          "id": "2",
          "name": "cms/sanity-client webinarsBySlug throws when a webinar is invalid",
          "location": {
            "start": {
              "column": 6,
              "line": 76
            }
          }
        },
        {
          "id": "3",
          "name": "cms/sanity-client webinars returns parsed webinars",
          "location": {
            "start": {
              "column": 6,
              "line": 90
            }
          }
        },
        {
          "id": "4",
          "name": "cms/sanity-client webinars throws when a webinar is invalid",
          "location": {
            "start": {
              "column": 6,
              "line": 100
            }
          }
        },
        {
          "id": "5",
          "name": "cms/sanity-client client methods .homepage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "6",
          "name": "cms/sanity-client client methods .homepage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "7",
          "name": "cms/sanity-client client methods .homepage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "8",
          "name": "cms/sanity-client client methods .homepage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "9",
          "name": "cms/sanity-client client methods .homepage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "10",
          "name": "cms/sanity-client client methods .homepage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "11",
          "name": "cms/sanity-client client methods .planningPage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "12",
          "name": "cms/sanity-client client methods .planningPage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "13",
          "name": "cms/sanity-client client methods .planningPage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "14",
          "name": "cms/sanity-client client methods .planningPage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "15",
          "name": "cms/sanity-client client methods .planningPage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "16",
          "name": "cms/sanity-client client methods .planningPage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "17",
          "name": "cms/sanity-client client methods .aboutWhoWeArePage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "18",
          "name": "cms/sanity-client client methods .aboutWhoWeArePage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "19",
          "name": "cms/sanity-client client methods .aboutWhoWeArePage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "20",
          "name": "cms/sanity-client client methods .aboutWhoWeArePage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "21",
          "name": "cms/sanity-client client methods .aboutWhoWeArePage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "22",
          "name": "cms/sanity-client client methods .aboutWhoWeArePage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "23",
          "name": "cms/sanity-client client methods .aboutLeadershipPage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "24",
          "name": "cms/sanity-client client methods .aboutLeadershipPage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "25",
          "name": "cms/sanity-client client methods .aboutLeadershipPage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "26",
          "name": "cms/sanity-client client methods .aboutLeadershipPage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "27",
          "name": "cms/sanity-client client methods .aboutLeadershipPage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "28",
          "name": "cms/sanity-client client methods .aboutLeadershipPage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "29",
          "name": "cms/sanity-client client methods .aboutBoardPage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "30",
          "name": "cms/sanity-client client methods .aboutBoardPage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "31",
          "name": "cms/sanity-client client methods .aboutBoardPage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "32",
          "name": "cms/sanity-client client methods .aboutBoardPage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "33",
          "name": "cms/sanity-client client methods .aboutBoardPage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "34",
          "name": "cms/sanity-client client methods .aboutBoardPage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "35",
          "name": "cms/sanity-client client methods .aboutPartnersPage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "36",
          "name": "cms/sanity-client client methods .aboutPartnersPage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "37",
          "name": "cms/sanity-client client methods .aboutPartnersPage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "38",
          "name": "cms/sanity-client client methods .aboutPartnersPage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "39",
          "name": "cms/sanity-client client methods .aboutPartnersPage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "40",
          "name": "cms/sanity-client client methods .aboutPartnersPage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "41",
          "name": "cms/sanity-client client methods .aboutWorkWithUsPage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "42",
          "name": "cms/sanity-client client methods .aboutWorkWithUsPage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "43",
          "name": "cms/sanity-client client methods .aboutWorkWithUsPage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "44",
          "name": "cms/sanity-client client methods .aboutWorkWithUsPage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "45",
          "name": "cms/sanity-client client methods .aboutWorkWithUsPage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "46",
          "name": "cms/sanity-client client methods .aboutWorkWithUsPage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "47",
          "name": "cms/sanity-client client methods .curriculumPage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "48",
          "name": "cms/sanity-client client methods .curriculumPage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "49",
          "name": "cms/sanity-client client methods .curriculumPage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "50",
          "name": "cms/sanity-client client methods .curriculumPage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "51",
          "name": "cms/sanity-client client methods .curriculumPage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "52",
          "name": "cms/sanity-client client methods .curriculumPage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "53",
          "name": "cms/sanity-client client methods .contactPage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "54",
          "name": "cms/sanity-client client methods .contactPage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "55",
          "name": "cms/sanity-client client methods .contactPage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "56",
          "name": "cms/sanity-client client methods .contactPage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "57",
          "name": "cms/sanity-client client methods .contactPage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "58",
          "name": "cms/sanity-client client methods .contactPage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "59",
          "name": "cms/sanity-client client methods .blogListingPage() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 160
            }
          }
        },
        {
          "id": "60",
          "name": "cms/sanity-client client methods .blogListingPage() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 166
            }
          }
        },
        {
          "id": "61",
          "name": "cms/sanity-client client methods .blogListingPage() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 172
            }
          }
        },
        {
          "id": "62",
          "name": "cms/sanity-client client methods .blogListingPage() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 179
            }
          }
        },
        {
          "id": "63",
          "name": "cms/sanity-client client methods .blogListingPage() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 187
            }
          }
        },
        {
          "id": "64",
          "name": "cms/sanity-client client methods .blogListingPage() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 197
            }
          }
        },
        {
          "id": "65",
          "name": "cms/sanity-client client methods .webinars() returns an empty array when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 212
            }
          }
        },
        {
          "id": "66",
          "name": "cms/sanity-client client methods .webinars() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 218
            }
          }
        },
        {
          "id": "67",
          "name": "cms/sanity-client client methods .webinars() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 225
            }
          }
        },
        {
          "id": "68",
          "name": "cms/sanity-client client methods .webinars() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 233
            }
          }
        },
        {
          "id": "69",
          "name": "cms/sanity-client client methods .webinars() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 243
            }
          }
        },
        {
          "id": "70",
          "name": "cms/sanity-client client methods .blogPosts() returns an empty array when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 212
            }
          }
        },
        {
          "id": "71",
          "name": "cms/sanity-client client methods .blogPosts() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 218
            }
          }
        },
        {
          "id": "72",
          "name": "cms/sanity-client client methods .blogPosts() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 225
            }
          }
        },
        {
          "id": "73",
          "name": "cms/sanity-client client methods .blogPosts() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 233
            }
          }
        },
        {
          "id": "74",
          "name": "cms/sanity-client client methods .blogPosts() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 243
            }
          }
        },
        {
          "id": "75",
          "name": "cms/sanity-client client methods .policyPages() returns an empty array when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 212
            }
          }
        },
        {
          "id": "76",
          "name": "cms/sanity-client client methods .policyPages() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 218
            }
          }
        },
        {
          "id": "77",
          "name": "cms/sanity-client client methods .policyPages() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 225
            }
          }
        },
        {
          "id": "78",
          "name": "cms/sanity-client client methods .policyPages() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 233
            }
          }
        },
        {
          "id": "79",
          "name": "cms/sanity-client client methods .policyPages() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 243
            }
          }
        },
        {
          "id": "80",
          "name": "cms/sanity-client client methods .landingPages() returns an empty array when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 212
            }
          }
        },
        {
          "id": "81",
          "name": "cms/sanity-client client methods .landingPages() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 218
            }
          }
        },
        {
          "id": "82",
          "name": "cms/sanity-client client methods .landingPages() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 225
            }
          }
        },
        {
          "id": "83",
          "name": "cms/sanity-client client methods .landingPages() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 233
            }
          }
        },
        {
          "id": "84",
          "name": "cms/sanity-client client methods .landingPages() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 243
            }
          }
        },
        {
          "id": "85",
          "name": "cms/sanity-client client methods .webinarBySlug() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 258
            }
          }
        },
        {
          "id": "86",
          "name": "cms/sanity-client client methods .webinarBySlug() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 264
            }
          }
        },
        {
          "id": "87",
          "name": "cms/sanity-client client methods .webinarBySlug() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 270
            }
          }
        },
        {
          "id": "88",
          "name": "cms/sanity-client client methods .webinarBySlug() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 277
            }
          }
        },
        {
          "id": "89",
          "name": "cms/sanity-client client methods .webinarBySlug() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 285
            }
          }
        },
        {
          "id": "90",
          "name": "cms/sanity-client client methods .webinarBySlug() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 295
            }
          }
        },
        {
          "id": "91",
          "name": "cms/sanity-client client methods .blogPostBySlug() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 258
            }
          }
        },
        {
          "id": "92",
          "name": "cms/sanity-client client methods .blogPostBySlug() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 264
            }
          }
        },
        {
          "id": "93",
          "name": "cms/sanity-client client methods .blogPostBySlug() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 270
            }
          }
        },
        {
          "id": "94",
          "name": "cms/sanity-client client methods .blogPostBySlug() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 277
            }
          }
        },
        {
          "id": "95",
          "name": "cms/sanity-client client methods .blogPostBySlug() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 285
            }
          }
        },
        {
          "id": "96",
          "name": "cms/sanity-client client methods .blogPostBySlug() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 295
            }
          }
        },
        {
          "id": "97",
          "name": "cms/sanity-client client methods .policyPageBySlug() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 258
            }
          }
        },
        {
          "id": "98",
          "name": "cms/sanity-client client methods .policyPageBySlug() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 264
            }
          }
        },
        {
          "id": "99",
          "name": "cms/sanity-client client methods .policyPageBySlug() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 270
            }
          }
        },
        {
          "id": "100",
          "name": "cms/sanity-client client methods .policyPageBySlug() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 277
            }
          }
        },
        {
          "id": "101",
          "name": "cms/sanity-client client methods .policyPageBySlug() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 285
            }
          }
        },
        {
          "id": "102",
          "name": "cms/sanity-client client methods .policyPageBySlug() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 295
            }
          }
        },
        {
          "id": "103",
          "name": "cms/sanity-client client methods .landingPageBySlug() returns null when no content is found",
          "location": {
            "start": {
              "column": 8,
              "line": 258
            }
          }
        },
        {
          "id": "104",
          "name": "cms/sanity-client client methods .landingPageBySlug() attempts to resolve embedded portable text references",
          "location": {
            "start": {
              "column": 8,
              "line": 264
            }
          }
        },
        {
          "id": "105",
          "name": "cms/sanity-client client methods .landingPageBySlug() does not fetch draft content by default",
          "location": {
            "start": {
              "column": 8,
              "line": 270
            }
          }
        },
        {
          "id": "106",
          "name": "cms/sanity-client client methods .landingPageBySlug() fetches draft content when previewMode flag is passed",
          "location": {
            "start": {
              "column": 8,
              "line": 277
            }
          }
        },
        {
          "id": "107",
          "name": "cms/sanity-client client methods .landingPageBySlug() passes previewMode flag to parseResults when false",
          "location": {
            "start": {
              "column": 8,
              "line": 285
            }
          }
        },
        {
          "id": "108",
          "name": "cms/sanity-client client methods .landingPageBySlug() passes previewMode flag to parseResults when true",
          "location": {
            "start": {
              "column": 8,
              "line": 295
            }
          }
        },
        {
          "id": "109",
          "name": "cms/sanity-client landingPageBySlug fetches the specified landing page",
          "location": {
            "start": {
              "column": 6,
              "line": 308
            }
          }
        },
        {
          "id": "110",
          "name": "cms/sanity-client landingPageBySlug returns a parsed landing page",
          "location": {
            "start": {
              "column": 6,
              "line": 316
            }
          }
        },
        {
          "id": "111",
          "name": "cms/sanity-client landingPageBySlug throws when a landing page is invalid",
          "location": {
            "start": {
              "column": 6,
              "line": 326
            }
          }
        },
        {
          "id": "112",
          "name": "cms/sanity-client landingPages returns parsed landing pages",
          "location": {
            "start": {
              "column": 6,
              "line": 340
            }
          }
        },
        {
          "id": "113",
          "name": "cms/sanity-client landingPages throws when a landing page is invalid",
          "location": {
            "start": {
              "column": 6,
              "line": 348
            }
          }
        },
        {
          "id": "114",
          "name": "cms/sanity-client videoSchema transforms an undefined thumbnail to null",
          "location": {
            "start": {
              "column": 6,
              "line": 360
            }
          }
        }
      ],
      "source": "import { z } from \"zod\";\n\nimport sanityGraphqlApi from \"../../sanity-graphql\";\nimport allWebinarsFixture from \"../../sanity-graphql/fixtures/allWebinars.json\";\nimport webinarBySlugFixture from \"../../sanity-graphql/fixtures/webinarBySlug.json\";\nimport landingPageBySlugFixture from \"../../sanity-graphql/fixtures/landingPageBySlug.json\";\nimport { videoSchema } from \"../../../common-lib/cms-types/base\";\n\nimport { parseResults } from \"./parseResults\";\nimport { resolveSanityReferences } from \"./resolveSanityReferences\";\n\nimport getSanityClient from \"./\";\n\n/**\n * Note: sanity-graphql mocks are configured in\n * sanity-graphql/__mocks__\n */\njest.mock(\"../../sanity-graphql\");\n\njest.mock(\"./parseResults\", () => {\n  const original = jest.requireActual(\"./parseResults\");\n  return {\n    __esModule: true,\n    parseResults: jest.fn(original.parseResults),\n  };\n});\n\njest.mock(\"./resolveSanityReferences\", () => {\n  return {\n    __esModule: true,\n    // Return self without transform, bypassing any errors caused by\n    // dodgy mocks\n    resolveSanityReferences: jest.fn((x) => x),\n  };\n});\n\nconst mockSanityGraphqlApi = sanityGraphqlApi as jest.MockedObject<\n  typeof sanityGraphqlApi\n>;\n\nconst testVideo = {\n  title: \"Some video from the library because it's the only one I can find\",\n  video: {\n    asset: {\n      assetId: \"ByqZ4KA9mLdyrtWnAvRMHbcQnNk2uUnf3NNdahrey5o\",\n      playbackId: \"5VfBnOXD87KnXMJrYNG6HtCIizY6q6thP5EjjqkU1kI\",\n    },\n  },\n};\n\ndescribe(\"cms/sanity-client\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n  });\n\n  describe(\"webinarsBySlug\", () => {\n    it(\"fetches the specified webinar\", async () => {\n      await getSanityClient().webinarBySlug(\"an-upcoming-webinar\");\n\n      expect(sanityGraphqlApi.webinarBySlug).toBeCalledWith(\n        expect.objectContaining({ slug: \"an-upcoming-webinar\" })\n      );\n    });\n\n    it(\"returns a parsed webinar\", async () => {\n      const result = await getSanityClient().webinarBySlug(\n        \"an-upcoming-webinar\"\n      );\n\n      expect(result?.slug).toBe(\n        webinarBySlugFixture.allWebinar[0]?.slug.current\n      );\n    });\n\n    it(\"throws when a webinar is invalid\", async () => {\n      mockSanityGraphqlApi.webinarBySlug.mockResolvedValueOnce(\n        {\n          allWebinar: [{ slug: \"foo\" }],\n        } as never /* silence error about incorrect slug type */\n      );\n\n      await expect(\n        getSanityClient().webinarBySlug(\"an-upcoming-webinar\")\n      ).rejects.toThrow();\n    });\n  });\n\n  describe(\"webinars\", () => {\n    it(\"returns parsed webinars\", async () => {\n      const result = await getSanityClient().webinars();\n      expect(result?.[0]?.slug).toBe(\n        allWebinarsFixture.allWebinar[0]?.slug.current\n      );\n      expect(result?.[1]?.slug).toBe(\n        allWebinarsFixture.allWebinar[1]?.slug.current\n      );\n    });\n\n    it(\"throws when a webinar is invalid\", async () => {\n      mockSanityGraphqlApi.allWebinars.mockResolvedValueOnce(\n        {\n          allWebinar: [{ slug: \"foo\" }],\n        } as never /* silence error about incorrect slug type */\n      );\n\n      await expect(getSanityClient().webinars()).rejects.toThrow();\n    });\n  });\n\n  describe(\"client methods\", () => {\n    const client = getSanityClient();\n\n    /**\n     * Run the same draft/preview mode tests against each endpoint\n     * Using describe.each to cut down on LOC for testing each method\n     * 2x\n     *\n     * methodName: the name of the function on CMSClient\n     * mockMethodName: the name of a method on sanityGraphqlApi that's been mocked\n     *\n     * n.b. if some of these fail with an invalid reference error after\n     * re-generating fixtures, look for a `markDefs` array in the JSON with\n     * a `_type: \"reference\"` and delete the markDef and associated ID above it `\"marks\": [\"5ba56aeccae2\"]`\n     *\n     * This is because there's only one fixture file for `portableTextReferences`\n     * shared between all files that depend on it\n     */\n    const singletonMethods = [\n      [\"homepage\", \"homepage\"],\n      [\"planningPage\", \"planningCorePage\"],\n      [\"aboutWhoWeArePage\", \"aboutWhoWeArePage\"],\n      [\"aboutLeadershipPage\", \"aboutLeadershipPage\"],\n      [\"aboutBoardPage\", \"aboutBoardPage\"],\n      [\"aboutPartnersPage\", \"aboutPartnersPage\"],\n      [\"aboutWorkWithUsPage\", \"aboutWorkWithUsPage\"],\n      [\"curriculumPage\", \"curriculumCorePage\"],\n      [\"contactPage\", \"contactCorePage\"],\n      [\"blogListingPage\", \"newsListingPage\"],\n    ] as const;\n\n    const listMethods = [\n      [\"webinars\", \"allWebinars\"],\n      [\"blogPosts\", \"allBlogPosts\"],\n      [\"policyPages\", \"allPolicyPages\"],\n      [\"landingPages\", \"allLandingPages\"],\n    ] as const;\n\n    const bySlugMethods = [\n      [\"webinarBySlug\", \"webinarBySlug\"],\n      [\"blogPostBySlug\", \"blogPostBySlug\"],\n      [\"policyPageBySlug\", \"policyPageBySlug\"],\n      [\"landingPageBySlug\", \"landingPageBySlug\"],\n    ] as const;\n\n    describe.each(singletonMethods)(`.%s()`, (methodName, mockMethodName) => {\n      const mockMethod = mockSanityGraphqlApi[mockMethodName];\n      const clientMethod = client[methodName];\n\n      it(\"returns null when no content is found\", async () => {\n        mockMethod.mockResolvedValueOnce({} as never);\n        const res = await clientMethod();\n        expect(res).toBeNull();\n      });\n\n      it(\"attempts to resolve embedded portable text references\", async () => {\n        await clientMethod();\n\n        expect(resolveSanityReferences).toBeCalled();\n      });\n\n      it(\"does not fetch draft content by default\", async () => {\n        await clientMethod();\n        expect(mockMethod).toBeCalledWith(\n          expect.objectContaining({ isDraftFilter: { is_draft: false } })\n        );\n      });\n\n      it(\"fetches draft content when previewMode flag is passed\", async () => {\n        await clientMethod({ previewMode: true });\n\n        expect(mockMethod).toBeCalledWith(\n          expect.objectContaining({ isDraftFilter: { is_draft: undefined } })\n        );\n      });\n\n      it(\"passes previewMode flag to parseResults when false\", async () => {\n        await clientMethod();\n\n        expect(parseResults).toBeCalledWith(\n          expect.anything(),\n          expect.anything(),\n          /* isPreviewMode: */ undefined\n        );\n      });\n\n      it(\"passes previewMode flag to parseResults when true\", async () => {\n        await clientMethod({ previewMode: true });\n\n        expect(parseResults).toBeCalledWith(\n          expect.anything(),\n          expect.anything(),\n          /* isPreviewMode: */ true\n        );\n      });\n    });\n\n    describe.each(listMethods)(`.%s()`, (methodName, mockMethodName) => {\n      const mockMethod = mockSanityGraphqlApi[mockMethodName];\n      const clientMethod = client[methodName];\n\n      it(\"returns an empty array when no content is found\", async () => {\n        mockMethod.mockResolvedValueOnce({} as never);\n        const res = await clientMethod();\n        expect(res).toEqual([]);\n      });\n\n      it(\"does not fetch draft content by default\", async () => {\n        await clientMethod();\n        expect(mockMethod).toBeCalledWith(\n          expect.objectContaining({ isDraftFilter: { is_draft: false } })\n        );\n      });\n\n      it(\"fetches draft content when previewMode flag is passed\", async () => {\n        await clientMethod({ previewMode: true });\n\n        expect(mockMethod).toBeCalledWith(\n          expect.objectContaining({ isDraftFilter: { is_draft: undefined } })\n        );\n      });\n\n      it(\"passes previewMode flag to parseResults when false\", async () => {\n        await clientMethod();\n\n        expect(parseResults).toBeCalledWith(\n          expect.anything(),\n          expect.anything(),\n          /* isPreviewMode: */ undefined\n        );\n      });\n\n      it(\"passes previewMode flag to parseResults when true\", async () => {\n        await clientMethod({ previewMode: true });\n\n        expect(parseResults).toBeCalledWith(\n          expect.anything(),\n          expect.anything(),\n          /* isPreviewMode: */ true\n        );\n      });\n    });\n\n    describe.each(bySlugMethods)(`.%s()`, (methodName, mockMethodName) => {\n      const mockMethod = mockSanityGraphqlApi[mockMethodName];\n      const clientMethod = client[methodName];\n\n      it(\"returns null when no content is found\", async () => {\n        mockMethod.mockResolvedValueOnce({} as never);\n        const res = await clientMethod(\"some-slug\");\n        expect(res).toBeNull();\n      });\n\n      it(\"attempts to resolve embedded portable text references\", async () => {\n        await clientMethod(\"some-slug\");\n\n        expect(resolveSanityReferences).toBeCalled();\n      });\n\n      it(\"does not fetch draft content by default\", async () => {\n        await clientMethod(\"some-slug\");\n        expect(mockMethod).toBeCalledWith(\n          expect.objectContaining({ isDraftFilter: { is_draft: false } })\n        );\n      });\n\n      it(\"fetches draft content when previewMode flag is passed\", async () => {\n        await clientMethod(\"some-slug\", { previewMode: true });\n\n        expect(mockMethod).toBeCalledWith(\n          expect.objectContaining({ isDraftFilter: { is_draft: undefined } })\n        );\n      });\n\n      it(\"passes previewMode flag to parseResults when false\", async () => {\n        await clientMethod(\"some-slug\");\n\n        expect(parseResults).toBeCalledWith(\n          expect.anything(),\n          expect.anything(),\n          /* isPreviewMode: */ undefined\n        );\n      });\n\n      it(\"passes previewMode flag to parseResults when true\", async () => {\n        await clientMethod(\"some-slug\", { previewMode: true });\n\n        expect(parseResults).toBeCalledWith(\n          expect.anything(),\n          expect.anything(),\n          /* isPreviewMode: */ true\n        );\n      });\n    });\n  });\n\n  describe(\"landingPageBySlug\", () => {\n    it(\"fetches the specified landing page\", async () => {\n      await getSanityClient().landingPageBySlug(\"some-landing-page\");\n\n      expect(sanityGraphqlApi.landingPageBySlug).toBeCalledWith(\n        expect.objectContaining({ slug: \"some-landing-page\" })\n      );\n    });\n\n    it(\"returns a parsed landing page\", async () => {\n      const result = await getSanityClient().landingPageBySlug(\n        \"some-landing-page\"\n      );\n\n      expect(result?.slug).toBe(\n        landingPageBySlugFixture.allLandingPage[0]?.slug.current\n      );\n    });\n\n    it(\"throws when a landing page is invalid\", async () => {\n      mockSanityGraphqlApi.landingPageBySlug.mockResolvedValueOnce(\n        {\n          allLandingPage: [{ slug: \"foo\" }],\n        } as never /* silence error about incorrect slug type */\n      );\n\n      await expect(\n        getSanityClient().landingPageBySlug(\"some-landing-page\")\n      ).rejects.toThrow();\n    });\n  });\n\n  describe(\"landingPages\", () => {\n    it(\"returns parsed landing pages\", async () => {\n      const result = await getSanityClient().landingPages();\n\n      expect(result?.[0]?.slug).toBe(\n        landingPageBySlugFixture.allLandingPage[0]?.slug.current\n      );\n    });\n\n    it(\"throws when a landing page is invalid\", async () => {\n      mockSanityGraphqlApi.allLandingPages.mockResolvedValueOnce(\n        {\n          allLandingPage: [{ slug: \"foo\" }],\n        } as never /* silence error about incorrect slug type */\n      );\n\n      await expect(getSanityClient().landingPages()).rejects.toThrow();\n    });\n  });\n\n  describe(\"videoSchema\", () => {\n    it(\"transforms an undefined thumbnail to null\", async () => {\n      // Serializing `undefined` from getStaticProps causes nextjs errors\n      // so explicitly cast it to null\n      type video = z.infer<typeof videoSchema>;\n      const passResult = videoSchema.safeParse(testVideo) as { data: video };\n      expect(passResult.data.video.asset.thumbTime).toBeNull();\n    });\n  });\n});\n\n// Silence module error\nexport {};\n"
    },
    "src/components/Forms/NewsletterForm/NewsletterForm.test.tsx": {
      "tests": [
        {
          "id": "115",
          "name": "NewsletterForm user can fill out and submit form with keyboard",
          "location": {
            "start": {
              "column": 4,
              "line": 19
            }
          }
        },
        {
          "id": "116",
          "name": "NewsletterForm should display error hint on blur if no name is entered",
          "location": {
            "start": {
              "column": 4,
              "line": 56
            }
          }
        },
        {
          "id": "117",
          "name": "NewsletterForm should display error hint on blur if name more than 60 chars",
          "location": {
            "start": {
              "column": 4,
              "line": 72
            }
          }
        },
        {
          "id": "118",
          "name": "NewsletterForm should display error hint on blur if no email is entered",
          "location": {
            "start": {
              "column": 4,
              "line": 91
            }
          }
        },
        {
          "id": "119",
          "name": "NewsletterForm should display error hint on blur email not formatted correctly",
          "location": {
            "start": {
              "column": 4,
              "line": 107
            }
          }
        },
        {
          "id": "120",
          "name": "NewsletterForm should display all error hints on submit",
          "location": {
            "start": {
              "column": 4,
              "line": 124
            }
          }
        },
        {
          "id": "121",
          "name": "NewsletterForm onSubmit() should not be called if form invalid",
          "location": {
            "start": {
              "column": 4,
              "line": 142
            }
          }
        },
        {
          "id": "122",
          "name": "NewsletterForm should display correct message if OakError thrown from onSubmit()",
          "location": {
            "start": {
              "column": 4,
              "line": 153
            }
          }
        },
        {
          "id": "123",
          "name": "NewsletterForm should display default message if no OakError",
          "location": {
            "start": {
              "column": 4,
              "line": 176
            }
          }
        }
      ],
      "source": "import userEvent from \"@testing-library/user-event\";\nimport { computeAccessibleDescription } from \"dom-accessibility-api\";\n\nimport renderWithProviders from \"../../../__tests__/__helpers__/renderWithProviders\";\nimport OakError from \"../../../errors/OakError\";\nimport waitForNextTick from \"../../../__tests__/__helpers__/waitForNextTick\";\n\nimport NewsletterForm from \"./NewsletterForm\";\nimport NewsletterFormWrap from \"./NewsletterFormWrap\";\n\njest.setTimeout(10000);\n\nconst onSubmit = jest.fn();\n\ndescribe(\"NewsletterForm\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  test(\"user can fill out and submit form with keyboard\", async () => {\n    renderWithProviders(\n      <NewsletterFormWrap onSubmit={onSubmit} anchorTargetId=\"email-sign-up\" />\n    );\n\n    const user = userEvent.setup();\n    await user.tab();\n    // tab -> privacy policy link\n    await user.tab();\n    // tab -> name\n    await user.keyboard(\"a name\");\n    await user.tab();\n    await user.keyboard(\"email@example.com\");\n    // tab => dropdown select\n    await user.tab();\n    // open dropdown select\n    await user.keyboard(\"{Enter}\");\n    await user.keyboard(\"{arrowdown}\");\n    await user.keyboard(\"{arrowdown}\");\n    // confirm select value\n    await user.keyboard(\"{Enter}\");\n\n    // hack to wait for dropdown to close\n    await waitForNextTick();\n\n    await user.tab();\n    await user.keyboard(\"{Enter}\");\n\n    // Hack\n    await waitForNextTick(100);\n\n    expect(onSubmit).toHaveBeenCalledWith({\n      name: \"a name\",\n      email: \"email@example.com\",\n      userRole: \"Student\",\n    });\n  });\n  test(\"should display error hint on blur if no name is entered\", async () => {\n    const { getByPlaceholderText } = renderWithProviders(\n      <NewsletterForm descriptionId=\"id1\" id={\"1\"} onSubmit={onSubmit} />\n    );\n\n    const input = getByPlaceholderText(\"Anna Smith\");\n    const user = userEvent.setup();\n    await user.click(input);\n    await user.tab();\n\n    // HACK: wait for next tick\n    await waitForNextTick();\n\n    const description = computeAccessibleDescription(input);\n    expect(description).toBe(\"Name can't be empty\");\n  });\n  test(\"should display error hint on blur if name more than 60 chars\", async () => {\n    const { getByPlaceholderText } = renderWithProviders(\n      <NewsletterForm descriptionId=\"id1\" id={\"1\"} onSubmit={onSubmit} />\n    );\n\n    const input = getByPlaceholderText(\"Anna Smith\");\n    const user = userEvent.setup();\n    await user.click(input);\n    await user.keyboard(\n      \"iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\"\n    );\n    await user.tab();\n\n    // HACK: wait for next tick\n    await waitForNextTick();\n\n    const description = computeAccessibleDescription(input);\n    expect(description).toBe(\"Name must contain fewer than 60 charaters\");\n  });\n  test(\"should display error hint on blur if no email is entered\", async () => {\n    const { getByPlaceholderText } = renderWithProviders(\n      <NewsletterForm descriptionId=\"id1\" id={\"1\"} onSubmit={onSubmit} />\n    );\n\n    const input = getByPlaceholderText(\"anna@amail.com\");\n    const user = userEvent.setup();\n    await user.click(input);\n    await user.tab();\n\n    // HACK: wait for next tick\n    await waitForNextTick();\n\n    const description = computeAccessibleDescription(input);\n    expect(description).toBe(\"Email can't be empty\");\n  });\n  test(\"should display error hint on blur email not formatted correctly\", async () => {\n    const { getByPlaceholderText } = renderWithProviders(\n      <NewsletterForm descriptionId=\"id1\" id={\"1\"} onSubmit={onSubmit} />\n    );\n\n    const input = getByPlaceholderText(\"anna@amail.com\");\n    const user = userEvent.setup();\n    await user.click(input);\n    await user.keyboard(\"not an email\");\n    await user.tab();\n\n    // HACK: wait for next tick\n    await waitForNextTick();\n\n    const description = computeAccessibleDescription(input);\n    expect(description).toBe(\"Email not valid\");\n  });\n  test(\"should display all error hints on submit\", async () => {\n    const { getByRole, getByPlaceholderText } = renderWithProviders(\n      <NewsletterForm descriptionId=\"id1\" id={\"1\"} onSubmit={onSubmit} />\n    );\n\n    const input = getByPlaceholderText(\"Anna Smith\");\n    // initially error is not shown\n    expect(computeAccessibleDescription(input)).toBe(\"\");\n    const submit = getByRole(\"button\", { name: \"Sign up\" });\n    const user = userEvent.setup();\n    await user.click(submit);\n\n    // HACK: wait for next tick\n    await waitForNextTick();\n\n    // error is shown after form is submitted\n    expect(computeAccessibleDescription(input)).toBe(\"Name can't be empty\");\n  });\n  test(\"onSubmit() should not be called if form invalid\", async () => {\n    const { getByRole } = renderWithProviders(\n      <NewsletterForm descriptionId=\"id1\" id={\"1\"} onSubmit={onSubmit} />\n    );\n\n    const submit = getByRole(\"button\", { name: \"Sign up\" });\n    const user = userEvent.setup();\n    await user.click(submit);\n\n    expect(onSubmit).not.toHaveBeenCalled();\n  });\n  test(\"should display correct message if OakError thrown from onSubmit()\", async () => {\n    const onSubmit = () =>\n      Promise.reject(new OakError({ code: \"hubspot/invalid-email\" }));\n    const { getByRole, getByPlaceholderText } = renderWithProviders(\n      <NewsletterForm descriptionId=\"id1\" id={\"1\"} onSubmit={onSubmit} />\n    );\n\n    const user = userEvent.setup();\n    const name = getByPlaceholderText(\"Anna Smith\");\n    await user.type(name, \"joe bloggs\");\n    const email = getByPlaceholderText(\"anna@amail.com\");\n    await user.type(email, \"joebloggs@example.com\");\n    const submit = getByRole(\"button\", { name: \"Sign up\" });\n    await user.click(submit);\n\n    // HACK: wait for next tick\n    await waitForNextTick();\n\n    const error = getByRole(\"alert\");\n    expect(error).toHaveTextContent(\n      \"Thank you, that's been received, but please check as your email doesn't look quite right.\"\n    );\n  });\n  test(\"should display default message if no OakError\", async () => {\n    const onSubmit = () => Promise.reject();\n    const { getByRole, getByPlaceholderText } = renderWithProviders(\n      <NewsletterForm descriptionId=\"id1\" id={\"1\"} onSubmit={onSubmit} />\n    );\n\n    const user = userEvent.setup();\n    const name = getByPlaceholderText(\"Anna Smith\");\n    await user.type(name, \"joe bloggs\");\n    const email = getByPlaceholderText(\"anna@amail.com\");\n    await user.type(email, \"joebloggs@example.com\");\n    const submit = getByRole(\"button\", { name: \"Sign up\" });\n    await user.click(submit);\n\n    // HACK: wait for next tick\n    await waitForNextTick();\n\n    const error = getByRole(\"alert\");\n    expect(error).toHaveTextContent(\"An unknown error occurred\");\n  });\n});\n"
    },
    "src/__tests__/pages/webinars/[webinarSlug].test.tsx": {
      "tests": [
        {
          "id": "124",
          "name": "pages/webinar/[webinarSlug].tsx WebinarDetailPage Renders title from props ",
          "location": {
            "start": {
              "column": 6,
              "line": 93
            }
          }
        },
        {
          "id": "125",
          "name": "pages/webinar/[webinarSlug].tsx WebinarDetailPage calls tracking.webinarPageViewed once, with correct props",
          "location": {
            "start": {
              "column": 6,
              "line": 108
            }
          }
        },
        {
          "id": "126",
          "name": "pages/webinar/[webinarSlug].tsx WebinarDetailPage SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 8,
              "line": 125
            }
          }
        },
        {
          "id": "127",
          "name": "pages/webinar/[webinarSlug].tsx getStaticPaths Should return the paths of all webinars",
          "location": {
            "start": {
              "column": 6,
              "line": 153
            }
          }
        },
        {
          "id": "128",
          "name": "pages/webinar/[webinarSlug].tsx getStaticProps Should fetch the correct webinar",
          "location": {
            "start": {
              "column": 6,
              "line": 168
            }
          }
        },
        {
          "id": "129",
          "name": "pages/webinar/[webinarSlug].tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 182
            }
          }
        },
        {
          "id": "130",
          "name": "pages/webinar/[webinarSlug].tsx getStaticProps Should fetch draft content in preview mode",
          "location": {
            "start": {
              "column": 6,
              "line": 195
            }
          }
        },
        {
          "id": "131",
          "name": "pages/webinar/[webinarSlug].tsx getStaticProps Should format the webinar date",
          "location": {
            "start": {
              "column": 6,
              "line": 209
            }
          }
        },
        {
          "id": "132",
          "name": "pages/webinar/[webinarSlug].tsx getStaticProps should return notFound when a webinar is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 222
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport { Webinar } from \"../../../common-lib/cms-types\";\nimport WebinarDetailPage, {\n  SerializedWebinar,\n  WebinarPageProps,\n} from \"../../../pages/webinars/[webinarSlug]\";\nimport { mockSeoResult, mockVideoAsset } from \"../../__helpers__/cms\";\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\n\nconst webinarPageViewed = jest.fn();\njest.mock(\"../../../context/Analytics/useAnalytics\", () => ({\n  __esModule: true,\n  default: () => ({\n    track: {\n      webinarPageViewed: (...args: unknown[]) => webinarPageViewed(...args),\n    },\n  }),\n}));\n\nconst testWebinar: Webinar = {\n  title: \"An upcoming webinar\",\n  id: \"5\",\n  date: new Date(\"2025-01-01\"),\n  slug: \"an-upcoming-webinar\",\n  hosts: [\n    {\n      id: \"000\",\n      name: \"Hosty McHostFace\",\n      image: {\n        asset: {\n          _id: \"\",\n          url: \"\",\n        },\n      },\n    },\n  ],\n  category: { title: \"Some category\", slug: \"some-category\" },\n  summaryPortableText: [],\n  video: mockVideoAsset(),\n};\n\nconst testWebinar2: Webinar = {\n  title: \"A past webinar\",\n  id: \"6\",\n  date: new Date(\"2022-01-01\"),\n  slug: \"a-past-webinar\",\n  hosts: [\n    {\n      id: \"000\",\n      name: \"Hosty McHostFace\",\n      image: {\n        asset: {\n          _id: \"\",\n          url: \"\",\n        },\n      },\n    },\n  ],\n  category: { title: \"Some category\", slug: \"some-category\" },\n  summaryPortableText: [],\n  video: mockVideoAsset(),\n};\n\nconst testSerializedWebinar: SerializedWebinar = {\n  ...testWebinar,\n  date: new Date().toISOString(),\n  author: {\n    name: \"Joe Bloggs\",\n    role: \"Geographer Teacher\",\n    id: \"jbloggs\",\n  },\n};\n\nconst webinars = jest.fn(() => [testWebinar, testWebinar2]);\nconst webinarBySlug = jest.fn(() => testWebinar);\n\ndescribe(\"pages/webinar/[webinarSlug].tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../node-lib/cms\", () => ({\n      __esModule: true,\n      default: {\n        webinars: jest.fn(webinars),\n        webinarBySlug: jest.fn(webinarBySlug),\n      },\n    }));\n  });\n\n  describe(\"WebinarDetailPage\", () => {\n    it(\"Renders title from props \", async () => {\n      renderWithProviders(\n        <WebinarDetailPage\n          webinar={testSerializedWebinar}\n          categories={[{ title: \"Teaching\", slug: \"teaching\" }]}\n        />\n      );\n\n      await waitFor(() => {\n        expect(screen.getByRole(\"heading\", { level: 1 })).toHaveTextContent(\n          \"An upcoming webinar\"\n        );\n      });\n    });\n\n    it(\"calls tracking.webinarPageViewed once, with correct props\", () => {\n      renderWithProviders(\n        <WebinarDetailPage\n          webinar={testSerializedWebinar}\n          categories={[{ title: \"Teaching\", slug: \"teaching\" }]}\n        />\n      );\n\n      expect(webinarPageViewed).toHaveBeenCalledTimes(1);\n      expect(webinarPageViewed).toHaveBeenCalledWith({\n        videoAvailable: true,\n        webinarCategory: \"Some category\",\n        webinarTitle: \"An upcoming webinar\",\n      });\n    });\n\n    describe(\"SEO\", () => {\n      it(\"renders the correct SEO details\", async () => {\n        const { seo } = renderWithSeo(\n          <WebinarDetailPage\n            webinar={testSerializedWebinar}\n            categories={[{ title: \"Teaching\", slug: \"teaching\" }]}\n          />\n        );\n\n        expect(seo).toEqual({\n          ...mockSeoResult,\n          title: \"An upcoming webinar | NEXT_PUBLIC_SEO_APP_NAME\",\n          description: \"NEXT_PUBLIC_SEO_APP_DESCRIPTION\",\n          ogTitle: \"An upcoming webinar | NEXT_PUBLIC_SEO_APP_NAME\",\n          ogDescription: \"NEXT_PUBLIC_SEO_APP_DESCRIPTION\",\n          ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n          ogImage:\n            \"https://image.mux.com/5678/thumbnail.png?width=1600&height=900&fit_mode=smartcrop&time=1\",\n          ogImageAlt: undefined,\n          ogImageHeight: undefined,\n          ogImageWidth: undefined,\n          ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n          canonical: \"NEXT_PUBLIC_SEO_APP_URL\",\n        });\n      });\n    });\n  });\n\n  describe(\"getStaticPaths\", () => {\n    it(\"Should return the paths of all webinars\", async () => {\n      const { getStaticPaths } = await import(\n        \"../../../pages/webinars/[webinarSlug]\"\n      );\n\n      const pathsResult = await getStaticPaths({});\n\n      expect(pathsResult.paths).toEqual([\n        { params: { webinarSlug: \"an-upcoming-webinar\" } },\n        { params: { webinarSlug: \"a-past-webinar\" } },\n      ]);\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should fetch the correct webinar\", async () => {\n      const { getStaticProps } = await import(\n        \"../../../pages/webinars/[webinarSlug]\"\n      );\n      await getStaticProps({\n        params: { webinarSlug: \"an-upcoming-webinar\" },\n      });\n\n      expect(webinarBySlug).toHaveBeenCalledWith(\n        \"an-upcoming-webinar\",\n        expect.any(Object)\n      );\n    });\n\n    it(\"Should not fetch draft content by default\", async () => {\n      const { getStaticProps } = await import(\n        \"../../../pages/webinars/[webinarSlug]\"\n      );\n      await getStaticProps({\n        params: { webinarSlug: \"an-upcoming-webinar\" },\n      });\n\n      expect(webinarBySlug).toHaveBeenCalledWith(\"an-upcoming-webinar\", {\n        previewMode: false,\n      });\n    });\n\n    it(\"Should fetch draft content in preview mode\", async () => {\n      const { getStaticProps } = await import(\n        \"../../../pages/webinars/[webinarSlug]\"\n      );\n      await getStaticProps({\n        params: { webinarSlug: \"an-upcoming-webinar\" },\n        preview: true,\n      });\n\n      expect(webinarBySlug).toHaveBeenCalledWith(\"an-upcoming-webinar\", {\n        previewMode: true,\n      });\n    });\n\n    it(\"Should format the webinar date\", async () => {\n      const { getStaticProps } = await import(\n        \"../../../pages/webinars/[webinarSlug]\"\n      );\n      const propsResult = (await getStaticProps({\n        params: { webinarSlug: \"an-upcoming-webinar\" },\n      })) as { props: WebinarPageProps };\n\n      expect(propsResult?.props?.webinar).toMatchObject({\n        date: \"2025-01-01T00:00:00.000Z\",\n      });\n    });\n\n    it(\"should return notFound when a webinar is missing\", async () => {\n      webinarBySlug.mockResolvedValueOnce(null as never);\n\n      const { getStaticProps } = await import(\n        \"../../../pages/webinars/[webinarSlug]\"\n      );\n      const propsResult = (await getStaticProps({\n        params: { webinarSlug: \"an-upcoming-webinar\" },\n      })) as { props: WebinarPageProps };\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/index.test.tsx": {
      "tests": [
        {
          "id": "133",
          "name": "pages/index.tsx Renders correct title and summary",
          "location": {
            "start": {
              "column": 4,
              "line": 31
            }
          }
        },
        {
          "id": "134",
          "name": "pages/index.tsx Renders a link to the blog list",
          "location": {
            "start": {
              "column": 4,
              "line": 41
            }
          }
        },
        {
          "id": "135",
          "name": "pages/index.tsx Renders the provided blog posts",
          "location": {
            "start": {
              "column": 4,
              "line": 49
            }
          }
        },
        {
          "id": "136",
          "name": "pages/index.tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 90
            }
          }
        },
        {
          "id": "137",
          "name": "pages/index.tsx SEO renders the correct SEO details from the CMS",
          "location": {
            "start": {
              "column": 6,
              "line": 98
            }
          }
        },
        {
          "id": "138",
          "name": "pages/index.tsx getStaticProps Should return no more than 4 posts",
          "location": {
            "start": {
              "column": 6,
              "line": 141
            }
          }
        },
        {
          "id": "139",
          "name": "pages/index.tsx getStaticProps Should sort posts by date ascending",
          "location": {
            "start": {
              "column": 6,
              "line": 155
            }
          }
        },
        {
          "id": "140",
          "name": "pages/index.tsx getStaticProps Should filter out upcoming webinars",
          "location": {
            "start": {
              "column": 6,
              "line": 167
            }
          }
        },
        {
          "id": "141",
          "name": "pages/index.tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 179
            }
          }
        },
        {
          "id": "142",
          "name": "pages/index.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 190
            }
          }
        }
      ],
      "source": "import { getByRole, screen, within } from \"@testing-library/react\";\n\nimport Home, {\n  getStaticProps,\n  HomePageProps,\n  SerializedPost,\n} from \"../../pages\";\nimport CMSClient from \"../../node-lib/cms\";\nimport {\n  BlogPostPreview,\n  HomePage,\n  WebinarPreview,\n} from \"../../common-lib/cms-types\";\nimport renderWithProviders from \"../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../__helpers__/renderWithSeo\";\nimport { mockSeo, portableTextFromString } from \"../__helpers__/cms\";\n\njest.mock(\"../../node-lib/cms\");\n\nconst mockCMSClient = CMSClient as jest.MockedObject<typeof CMSClient>;\n\nconst pageData = {\n  id: \"homepage\",\n  heading: \"Oak\",\n  summaryPortableText: portableTextFromString(\"Here's the page summary\"),\n} as HomePage;\n\njest.mock(\"next/dist/client/router\", () => require(\"next-router-mock\"));\n\ndescribe(\"pages/index.tsx\", () => {\n  it(\"Renders correct title and summary\", () => {\n    renderWithProviders(<Home pageData={pageData} posts={[]} />);\n\n    const h1 = screen.getByRole(\"heading\", { level: 1 });\n    expect(h1).toHaveTextContent(\"Oak\");\n\n    const firstH2 = screen.getAllByRole(\"heading\", { level: 2 })[0];\n    expect(firstH2).toHaveTextContent(\"Here's the page summary\");\n  });\n\n  it(\"Renders a link to the blog list\", () => {\n    renderWithProviders(<Home pageData={pageData} posts={[]} />);\n\n    const blogLink = screen.getByText(\"All blogs\");\n    expect(blogLink).toBeInTheDocument();\n    expect(blogLink).toHaveAttribute(\"href\", \"/blog\");\n  });\n\n  it(\"Renders the provided blog posts\", async () => {\n    const mockPosts = [\n      {\n        id: \"1\",\n        type: \"blog-post\",\n        title: \"Some blog post\",\n        slug: \"some-blog-post\",\n        date: new Date(\"2021-12-01\").toISOString(),\n        category: { title: \"Some category\", slug: \"some-category\" },\n      },\n      {\n        id: \"2\",\n        type: \"blog-post\",\n        title: \"Some other post\",\n        slug: \"some-other-post\",\n        date: new Date(\"2021-12-01\").toISOString(),\n        category: { title: \"Some category\", slug: \"some-category\" },\n      },\n    ] as SerializedPost[];\n\n    renderWithProviders(<Home pageData={pageData} posts={mockPosts} />);\n\n    const list = screen\n      .getAllByRole(\"list\")\n      .find((list) => list.textContent?.includes(\"Some blog post\"));\n\n    expect(list).toBeInTheDocument();\n\n    const { getAllByRole } = within(list as HTMLElement);\n    const items = getAllByRole(\"listitem\");\n\n    expect(items).toHaveLength(2);\n\n    expect(\n      getByRole(items[0] as HTMLElement, \"link\", {\n        name: \"Some blog post\",\n      })\n    ).toHaveAttribute(\"href\", \"/blog/some-blog-post\");\n  });\n\n  describe.skip(\"SEO\", () => {\n    it(\"renders the correct SEO details\", () => {\n      const { seo } = renderWithSeo(\n        <Home pageData={{ ...pageData, seo: undefined }} posts={[]} />\n      );\n\n      expect(seo).toEqual({});\n    });\n\n    it(\"renders the correct SEO details from the CMS\", () => {\n      const { seo } = renderWithSeo(\n        <Home pageData={{ ...pageData, seo: mockSeo() }} posts={[]} />\n      );\n\n      expect(seo).toEqual({});\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    const mockPost = {\n      id: \"1\",\n      title: \"Some blog post\",\n      slug: \"some-blog-post\",\n      date: new Date(\"2022-12-01\"),\n      category: { title: \"Some category\", slug: \"some-category\" },\n    } as BlogPostPreview;\n\n    const mockPost2 = {\n      id: \"2\",\n      title: \"Some other post\",\n      slug: \"some-other-post\",\n      date: new Date(\"2022-12-01\"),\n      category: { title: \"Some category\", slug: \"some-category\" },\n    } as BlogPostPreview;\n\n    const mockPost3 = {\n      id: \"2\",\n      title: \"Some other post\",\n      slug: \"some-other-post\",\n      date: new Date(\"2022-12-01\"),\n      category: { title: \"Some category\", slug: \"some-category\" },\n    } as WebinarPreview;\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n      jest.resetModules();\n\n      mockCMSClient.homepage.mockResolvedValue(pageData);\n      mockCMSClient.blogPosts.mockResolvedValue([]);\n      mockCMSClient.webinars.mockResolvedValue([]);\n    });\n\n    it(\"Should return no more than 4 posts\", async () => {\n      mockCMSClient.blogPosts.mockResolvedValueOnce([\n        mockPost,\n        mockPost2,\n        mockPost,\n        mockPost2,\n        mockPost,\n        mockPost2,\n      ]);\n      const result = (await getStaticProps({})) as { props: HomePageProps };\n\n      expect(result.props?.posts).toHaveLength(4);\n    });\n\n    it(\"Should sort posts by date ascending\", async () => {\n      mockCMSClient.blogPosts.mockResolvedValueOnce([\n        { ...mockPost, id: \"2\", date: new Date(\"2022-01-01\") },\n        { ...mockPost, id: \"3\", date: new Date(\"2021-01-01\") },\n        { ...mockPost, id: \"1\", date: new Date(\"2023-01-01\") },\n      ]);\n      const result = (await getStaticProps({})) as { props: HomePageProps };\n\n      const postIds = result.props.posts.map((p) => p.id);\n      expect(postIds).toEqual([\"1\", \"2\", \"3\"]);\n    });\n\n    it(\"Should filter out upcoming webinars\", async () => {\n      mockCMSClient.webinars.mockResolvedValueOnce([\n        { ...mockPost3, id: \"2\", date: new Date(\"2022-01-01\") },\n        { ...mockPost3, id: \"3\", date: new Date(\"2021-01-01\") },\n        { ...mockPost3, id: \"1\", date: new Date(\"4023-01-01\") },\n      ]);\n      const result = (await getStaticProps({})) as { props: HomePageProps };\n\n      const postIds = result.props.posts.map((p) => p.id);\n      expect(postIds).toEqual([\"2\", \"3\"]);\n    });\n\n    it(\"Should not fetch draft content by default\", async () => {\n      mockCMSClient.blogPosts.mockResolvedValueOnce([mockPost]);\n      await getStaticProps({});\n\n      expect(mockCMSClient.blogPosts).toHaveBeenCalledWith(\n        expect.objectContaining({\n          previewMode: false,\n        })\n      );\n    });\n\n    it(\"should return notFound when the page data is missing\", async () => {\n      mockCMSClient.homepage.mockResolvedValueOnce(null);\n\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/webinars/index.test.tsx": {
      "tests": [
        {
          "id": "143",
          "name": "pages/webinar/index.tsx WebinarListingPage Renders a link to each webinar ",
          "location": {
            "start": {
              "column": 6,
              "line": 81
            }
          }
        },
        {
          "id": "144",
          "name": "pages/webinar/index.tsx WebinarListingPage SEO renders the correct SEO details from the CMS",
          "location": {
            "start": {
              "column": 8,
              "line": 105
            }
          }
        },
        {
          "id": "145",
          "name": "pages/webinar/index.tsx WebinarListingPage SEO renders the correct SEO fallbacks",
          "location": {
            "start": {
              "column": 8,
              "line": 134
            }
          }
        },
        {
          "id": "146",
          "name": "pages/webinar/index.tsx getStaticProps Should return the webinars from the CMS",
          "location": {
            "start": {
              "column": 6,
              "line": 165
            }
          }
        },
        {
          "id": "147",
          "name": "pages/webinar/index.tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 177
            }
          }
        },
        {
          "id": "148",
          "name": "pages/webinar/index.tsx getStaticProps Should fetch draft content in preview mode",
          "location": {
            "start": {
              "column": 6,
              "line": 185
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport { WebinarPreview } from \"../../../common-lib/cms-types\";\nimport {\n  SerializedWebinarPreview,\n  WebinarListingPageProps,\n} from \"../../../components/pages/WebinarsIndex.page\";\nimport WebinarListingPage from \"../../../pages/webinars\";\nimport { mockVideoAsset } from \"../../__helpers__/cms\";\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\n\nconst testPageData = {\n  id: \"123\",\n  title: \"page title\",\n  heading: \"page heading\",\n  summary: [],\n};\n\nconst testWebinarPreview: WebinarPreview = {\n  title: \"An upcoming webinar\",\n  id: \"5\",\n  slug: \"an-upcoming-webinar\",\n  date: new Date(\"2057-12-01\"),\n  category: { title: \"Some category\", slug: \"some-category\" },\n  summaryPortableText: [],\n  video: mockVideoAsset(),\n  hosts: [\n    {\n      id: \"1\",\n      name: \"name\",\n    },\n  ],\n};\n\nconst testSerializedWebinarPreview: SerializedWebinarPreview = {\n  ...testWebinarPreview,\n  date: testWebinarPreview.date.toISOString(),\n};\n\nconst testWebinarPreview2: WebinarPreview = {\n  title: \"A past webinar\",\n  id: \"6\",\n  slug: \"a-past-webinar\",\n  date: new Date(\"2021-12-31\"),\n  category: { title: \"Some category\", slug: \"some-category\" },\n  summaryPortableText: [],\n  video: mockVideoAsset(),\n  hosts: [\n    {\n      id: \"1\",\n      name: \"name\",\n    },\n  ],\n};\n\nconst testSerializedWebinarPreview2: SerializedWebinarPreview = {\n  ...testWebinarPreview2,\n  date: testWebinarPreview2.date.toISOString(),\n};\n\nconst webinars = jest.fn(() => [testWebinarPreview, testWebinarPreview2]);\nconst webinarsListingPage = jest.fn(() => testPageData);\n\njest.mock(\"next/dist/client/router\", () => require(\"next-router-mock\"));\n\ndescribe(\"pages/webinar/index.tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../node-lib/cms\", () => ({\n      __esModule: true,\n      default: {\n        webinars: webinars,\n        webinarsListingPage: webinarsListingPage,\n      },\n    }));\n  });\n\n  describe(\"WebinarListingPage\", () => {\n    it(\"Renders a link to each webinar \", () => {\n      renderWithProviders(\n        <WebinarListingPage\n          webinars={[\n            testSerializedWebinarPreview,\n            testSerializedWebinarPreview2,\n          ]}\n          pageData={testPageData}\n          categories={[]}\n          categorySlug={null}\n        />\n      );\n\n      expect(\n        screen.getByText(\"An upcoming webinar\").closest(\"a\")\n      ).toHaveAttribute(\"href\", \"/webinars/an-upcoming-webinar\");\n\n      expect(screen.getByText(\"A past webinar\").closest(\"a\")).toHaveAttribute(\n        \"href\",\n        \"/webinars/a-past-webinar\"\n      );\n    });\n\n    describe(\"SEO\", () => {\n      it(\"renders the correct SEO details from the CMS\", () => {\n        const { seo } = renderWithSeo(\n          <WebinarListingPage\n            webinars={[\n              testSerializedWebinarPreview,\n              testSerializedWebinarPreview2,\n            ]}\n            pageData={{\n              ...testPageData,\n              seo: {\n                title: \"Webinars SEO title\",\n                description: \"Webinars SEO description\",\n                canonicalURL: \"https://example.com/webinars\",\n              },\n            }}\n            categories={[]}\n            categorySlug={null}\n          />\n        );\n\n        expect(seo).toMatchObject({\n          title: \"Webinars SEO title | NEXT_PUBLIC_SEO_APP_NAME\",\n          ogTitle: \"Webinars SEO title | NEXT_PUBLIC_SEO_APP_NAME\",\n          description: \"Webinars SEO description\",\n          ogDescription: \"Webinars SEO description\",\n          canonical: \"https://example.com/webinars\",\n        });\n      });\n\n      it(\"renders the correct SEO fallbacks\", () => {\n        const { seo } = renderWithSeo(\n          <WebinarListingPage\n            webinars={[\n              testSerializedWebinarPreview,\n              testSerializedWebinarPreview2,\n            ]}\n            pageData={testPageData}\n            categories={[]}\n            categorySlug={null}\n          />\n        );\n\n        expect(seo).toMatchObject({\n          canonical: \"NEXT_PUBLIC_SEO_APP_URL\",\n          title: \"Webinars | NEXT_PUBLIC_SEO_APP_NAME\",\n          ogTitle: \"Webinars | NEXT_PUBLIC_SEO_APP_NAME\",\n          description:\n            \"Join us for one of our scheduled webinars aimed at helping teachers to get the most out of Oak.\",\n          ogDescription:\n            \"Join us for one of our scheduled webinars aimed at helping teachers to get the most out of Oak.\",\n          ogImage:\n            \"NEXT_PUBLIC_SEO_APP_URLNEXT_PUBLIC_SEO_APP_SOCIAL_SHARING_IMG?2022\",\n          ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n          ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n        });\n      });\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should return the webinars from the CMS\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/webinars\");\n\n      const propsResult = (await getStaticProps({})) as {\n        props: WebinarListingPageProps;\n      };\n      expect(propsResult?.props?.webinars).toEqual([\n        testSerializedWebinarPreview,\n        testSerializedWebinarPreview2,\n      ]);\n    });\n\n    it(\"Should not fetch draft content by default\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/webinars/index\");\n\n      await getStaticProps({});\n      expect(webinars).toHaveBeenCalledWith({ previewMode: false });\n      expect(webinarsListingPage).toHaveBeenCalledWith({ previewMode: false });\n    });\n\n    it(\"Should fetch draft content in preview mode\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/webinars/index\");\n      await getStaticProps({ preview: true });\n\n      expect(webinars).toHaveBeenCalledWith({ previewMode: true });\n      expect(webinarsListingPage).toHaveBeenCalledWith({ previewMode: true });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/blog/index.test.tsx": {
      "tests": [
        {
          "id": "149",
          "name": "pages/blog/index.tsx BlogListingPage Renders a link to each blog ",
          "location": {
            "start": {
              "column": 6,
              "line": 77
            }
          }
        },
        {
          "id": "150",
          "name": "pages/blog/index.tsx BlogListingPage SEO renders the correct SEO details from the CMS",
          "location": {
            "start": {
              "column": 8,
              "line": 99
            }
          }
        },
        {
          "id": "151",
          "name": "pages/blog/index.tsx BlogListingPage SEO renders the correct SEO fallbacks",
          "location": {
            "start": {
              "column": 8,
              "line": 125
            }
          }
        },
        {
          "id": "152",
          "name": "pages/blog/index.tsx getStaticProps Should return the blogs from the CMS",
          "location": {
            "start": {
              "column": 6,
              "line": 153
            }
          }
        },
        {
          "id": "153",
          "name": "pages/blog/index.tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 165
            }
          }
        },
        {
          "id": "154",
          "name": "pages/blog/index.tsx getStaticProps Should fetch draft content in preview mode",
          "location": {
            "start": {
              "column": 6,
              "line": 173
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport { BlogPostPreview } from \"../../../common-lib/cms-types\";\nimport {\n  SerializedBlogPostPreview,\n  BlogListingPageProps,\n} from \"../../../components/pages/BlogIndex.page\";\nimport BlogListingPage from \"../../../pages/blog\";\nimport { mockImageAsset } from \"../../__helpers__/cms\";\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\n\nconst testPageData = {\n  id: \"123\",\n  title: \"page title\",\n  heading: \"page heading\",\n  summary: [],\n};\n\nconst testBlogPreview: BlogPostPreview = {\n  title: \"A blog\",\n  id: \"5\",\n  slug: \"a-blog\",\n  date: new Date(\"2021-12-01\"),\n  category: { title: \"Some category\", slug: \"some-category\" },\n  summary: \"A blog summary\",\n  mainImage: mockImageAsset(),\n  author: {\n    id: \"1\",\n    name: \"name\",\n  },\n};\n\nconst testSerializedBlogPreview: SerializedBlogPostPreview = {\n  ...testBlogPreview,\n  date: testBlogPreview.date.toISOString(),\n};\n\nconst testBlogPreview2: BlogPostPreview = {\n  title: \"Another blog\",\n  id: \"6\",\n  slug: \"another-blog\",\n  date: new Date(\"2021-12-31\"),\n  category: { title: \"Some category\", slug: \"some-category\" },\n  summary: \"Another blog summary\",\n  mainImage: mockImageAsset(),\n  author: {\n    id: \"1\",\n    name: \"name\",\n  },\n};\n\nconst testSerializedBlogPreview2: SerializedBlogPostPreview = {\n  ...testBlogPreview2,\n  date: testBlogPreview2.date.toISOString(),\n};\n\nconst blogPosts = jest.fn(() => [testBlogPreview, testBlogPreview2]);\nconst blogListingPage = jest.fn(() => testPageData);\n\njest.mock(\"next/dist/client/router\", () => require(\"next-router-mock\"));\n\ndescribe(\"pages/blog/index.tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../node-lib/cms\", () => ({\n      __esModule: true,\n      default: {\n        blogPosts: blogPosts,\n        blogListingPage: blogListingPage,\n      },\n    }));\n  });\n\n  describe(\"BlogListingPage\", () => {\n    it(\"Renders a link to each blog \", () => {\n      renderWithProviders(\n        <BlogListingPage\n          blogs={[testSerializedBlogPreview, testSerializedBlogPreview2]}\n          pageData={testPageData}\n          categories={[]}\n          categorySlug={null}\n        />\n      );\n\n      expect(screen.getByText(\"A blog\").closest(\"a\")).toHaveAttribute(\n        \"href\",\n        \"/blog/a-blog\"\n      );\n\n      expect(screen.getByText(\"Another blog\").closest(\"a\")).toHaveAttribute(\n        \"href\",\n        \"/blog/another-blog\"\n      );\n    });\n\n    describe(\"SEO\", () => {\n      it(\"renders the correct SEO details from the CMS\", () => {\n        const { seo } = renderWithSeo(\n          <BlogListingPage\n            blogs={[testSerializedBlogPreview, testSerializedBlogPreview2]}\n            pageData={{\n              ...testPageData,\n              seo: {\n                title: \"Blog SEO title\",\n                description: \"Blog SEO description\",\n                canonicalURL: \"https://example.com/blog\",\n              },\n            }}\n            categories={[]}\n            categorySlug={null}\n          />\n        );\n\n        expect(seo).toMatchObject({\n          title: \"Blog SEO title | NEXT_PUBLIC_SEO_APP_NAME\",\n          ogTitle: \"Blog SEO title | NEXT_PUBLIC_SEO_APP_NAME\",\n          description: \"Blog SEO description\",\n          ogDescription: \"Blog SEO description\",\n          canonical: \"https://example.com/blog\",\n        });\n      });\n\n      it(\"renders the correct SEO fallbacks\", () => {\n        const { seo } = renderWithSeo(\n          <BlogListingPage\n            blogs={[testSerializedBlogPreview, testSerializedBlogPreview2]}\n            pageData={testPageData}\n            categories={[]}\n            categorySlug={null}\n          />\n        );\n\n        expect(seo).toMatchObject({\n          title: \"Latest Blogs & Insights | NEXT_PUBLIC_SEO_APP_NAME\",\n          ogTitle: \"Latest Blogs & Insights | NEXT_PUBLIC_SEO_APP_NAME\",\n          canonical: \"NEXT_PUBLIC_SEO_APP_URL\",\n          description:\n            \"Keep up to date with our latest blog posts, filled with insights, news and updates from Oak National Academy.\",\n          ogDescription:\n            \"Keep up to date with our latest blog posts, filled with insights, news and updates from Oak National Academy.\",\n          ogImage:\n            \"NEXT_PUBLIC_SEO_APP_URLNEXT_PUBLIC_SEO_APP_SOCIAL_SHARING_IMG?2022\",\n          ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n          ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n        });\n      });\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should return the blogs from the CMS\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/blog\");\n\n      const propsResult = (await getStaticProps({})) as {\n        props: BlogListingPageProps;\n      };\n      expect(propsResult?.props?.blogs).toEqual([\n        testSerializedBlogPreview,\n        testSerializedBlogPreview2,\n      ]);\n    });\n\n    it(\"Should not fetch draft content by default\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/blog\");\n\n      await getStaticProps({});\n      expect(blogPosts).toHaveBeenCalledWith({ previewMode: false });\n      expect(blogListingPage).toHaveBeenCalledWith({ previewMode: false });\n    });\n\n    it(\"Should fetch draft content in preview mode\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/blog\");\n      await getStaticProps({ preview: true });\n\n      expect(blogPosts).toHaveBeenCalledWith({ previewMode: true });\n      expect(blogListingPage).toHaveBeenCalledWith({ previewMode: true });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/about-us/work-with-us.test.tsx": {
      "tests": [
        {
          "id": "155",
          "name": "pages/about-us/work-with-us.tsx Renders correct title ",
          "location": {
            "start": {
              "column": 4,
              "line": 122
            }
          }
        },
        {
          "id": "156",
          "name": "pages/about-us/work-with-us.tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 135
            }
          }
        },
        {
          "id": "157",
          "name": "pages/about-us/work-with-us.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 153
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\nimport CMSClient from \"../../../node-lib/cms\";\nimport { AboutWorkWithUsPage } from \"../../../common-lib/cms-types\";\nimport AboutWorkWithUs, {\n  getStaticProps,\n} from \"../../../pages/about-us/work-with-us\";\nimport { mockSeoResult } from \"../../__helpers__/cms\";\n\nimport { testAboutPageBaseData } from \"./about-us.fixtures\";\n\njest.mock(\"../../../node-lib/cms\");\n\nconst mockCMSClient = CMSClient as jest.MockedObject<typeof CMSClient>;\n\nexport const testAboutWorkWithUsPageData: AboutWorkWithUsPage = {\n  ...testAboutPageBaseData,\n  heading: \"Work with us\",\n  introPortableText: [\n    {\n      _key: \"24e20ee072ab\",\n      _type: \"block\",\n      children: [\n        {\n          _key: \"beefb74c12ee0\",\n          _type: \"span\",\n          marks: [],\n          text: \"We’re excited to be at the heart of this new national collaboration, but no one can do this alone. A team is required. So if you’re as excited as we are – brilliant. We want to hear from you. There’s lots of ways to get involved - find out more below.\",\n        },\n      ],\n      markDefs: [],\n      style: \"normal\",\n    },\n  ],\n  cards: {\n    joinTheTeam: {\n      title: \"Join the Oak team \",\n      bodyPortableText: [\n        {\n          _key: \"8230db06a2de\",\n          _type: \"block\",\n          children: [\n            {\n              _key: \"1654a5ff63560\",\n              _type: \"span\",\n              marks: [],\n              text: \"We're hiring! If you share our values, and want to help make a difference, then join one of our remote-based teams: Education, Operations, Product & Engineering and School Support\\n\",\n            },\n          ],\n          markDefs: [],\n          style: \"normal\",\n        },\n      ],\n      image: null,\n    },\n    advisory: {\n      title: \"Advisory Groups\",\n      bodyPortableText: [\n        {\n          _key: \"23a341ac20cd\",\n          _type: \"block\",\n          children: [\n            {\n              _key: \"e0be8b5862840\",\n              _type: \"span\",\n              marks: [],\n              text: \"We're looking for a diverse range of experts to assess the evidence, and agree rigorous quality standards, specific for each subject.\",\n            },\n          ],\n          markDefs: [],\n          style: \"normal\",\n        },\n      ],\n      image: null,\n    },\n    curriculumPartner: {\n      title: \"Become a Curriculum Partner\",\n      bodyPortableText: [\n        {\n          _key: \"b914c3fc016d\",\n          _type: \"block\",\n          children: [\n            {\n              _key: \"6e009e4fed9c0\",\n              _type: \"span\",\n              marks: [],\n              text: \"If you've got a great curriculum, we'll be selecting partners to work with us across 14 subjects areas: Primary and Secondary Maths, Science, English, History, Geography and Music. [hubspot form].\",\n            },\n          ],\n          markDefs: [],\n          style: \"normal\",\n        },\n      ],\n      image: null,\n    },\n    teacherResearch: {\n      title: \"Take part in teacher research\",\n      bodyPortableText: [\n        {\n          _key: \"d65ecf3e50f4\",\n          _type: \"block\",\n          children: [\n            {\n              _key: \"c1aabcae9b7b0\",\n              _type: \"span\",\n              marks: [],\n              text: \"Oak has always listened and responded to teachers; have your say by taking part in research with us, or by road-testing our resources in your school [hubspot form].\",\n            },\n          ],\n          markDefs: [],\n          style: \"normal\",\n        },\n      ],\n      image: null,\n    },\n  },\n};\n\ndescribe(\"pages/about-us/work-with-us.tsx\", () => {\n  it(\"Renders correct title \", async () => {\n    renderWithProviders(\n      <AboutWorkWithUs pageData={testAboutWorkWithUsPageData} />\n    );\n\n    await waitFor(() => {\n      expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n        \"About us\"\n      );\n    });\n  });\n\n  describe(\"SEO\", () => {\n    it(\"renders the correct SEO details\", async () => {\n      const { seo } = renderWithSeo(\n        <AboutWorkWithUs pageData={testAboutWorkWithUsPageData} />\n      );\n\n      expect(seo).toEqual({\n        ...mockSeoResult,\n        ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n        title: \"About Us | NEXT_PUBLIC_SEO_APP_NAME\",\n        description: \"We're doing the things that need to get done.\",\n        ogTitle: \"About Us | NEXT_PUBLIC_SEO_APP_NAME\",\n        ogDescription: \"We're doing the things that need to get done.\",\n        ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n      });\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"should return notFound when the page data is missing\", async () => {\n      mockCMSClient.aboutWorkWithUsPage.mockResolvedValueOnce(null);\n\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/blog/[blogSlug].test.tsx": {
      "tests": [
        {
          "id": "158",
          "name": "pages/blog/[blogSlug].tsx BlogDetailPage Renders title from props ",
          "location": {
            "start": {
              "column": 6,
              "line": 88
            }
          }
        },
        {
          "id": "159",
          "name": "pages/blog/[blogSlug].tsx BlogDetailPage SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 8,
              "line": 101
            }
          }
        },
        {
          "id": "160",
          "name": "pages/blog/[blogSlug].tsx getStaticPaths Should return the paths of all blogs",
          "location": {
            "start": {
              "column": 6,
              "line": 112
            }
          }
        },
        {
          "id": "161",
          "name": "pages/blog/[blogSlug].tsx getStaticProps Should fetch the correct blog",
          "location": {
            "start": {
              "column": 6,
              "line": 125
            }
          }
        },
        {
          "id": "162",
          "name": "pages/blog/[blogSlug].tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 137
            }
          }
        },
        {
          "id": "163",
          "name": "pages/blog/[blogSlug].tsx getStaticProps Should fetch draft content in preview mode",
          "location": {
            "start": {
              "column": 6,
              "line": 148
            }
          }
        },
        {
          "id": "164",
          "name": "pages/blog/[blogSlug].tsx getStaticProps Should format the blog date",
          "location": {
            "start": {
              "column": 6,
              "line": 160
            }
          }
        },
        {
          "id": "165",
          "name": "pages/blog/[blogSlug].tsx getStaticProps should return notFound when a blog post is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 171
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport { BlogPost } from \"../../../common-lib/cms-types\";\nimport BlogDetailPage, { BlogPageProps } from \"../../../pages/blog/[blogSlug]\";\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\n\njest.mock(\"posthog-js/react\", () => ({\n  useFeatureFlags: () => ({ enabled: {} }),\n}));\njest.mock(\"next/router\", () => ({\n  __esModule: true,\n  ...jest.requireActual(\"next/router\"),\n  useRouter: () => ({\n    ...jest.requireActual(\"next/router\").useRouter,\n    asPath: \"asPath test value\",\n  }),\n}));\njest.mock(\"next-sanity-image\", () => ({\n  __esModule: true,\n  useNextSanityImage: () => ({\n    src: \"www.example.com/img.png\",\n  }),\n}));\n\nconst testBlog: BlogPost = {\n  title: \"A blog\",\n  id: \"5\",\n  date: new Date(\"2025-01-01\"),\n  slug: \"a-blog\",\n  author: { id: \"000\", name: \"Author McAuthorFace\" },\n  mainImage: {\n    asset: {\n      _id: \"\",\n      url: \"\",\n    },\n  },\n  summary: \"Lorem ipsum\",\n  contentPortableText: [],\n  category: {\n    title: \"Lesson Plabning\",\n    slug: \"lesson-planning\",\n  },\n};\n\nconst testBlog2: BlogPost = {\n  title: \"Another blog\",\n  id: \"6\",\n  date: new Date(\"2022-01-01\"),\n  slug: \"another-blog\",\n  author: { id: \"000\", name: \"Author McAuthorFace\" },\n  mainImage: {\n    asset: {\n      _id: \"\",\n      url: \"\",\n    },\n  },\n  summary: \"Lorem ipsum\",\n  contentPortableText: [],\n  category: {\n    title: \"Lesson Plabning\",\n    slug: \"lesson-planning\",\n  },\n};\n\nconst testSerializedBlog = {\n  ...testBlog,\n  date: new Date().toISOString(),\n};\n\nconst blogPosts = jest.fn(() => [testBlog, testBlog2]);\nconst blogPostBySlug = jest.fn(() => testBlog);\n\ndescribe(\"pages/blog/[blogSlug].tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../node-lib/cms\", () => ({\n      __esModule: true,\n      default: {\n        blogPosts: jest.fn(blogPosts),\n        blogPostBySlug: jest.fn(blogPostBySlug),\n      },\n    }));\n  });\n\n  describe(\"BlogDetailPage\", () => {\n    it(\"Renders title from props \", async () => {\n      renderWithProviders(\n        <BlogDetailPage blog={testSerializedBlog} categories={[]} />\n      );\n\n      await waitFor(() => {\n        expect(screen.getByRole(\"heading\", { level: 1 })).toHaveTextContent(\n          \"A blog\"\n        );\n      });\n    });\n\n    describe.skip(\"SEO\", () => {\n      it(\"renders the correct SEO details\", async () => {\n        const { seo } = renderWithSeo(\n          <BlogDetailPage blog={testSerializedBlog} categories={[]} />\n        );\n\n        expect(seo).toEqual({});\n      });\n    });\n  });\n\n  describe(\"getStaticPaths\", () => {\n    it(\"Should return the paths of all blogs\", async () => {\n      const { getStaticPaths } = await import(\"../../../pages/blog/[blogSlug]\");\n\n      const pathsResult = await getStaticPaths({});\n\n      expect(pathsResult.paths).toEqual([\n        { params: { blogSlug: \"a-blog\" } },\n        { params: { blogSlug: \"another-blog\" } },\n      ]);\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should fetch the correct blog\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/blog/[blogSlug]\");\n      await getStaticProps({\n        params: { blogSlug: \"another-blog\" },\n      });\n\n      expect(blogPostBySlug).toHaveBeenCalledWith(\n        \"another-blog\",\n        expect.any(Object)\n      );\n    });\n\n    it(\"Should not fetch draft content by default\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/blog/[blogSlug]\");\n      await getStaticProps({\n        params: { blogSlug: \"another-blog\" },\n      });\n\n      expect(blogPostBySlug).toHaveBeenCalledWith(\"another-blog\", {\n        previewMode: false,\n      });\n    });\n\n    it(\"Should fetch draft content in preview mode\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/blog/[blogSlug]\");\n      await getStaticProps({\n        params: { blogSlug: \"another-blog\" },\n        preview: true,\n      });\n\n      expect(blogPostBySlug).toHaveBeenCalledWith(\"another-blog\", {\n        previewMode: true,\n      });\n    });\n\n    it(\"Should format the blog date\", async () => {\n      const { getStaticProps } = await import(\"../../../pages/blog/[blogSlug]\");\n      const propsResult = (await getStaticProps({\n        params: { blogSlug: \"another-blog\" },\n      })) as { props: BlogPageProps };\n\n      expect(propsResult?.props?.blog).toMatchObject({\n        date: \"2025-01-01T00:00:00.000Z\",\n      });\n    });\n\n    it(\"should return notFound when a blog post is missing\", async () => {\n      blogPostBySlug.mockResolvedValueOnce(null as never);\n\n      const { getStaticProps } = await import(\"../../../pages/blog/[blogSlug]\");\n      const propsResult = (await getStaticProps({\n        params: { blogSlug: \"another-blog\" },\n      })) as { props: BlogPageProps };\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/about-us/who-we-are.test.tsx": {
      "tests": [
        {
          "id": "166",
          "name": "pages/about/who-we-are.tsx Renders correct title ",
          "location": {
            "start": {
              "column": 4,
              "line": 118
            }
          }
        },
        {
          "id": "167",
          "name": "pages/about/who-we-are.tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 129
            }
          }
        },
        {
          "id": "168",
          "name": "pages/about/who-we-are.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 147
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport AboutWhoWeAre, {\n  getStaticProps,\n} from \"../../../pages/about-us/who-we-are\";\nimport CMSClient from \"../../../node-lib/cms\";\nimport { AboutWhoWeArePage } from \"../../../common-lib/cms-types\";\nimport { mockSeoResult, portableTextFromString } from \"../../__helpers__/cms\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\n\nimport { testAboutPageBaseData } from \"./about-us.fixtures\";\n\njest.mock(\"../../../node-lib/cms\");\n\nconst mockCMSClient = CMSClient as jest.MockedObject<typeof CMSClient>;\n\nconst testAboutWhoWeArePageData: AboutWhoWeArePage = {\n  ...testAboutPageBaseData,\n  heading: \"Who we are\",\n  intro: {\n    title: \"IGNORE THIS TITLE - Need to configure hidden fields\",\n    bodyPortableText: portableTextFromString(\"text\"),\n    cta: {\n      label: \"Blog about plans\",\n      linkType: \"internal\",\n      internal: {\n        id: \"0001\",\n        contentType: \"newsPost\",\n        slug: \"some-blog-post\",\n      },\n    },\n    alignMedia: \"left\",\n    mediaType: \"video\",\n    video: {\n      title: \"Some video from the library because it's the only one I can find\",\n      video: {\n        asset: {\n          assetId: \"ByqZ4KA9mLdyrtWnAvRMHbcQnNk2uUnf3NNdahrey5o\",\n          playbackId: \"5VfBnOXD87KnXMJrYNG6HtCIizY6q6thP5EjjqkU1kI\",\n          thumbTime: null,\n        },\n      },\n    },\n  },\n  timeline: {\n    from: {\n      title: \"From Here\",\n      bodyPortableText: portableTextFromString(\"text\"),\n      cta: {\n        label: \"Blog about plans\",\n        linkType: \"internal\",\n        internal: {\n          id: \"0002\",\n          contentType: \"newsPost\",\n          slug: \"some-blog-post\",\n        },\n      },\n    },\n    to: {\n      title: \"To Here\",\n      bodyPortableText: portableTextFromString(\"text\"),\n      cta: null,\n    },\n    beyond: {\n      title: \"And Beyond\",\n      bodyPortableText: portableTextFromString(\"text\"),\n      cta: {\n        label: \"blog about plans\",\n        linkType: \"internal\",\n        internal: {\n          id: \"0003\",\n          contentType: \"newsPost\",\n          slug: \"some-blog-post\",\n        },\n      },\n    },\n    cta: {\n      label: \"Blog about plans\",\n      linkType: \"internal\",\n      internal: {\n        id: \"0004\",\n        contentType: \"newsPost\",\n        slug: \"some-blog-post\",\n      },\n    },\n  },\n  principles: [\n    {\n      title: \"Independent\",\n      bodyPortableText: portableTextFromString(\"text\"),\n      cta: null,\n    },\n    {\n      title: \"Optional\",\n      bodyPortableText: portableTextFromString(\"text\"),\n      cta: null,\n    },\n    {\n      title: \"Adaptable\",\n      bodyPortableText: portableTextFromString(\"text\"),\n      cta: null,\n    },\n    {\n      title: \"Free\",\n      bodyPortableText: portableTextFromString(\"text\"),\n      cta: null,\n    },\n  ],\n};\n\ndescribe(\"pages/about/who-we-are.tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n  });\n\n  it(\"Renders correct title \", async () => {\n    renderWithProviders(<AboutWhoWeAre pageData={testAboutWhoWeArePageData} />);\n\n    await waitFor(() => {\n      expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n        \"About us\"\n      );\n    });\n  });\n\n  describe(\"SEO\", () => {\n    it(\"renders the correct SEO details\", async () => {\n      const { seo } = renderWithSeo(\n        <AboutWhoWeAre pageData={testAboutWhoWeArePageData} />\n      );\n\n      expect(seo).toEqual({\n        ...mockSeoResult,\n        ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n        title: \"About Us | NEXT_PUBLIC_SEO_APP_NAME\",\n        description: \"We're doing the things that need to get done.\",\n        ogTitle: \"About Us | NEXT_PUBLIC_SEO_APP_NAME\",\n        ogDescription: \"We're doing the things that need to get done.\",\n        ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n      });\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"should return notFound when the page data is missing\", async () => {\n      mockCMSClient.aboutWhoWeArePage.mockResolvedValueOnce(null);\n\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/components/ErrorBoundary/ErrorBoundary.test.tsx": {
      "tests": [
        {
          "id": "169",
          "name": "ErrorBoundary.tsx [bugsnag:enabled] should render children if no error",
          "location": {
            "start": {
              "column": 4,
              "line": 69
            }
          }
        },
        {
          "id": "170",
          "name": "ErrorBoundary.tsx [bugsnag:enabled] should render client error view in the case of an uncaught exception",
          "location": {
            "start": {
              "column": 4,
              "line": 78
            }
          }
        },
        {
          "id": "171",
          "name": "ErrorBoundary.tsx [bugsnag:enabled] should call reportError",
          "location": {
            "start": {
              "column": 9,
              "line": 89
            }
          }
        },
        {
          "id": "172",
          "name": "ErrorBoundary.tsx [bugsnag:disabled] should render children if no error",
          "location": {
            "start": {
              "column": 4,
              "line": 101
            }
          }
        },
        {
          "id": "173",
          "name": "ErrorBoundary.tsx [bugsnag:disabled] should render client error view in the case of an uncaught exception",
          "location": {
            "start": {
              "column": 4,
              "line": 110
            }
          }
        },
        {
          "id": "174",
          "name": "ErrorBoundary.tsx [bugsnag:disabled] should not call reportError",
          "location": {
            "start": {
              "column": 4,
              "line": 121
            }
          }
        },
        {
          "id": "175",
          "name": "ErrorBoundary.tsx contains a button with link to homepage",
          "location": {
            "start": {
              "column": 4,
              "line": 130
            }
          }
        }
      ],
      "source": "import Bugsnag from \"@bugsnag/js\";\nimport { render } from \"@testing-library/react\";\nimport { FC, useEffect } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport \"../../__tests__/__helpers__/LocalStorageMock\";\nimport CookieConsentProvider from \"../../browser-lib/cookie-consent/CookieConsentProvider\";\nimport theme from \"../../styles/theme\";\nimport noop from \"../../__tests__/__helpers__/noop\";\n\nimport ErrorBoundary from \".\";\n\nconst consoleLogSpy = jest.spyOn(console, \"log\");\nconst consoleErrorSpy = jest.spyOn(console, \"error\");\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst useRouter = jest.spyOn(require(\"next/router\"), \"useRouter\");\nuseRouter.mockReturnValue({\n  asPath: \"test asPath value\",\n});\n\nconst mockNotify = jest.fn(async (err, cb) => cb(event));\nBugsnag.notify = mockNotify;\n\nconst TantrumChild = () => {\n  useEffect(() => {\n    throw new Error(\"Where's my toys\");\n  }, []);\n\n  return <>Tantrum child</>;\n};\n\nconst WithStatisticsConsent: FC = (props) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CookieConsentProvider\n        {...props}\n        __testMockValue={{\n          showConsentManager: jest.fn(),\n          hasConsentedTo: () => \"enabled\",\n          hasConsentedToPolicy: () => \"enabled\",\n        }}\n      />\n    </ThemeProvider>\n  );\n};\nconst WithoutStatisticsConsent: FC = (props) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CookieConsentProvider\n        {...props}\n        __testMockValue={{\n          showConsentManager: jest.fn(),\n          hasConsentedTo: () => \"disabled\",\n          hasConsentedToPolicy: () => \"disabled\",\n        }}\n      />\n    </ThemeProvider>\n  );\n};\n\ndescribe(\"ErrorBoundary.tsx\", () => {\n  beforeEach(() => {\n    consoleErrorSpy.mockImplementation(noop);\n    consoleLogSpy.mockImplementation(noop);\n\n    window.localStorage.clear();\n  });\n  test(\"[bugsnag:enabled] should render children if no error\", () => {\n    const { getByTestId } = render(\n      <ErrorBoundary>\n        <div data-testid=\"child\">The app</div>\n      </ErrorBoundary>,\n      { wrapper: WithStatisticsConsent }\n    );\n    expect(getByTestId(\"child\")).toBeInTheDocument();\n  });\n  test(\"[bugsnag:enabled] should render client error view in the case of an uncaught exception\", () => {\n    const { getByRole } = render(\n      <ErrorBoundary>\n        <TantrumChild />\n      </ErrorBoundary>,\n      { wrapper: WithStatisticsConsent }\n    );\n    expect(getByRole(\"heading\", { level: 1 })).toHaveTextContent(\n      \"An error occurred\"\n    );\n  });\n  test.skip(\"[bugsnag:enabled] should call reportError\", () => {\n    /**\n     * @TODO fix this test\n     */\n    render(\n      <ErrorBoundary>\n        <TantrumChild />\n      </ErrorBoundary>,\n      { wrapper: WithStatisticsConsent }\n    );\n    expect(mockNotify).toHaveBeenCalled();\n  });\n  test(\"[bugsnag:disabled] should render children if no error\", () => {\n    const { getByTestId } = render(\n      <ErrorBoundary>\n        <div data-testid=\"child\">The app</div>\n      </ErrorBoundary>,\n      { wrapper: WithoutStatisticsConsent }\n    );\n    expect(getByTestId(\"child\")).toBeInTheDocument();\n  });\n  test(\"[bugsnag:disabled] should render client error view in the case of an uncaught exception\", () => {\n    const { getByRole } = render(\n      <ErrorBoundary>\n        <TantrumChild />\n      </ErrorBoundary>,\n      { wrapper: WithoutStatisticsConsent }\n    );\n    expect(getByRole(\"heading\", { level: 1 })).toHaveTextContent(\n      \"An error occurred\"\n    );\n  });\n  test(\"[bugsnag:disabled] should not call reportError\", () => {\n    render(\n      <ErrorBoundary>\n        <TantrumChild />\n      </ErrorBoundary>,\n      { wrapper: WithoutStatisticsConsent }\n    );\n    expect(mockNotify).not.toHaveBeenCalled();\n  });\n  it(\"contains a button with link to homepage\", () => {\n    const { getByTestId } = render(\n      <ErrorBoundary>\n        <TantrumChild />\n      </ErrorBoundary>,\n      { wrapper: WithoutStatisticsConsent }\n    );\n    expect(getByTestId(\"homeButton\").closest(\"a\")).toHaveAttribute(\"href\", \"/\");\n  });\n});\n"
    },
    "src/__tests__/pages/about-us/partners.test.tsx": {
      "tests": [
        {
          "id": "176",
          "name": "pages/about-us/board.tsx Renders correct title ",
          "location": {
            "start": {
              "column": 4,
              "line": 43
            }
          }
        },
        {
          "id": "177",
          "name": "pages/about-us/board.tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 52
            }
          }
        },
        {
          "id": "178",
          "name": "pages/about-us/board.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 70
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\nimport CMSClient from \"../../../node-lib/cms\";\nimport { AboutPartnersPage } from \"../../../common-lib/cms-types\";\nimport AboutPartners, {\n  getStaticProps,\n} from \"../../../pages/about-us/partners\";\nimport { mockSeoResult } from \"../../__helpers__/cms\";\n\nimport { testAboutPageBaseData } from \"./about-us.fixtures\";\n\njest.mock(\"../../../node-lib/cms\");\n\nconst mockCMSClient = CMSClient as jest.MockedObject<typeof CMSClient>;\n\nconst testPartnersPageData: AboutPartnersPage = {\n  ...testAboutPageBaseData,\n  heading: \"Partners\",\n  curriculumPartners: [],\n  techPartners: [],\n  title: \"About us\",\n  introPortableText: [\n    {\n      _key: \"fba015024518\",\n      _type: \"block\",\n      children: [\n        {\n          _key: \"e55d6209321d0\",\n          _type: \"span\",\n          marks: [],\n          text: \"Our interim board oversees all of Oak’s work. They provide strategic direction, enable us to deliver on our plans, scrutinise our work and safeguard our independence. The interim board will be in place whilst a permanent board is chosen through a public appointments process.\",\n        },\n      ],\n      markDefs: [],\n      style: \"normal\",\n    },\n  ],\n};\n\ndescribe(\"pages/about-us/board.tsx\", () => {\n  it(\"Renders correct title \", async () => {\n    renderWithProviders(<AboutPartners pageData={testPartnersPageData} />);\n\n    expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n      \"About us\"\n    );\n  });\n\n  describe(\"SEO\", () => {\n    it(\"renders the correct SEO details\", async () => {\n      const { seo } = renderWithSeo(\n        <AboutPartners pageData={testPartnersPageData} />\n      );\n\n      expect(seo).toEqual({\n        ...mockSeoResult,\n        ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n        title: \"About Us | NEXT_PUBLIC_SEO_APP_NAME\",\n        description: \"We're doing the things that need to get done.\",\n        ogTitle: \"About Us | NEXT_PUBLIC_SEO_APP_NAME\",\n        ogDescription: \"We're doing the things that need to get done.\",\n        ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n      });\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"should return notFound when the page data is missing\", async () => {\n      mockCMSClient.aboutPartnersPage.mockResolvedValueOnce(null);\n\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/legal/[policyPageSlug].test.tsx": {
      "tests": [
        {
          "id": "179",
          "name": "pages/legal/[policyPageSlug].tsx PolicyPage Renders title from props ",
          "location": {
            "start": {
              "column": 6,
              "line": 48
            }
          }
        },
        {
          "id": "180",
          "name": "pages/legal/[policyPageSlug].tsx PolicyPage Formats the last updated at date",
          "location": {
            "start": {
              "column": 6,
              "line": 58
            }
          }
        },
        {
          "id": "181",
          "name": "pages/legal/[policyPageSlug].tsx PolicyPage SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 8,
              "line": 68
            }
          }
        },
        {
          "id": "182",
          "name": "pages/legal/[policyPageSlug].tsx getStaticPaths Should return the paths of all policy pages",
          "location": {
            "start": {
              "column": 6,
              "line": 79
            }
          }
        },
        {
          "id": "183",
          "name": "pages/legal/[policyPageSlug].tsx getStaticProps Should fetch the correct policy page",
          "location": {
            "start": {
              "column": 6,
              "line": 94
            }
          }
        },
        {
          "id": "184",
          "name": "pages/legal/[policyPageSlug].tsx getStaticProps Should serialize the policy updated at date to an ISO date",
          "location": {
            "start": {
              "column": 6,
              "line": 106
            }
          }
        },
        {
          "id": "185",
          "name": "pages/legal/[policyPageSlug].tsx getStaticProps should return notFound when a policy page is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 119
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport Policies, {\n  PolicyPageProps,\n} from \"../../../pages/legal/[policyPageSlug]\";\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\nimport { PolicyPage } from \"../../../common-lib/cms-types\";\n\nconst testPolicyPage: PolicyPage = {\n  title: \"Privacy Policy\",\n  id: \"5\",\n  lastUpdatedAt: new Date(\"2022-12-01\"),\n  slug: \"privacy-policy\",\n  bodyPortableText: [],\n};\n\nconst testPolicyPage2: PolicyPage = {\n  title: \"Terms and conditions\",\n  id: \"6\",\n  lastUpdatedAt: new Date(\"2022-12-01\"),\n  slug: \"terms-and-conditions\",\n  bodyPortableText: [],\n};\n\nconst testSerializedPolicyPage = {\n  ...testPolicyPage,\n  lastUpdatedAt: testPolicyPage.lastUpdatedAt.toISOString(),\n};\n\nconst policyPages = jest.fn(() => [testPolicyPage, testPolicyPage2]);\nconst policyPageBySlug = jest.fn(() => testPolicyPage);\n\ndescribe(\"pages/legal/[policyPageSlug].tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../node-lib/cms\", () => ({\n      __esModule: true,\n      default: {\n        policyPages: jest.fn(policyPages),\n        policyPageBySlug: jest.fn(policyPageBySlug),\n      },\n    }));\n  });\n\n  describe(\"PolicyPage\", () => {\n    it(\"Renders title from props \", async () => {\n      renderWithProviders(<Policies policy={testSerializedPolicyPage} />);\n\n      await waitFor(() => {\n        expect(screen.getByRole(\"heading\", { level: 1 })).toHaveTextContent(\n          \"Privacy Policy\"\n        );\n      });\n    });\n\n    it(\"Formats the last updated at date\", async () => {\n      renderWithProviders(<Policies policy={testSerializedPolicyPage} />);\n\n      await waitFor(() => {\n        const dateElem = screen.getByText(/1 December 2022/);\n        expect(dateElem).toBeInTheDocument();\n      });\n    });\n\n    describe.skip(\"SEO\", () => {\n      it(\"renders the correct SEO details\", async () => {\n        const { seo } = renderWithSeo(\n          <Policies policy={testSerializedPolicyPage} />\n        );\n\n        expect(seo).toEqual({});\n      });\n    });\n  });\n\n  describe(\"getStaticPaths\", () => {\n    it(\"Should return the paths of all policy pages\", async () => {\n      const { getStaticPaths } = await import(\n        \"../../../pages/legal/[policyPageSlug]\"\n      );\n\n      const pathsResult = await getStaticPaths({});\n\n      expect(pathsResult.paths).toEqual([\n        { params: { policyPageSlug: \"privacy-policy\" } },\n        { params: { policyPageSlug: \"terms-and-conditions\" } },\n      ]);\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should fetch the correct policy page\", async () => {\n      const { getStaticProps } = await import(\n        \"../../../pages/legal/[policyPageSlug]\"\n      );\n      await getStaticProps({ params: { policyPageSlug: \"privacy-policy\" } });\n\n      expect(policyPageBySlug).toHaveBeenCalledWith(\n        \"privacy-policy\",\n        expect.anything()\n      );\n    });\n\n    it(\"Should serialize the policy updated at date to an ISO date\", async () => {\n      const { getStaticProps } = await import(\n        \"../../../pages/legal/[policyPageSlug]\"\n      );\n      const propsResult = (await getStaticProps({\n        params: { policyPageSlug: \"privacy-policy\" },\n      })) as { props: PolicyPageProps };\n\n      expect(propsResult?.props?.policy).toMatchObject({\n        lastUpdatedAt: \"2022-12-01T00:00:00.000Z\",\n      });\n    });\n\n    it(\"should return notFound when a policy page is missing\", async () => {\n      policyPageBySlug.mockResolvedValueOnce(null as never);\n\n      const { getStaticProps } = await import(\n        \"../../../pages/legal/[policyPageSlug]\"\n      );\n      const propsResult = (await getStaticProps({\n        params: { policyPageSlug: \"privacy-policy\" },\n      })) as { props: PolicyPageProps };\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/support-your-team.test.tsx": {
      "tests": [
        {
          "id": "186",
          "name": "pages/support-your-team.tsx Renders correct title ",
          "location": {
            "start": {
              "column": 4,
              "line": 74
            }
          }
        },
        {
          "id": "187",
          "name": "pages/support-your-team.tsx SEO renders the correct SEO details ",
          "location": {
            "start": {
              "column": 6,
              "line": 83
            }
          }
        },
        {
          "id": "188",
          "name": "pages/support-your-team.tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 103
            }
          }
        },
        {
          "id": "189",
          "name": "pages/support-your-team.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 114
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport renderWithProviders from \"../__helpers__/renderWithProviders\";\nimport {\n  mockSeo,\n  mockSeoResult,\n  portableTextFromString,\n} from \"../__helpers__/cms\";\nimport Support from \"../../pages/support-your-team\";\nimport renderWithSeo from \"../__helpers__/renderWithSeo\";\nimport { SupportPage } from \"../../common-lib/cms-types/supportPage\";\n\nconst testSupportPageData: SupportPage = {\n  id: \"01\",\n  title: \"Support title\",\n  heading: \"Support heading\",\n  summaryPortableText: portableTextFromString(\"Planning summary\"),\n  planning: {\n    bodyPortableText: portableTextFromString(\"block text\"),\n    title: \"title\",\n    cta: {\n      external: \"/\",\n      label: \"label\",\n      linkType: \"external\",\n    },\n  },\n  curriculum: {\n    bodyPortableText: portableTextFromString(\"block text\"),\n    title: \"title\",\n    cta: {\n      external: \"/\",\n      label: \"label\",\n      linkType: \"external\",\n    },\n  },\n  development: {\n    bodyPortableText: portableTextFromString(\"block text\"),\n    title: \"title\",\n    cta: {\n      external: \"/\",\n      label: \"label\",\n      linkType: \"external\",\n    },\n  },\n  cover: {\n    bodyPortableText: portableTextFromString(\"block text\"),\n    title: \"title\",\n    quote: {\n      text: \"quote\",\n    },\n  },\n\n  seo: mockSeo({\n    title: \"Support for Schools - Lesson Planning and Curriculum\",\n    description:\n      \"Our thousands of free curriculum resources help teachers in your school reduce lesson planning workload, build confidence in curriculum design, manage cover lessons and work for absent pupils. Find out more.\",\n  }),\n};\n\nconst getPageData = jest.fn(() => testSupportPageData);\n\ndescribe(\"pages/support-your-team.tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../src/node-lib/cms/\", () => ({\n      __esModule: true,\n      default: {\n        supportPage: jest.fn(getPageData),\n      },\n    }));\n  });\n\n  it(\"Renders correct title \", () => {\n    renderWithProviders(<Support pageData={testSupportPageData} />);\n\n    expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n      \"Support title\"\n    );\n  });\n\n  describe(\"SEO\", () => {\n    it(\"renders the correct SEO details \", async () => {\n      const { seo } = renderWithSeo(<Support pageData={testSupportPageData} />);\n\n      expect(seo).toEqual({\n        ...mockSeoResult,\n        ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n        title:\n          \"Support for Schools - Lesson Planning and Curriculum | NEXT_PUBLIC_SEO_APP_NAME\",\n        description:\n          \"Our thousands of free curriculum resources help teachers in your school reduce lesson planning workload, build confidence in curriculum design, manage cover lessons and work for absent pupils. Find out more.\",\n        ogTitle:\n          \"Support for Schools - Lesson Planning and Curriculum | NEXT_PUBLIC_SEO_APP_NAME\",\n        ogDescription:\n          \"Our thousands of free curriculum resources help teachers in your school reduce lesson planning workload, build confidence in curriculum design, manage cover lessons and work for absent pupils. Find out more.\",\n        ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n      });\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should not fetch draft content by default\", async () => {\n      const { getStaticProps } = await import(\"../../pages/support-your-team\");\n      await getStaticProps({\n        params: {},\n      });\n\n      expect(getPageData).toHaveBeenCalledWith({\n        previewMode: false,\n      });\n    });\n\n    it(\"should return notFound when the page data is missing\", async () => {\n      getPageData.mockResolvedValueOnce(null as never);\n\n      const { getStaticProps } = await import(\"../../pages/support-your-team\");\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/lesson-planning.test.tsx": {
      "tests": [
        {
          "id": "190",
          "name": "pages/lesson-planning.tsx Renders correct title ",
          "location": {
            "start": {
              "column": 4,
              "line": 93
            }
          }
        },
        {
          "id": "191",
          "name": "pages/lesson-planning.tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 104
            }
          }
        },
        {
          "id": "192",
          "name": "pages/lesson-planning.tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 114
            }
          }
        },
        {
          "id": "193",
          "name": "pages/lesson-planning.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 125
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport PlanALesson from \"../../pages/lesson-planning\";\nimport { PlanningPage } from \"../../common-lib/cms-types\";\nimport renderWithProviders from \"../__helpers__/renderWithProviders\";\nimport {\n  mockImageAsset,\n  mockSeo,\n  mockVideoAsset,\n  portableTextFromString,\n} from \"../__helpers__/cms\";\nimport renderWithSeo from \"../__helpers__/renderWithSeo\";\n\nconst testPlanningPageData: PlanningPage = {\n  id: \"01\",\n  title: \"Planning title\",\n  heading: \"Planning heading\",\n  summaryPortableText: portableTextFromString(\"Planning summary\"),\n  lessonElements: {\n    introQuiz: {\n      title: \"Intro quiz title\",\n      bodyPortableText: portableTextFromString(\"Intro quiz body\"),\n    },\n    video: {\n      title: \"Video title\",\n      bodyPortableText: portableTextFromString(\"Video body\"),\n    },\n    slides: {\n      title: \"Slides title\",\n      bodyPortableText: portableTextFromString(\"Slides body\"),\n    },\n    worksheet: {\n      title: \"Worksheet title\",\n      bodyPortableText: portableTextFromString(\"Worksheet body\"),\n    },\n    exitQuiz: {\n      title: \"Exit quiz title\",\n      bodyPortableText: portableTextFromString(\"Exit quiz body\"),\n    },\n  },\n  lessonElementsCTA: {\n    label: \"elements label\",\n    linkType: \"external\",\n    external: \"https://example.com\",\n  },\n  stepsHeading: \"steps\",\n  steps: [\n    {\n      title: \"step one\",\n      bodyPortableText: portableTextFromString(\"step one body\"),\n    },\n  ],\n  stepsCTA: {\n    label: \"Steps CTA\",\n    linkType: \"internal\",\n    internal: {\n      id: \"homepage\",\n      contentType: \"homepage\",\n    },\n  },\n  learnMoreHeading: \"learn more heading\",\n  learnMoreBlock1: {\n    title: \"learn more block 1\",\n    bodyPortableText: portableTextFromString(\"block 1 text\"),\n    alignMedia: \"left\",\n    mediaType: \"video\",\n    video: mockVideoAsset(),\n  },\n  learnMoreBlock2: {\n    title: \"learn more block 2\",\n    bodyPortableText: portableTextFromString(\"block 2 text\"),\n    alignMedia: \"left\",\n    mediaType: \"image\",\n    image: mockImageAsset(\"block2\"),\n  },\n  seo: mockSeo(),\n};\n\nconst getPageData = jest.fn(() => testPlanningPageData);\n\ndescribe(\"pages/lesson-planning.tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../src/node-lib/cms/\", () => ({\n      __esModule: true,\n      default: {\n        planningPage: jest.fn(getPageData),\n      },\n    }));\n  });\n\n  it(\"Renders correct title \", async () => {\n    renderWithProviders(<PlanALesson pageData={testPlanningPageData} />);\n\n    await waitFor(() => {\n      expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n        \"Planning title\"\n      );\n    });\n  });\n\n  describe.skip(\"SEO\", () => {\n    it(\"renders the correct SEO details\", async () => {\n      const { seo } = renderWithSeo(\n        <PlanALesson pageData={testPlanningPageData} />\n      );\n\n      expect(seo).toEqual({});\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should not fetch draft content by default\", async () => {\n      const { getStaticProps } = await import(\"../../pages/lesson-planning\");\n      await getStaticProps({\n        params: {},\n      });\n\n      expect(getPageData).toHaveBeenCalledWith({\n        previewMode: false,\n      });\n    });\n\n    it(\"should return notFound when the page data is missing\", async () => {\n      getPageData.mockResolvedValueOnce(null as never);\n\n      const { getStaticProps } = await import(\"../../pages/lesson-planning\");\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/develop-your-curriculum.test.tsx": {
      "tests": [
        {
          "id": "194",
          "name": "pages/develop-your-curriculum.tsx Renders correct title ",
          "location": {
            "start": {
              "column": 4,
              "line": 77
            }
          }
        },
        {
          "id": "195",
          "name": "pages/develop-your-curriculum.tsx renders the blog posts",
          "location": {
            "start": {
              "column": 4,
              "line": 85
            }
          }
        },
        {
          "id": "196",
          "name": "pages/develop-your-curriculum.tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 99
            }
          }
        },
        {
          "id": "197",
          "name": "pages/develop-your-curriculum.tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 109
            }
          }
        },
        {
          "id": "198",
          "name": "pages/develop-your-curriculum.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 122
            }
          }
        }
      ],
      "source": "import { screen, within } from \"@testing-library/react\";\n\nimport { BlogPostPreview, CurriculumPage } from \"../../common-lib/cms-types\";\nimport renderWithProviders from \"../__helpers__/renderWithProviders\";\nimport { mockSeo, portableTextFromString } from \"../__helpers__/cms\";\nimport Curriculum from \"../../pages/develop-your-curriculum\";\nimport renderWithSeo from \"../__helpers__/renderWithSeo\";\n\nconst testCurriculumPageData: CurriculumPage = {\n  id: \"01\",\n  title: \"Curriculum title\",\n  heading: \"Curriculum heading\",\n  summaryPortableText: portableTextFromString(\"Planning summary\"),\n  info: {\n    bodyPortableText: portableTextFromString(\"block text\"),\n    title: \"title\",\n    cta: {\n      external: \"/\",\n      label: \"label\",\n      linkType: \"external\",\n    },\n  },\n  gettingStarted: {\n    bodyPortableText: portableTextFromString(\"block text\"),\n    title: \"title\",\n    cta: {\n      external: \"/\",\n      label: \"label\",\n      linkType: \"external\",\n    },\n  },\n  elements: {\n    title: \"element title\",\n    posts: [\n      {\n        title: \"blog title\",\n        post: {\n          title: \"post title\",\n          slug: \"some-post\",\n        } as BlogPostPreview,\n      },\n      {\n        title: \"other blog title\",\n        post: {\n          title: \"other post title\",\n          slug: \"some-other-post\",\n        } as BlogPostPreview,\n      },\n    ],\n  },\n  ourApproach: {\n    bodyPortableText: portableTextFromString(\"block text\"),\n    title: \"title\",\n    cta: {\n      external: \"/\",\n      label: \"label\",\n      linkType: \"external\",\n    },\n  },\n  seo: mockSeo(),\n};\n\nconst getPageData = jest.fn(() => testCurriculumPageData);\n\ndescribe(\"pages/develop-your-curriculum.tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../src/node-lib/cms/\", () => ({\n      __esModule: true,\n      default: {\n        curriculumPage: jest.fn(getPageData),\n      },\n    }));\n  });\n\n  it(\"Renders correct title \", () => {\n    renderWithProviders(<Curriculum pageData={testCurriculumPageData} />);\n\n    expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n      \"Curriculum title\"\n    );\n  });\n\n  it(\"renders the blog posts\", async () => {\n    renderWithProviders(<Curriculum pageData={testCurriculumPageData} />);\n    const { posts } = testCurriculumPageData.elements;\n\n    const container = screen.getByTestId(\"elements-of-curriculum\");\n    const links = within(container).getAllByRole(\"link\");\n\n    expect(links).toHaveLength(posts.length);\n\n    expect(links[0]).toHaveAttribute(\"href\", \"/blog/some-post\");\n    expect(links[1]).toHaveAttribute(\"href\", \"/blog/some-other-post\");\n  });\n\n  describe.skip(\"SEO\", () => {\n    it(\"renders the correct SEO details\", async () => {\n      const { seo } = renderWithSeo(\n        <Curriculum pageData={testCurriculumPageData} />\n      );\n\n      expect(seo).toEqual({});\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should not fetch draft content by default\", async () => {\n      const { getStaticProps } = await import(\n        \"../../pages/develop-your-curriculum\"\n      );\n      await getStaticProps({\n        params: {},\n      });\n\n      expect(getPageData).toHaveBeenCalledWith({\n        previewMode: false,\n      });\n    });\n\n    it(\"should return notFound when the page data is missing\", async () => {\n      getPageData.mockResolvedValueOnce(null as never);\n\n      const { getStaticProps } = await import(\n        \"../../pages/develop-your-curriculum\"\n      );\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/components/Blog/BlogList/useBlogList.test.ts": {
      "tests": [
        {
          "id": "199",
          "name": "useBlogList.ts handles no posts",
          "location": {
            "start": {
              "column": 4,
              "line": 11
            }
          }
        },
        {
          "id": "200",
          "name": "useBlogList.ts handles only past posts",
          "location": {
            "start": {
              "column": 4,
              "line": 25
            }
          }
        },
        {
          "id": "201",
          "name": "useBlogList.ts handles single upcoming post",
          "location": {
            "start": {
              "column": 4,
              "line": 42
            }
          }
        },
        {
          "id": "202",
          "name": "useBlogList.ts handles multiple upcoming posts (returning the soonest)",
          "location": {
            "start": {
              "column": 4,
              "line": 64
            }
          }
        },
        {
          "id": "203",
          "name": "useBlogList.ts pagination: returns correct 'paginationProps'",
          "location": {
            "start": {
              "column": 4,
              "line": 88
            }
          }
        }
      ],
      "source": "import { renderHook } from \"@testing-library/react\";\n\nimport { mockWebinar } from \"../../../__tests__/pages/webinars/webinar.fixtures\";\nimport { webinarToBlogListItem } from \"../../pages/WebinarsIndex.page\";\n\nimport useBlogList from \"./useBlogList\";\n\njest.mock(\"next/dist/client/router\", () => require(\"next-router-mock\"));\n\ndescribe(\"useBlogList.ts\", () => {\n  test(\"handles no posts\", () => {\n    const { result } = renderHook(() => useBlogList({ items: [] }));\n    expect(result.current).toEqual({\n      currentPageItems: [],\n      paginationProps: {\n        pageSize: 4,\n        currentPage: 1,\n        totalPages: 0,\n        totalResults: 0,\n        nextPageUrlObject: { pathname: \"\", query: { page: \"2\" } },\n        prevPageUrlObject: { pathname: \"\" },\n      },\n    });\n  });\n  test(\"handles only past posts\", () => {\n    const pastPost = webinarToBlogListItem(mockWebinar());\n    const { result } = renderHook(() => useBlogList({ items: [pastPost] }));\n\n    expect(result.current).toEqual({\n      currentPageItems: [pastPost],\n      paginationProps: {\n        pageSize: 4,\n        currentPage: 1,\n        totalPages: 1,\n        totalResults: 1,\n        nextPageUrlObject: { pathname: \"\" },\n        prevPageUrlObject: { pathname: \"\" },\n        upcomingItem: undefined,\n      },\n    });\n  });\n  test(\"handles single upcoming post\", () => {\n    const upcomingPost = webinarToBlogListItem(\n      mockWebinar({ date: \"2052-04-14\" })\n    );\n    const pastPost = webinarToBlogListItem(mockWebinar());\n    const { result } = renderHook(() =>\n      useBlogList({ items: [pastPost, upcomingPost] })\n    );\n\n    expect(result.current).toEqual({\n      upcomingItem: upcomingPost,\n      currentPageItems: [pastPost],\n      paginationProps: {\n        pageSize: 4,\n        currentPage: 1,\n        totalPages: 1,\n        totalResults: 1,\n        nextPageUrlObject: { pathname: \"\" },\n        prevPageUrlObject: { pathname: \"\" },\n      },\n    });\n  });\n  test(\"handles multiple upcoming posts (returning the soonest)\", () => {\n    const firstUpcomingPost = webinarToBlogListItem(\n      mockWebinar({ date: \"2033-04-14\" })\n    );\n    const secondUpcomingPost = webinarToBlogListItem(\n      mockWebinar({ date: \"2052-04-14\" })\n    );\n    const pastPost = webinarToBlogListItem(mockWebinar());\n    const items = [secondUpcomingPost, firstUpcomingPost, pastPost];\n    const { result } = renderHook(() => useBlogList({ items }));\n\n    expect(result.current).toEqual({\n      upcomingItem: firstUpcomingPost,\n      currentPageItems: [pastPost],\n      paginationProps: {\n        pageSize: 4,\n        currentPage: 1,\n        totalPages: 1,\n        totalResults: 1,\n        nextPageUrlObject: { pathname: \"\" },\n        prevPageUrlObject: { pathname: \"\" },\n      },\n    });\n  });\n  test(\"pagination: returns correct 'paginationProps'\", () => {\n    const upcomingPost = webinarToBlogListItem(\n      mockWebinar({ date: \"2033-04-14\" })\n    );\n    const pastPosts = new Array(30)\n      .fill(null)\n      .map(() => webinarToBlogListItem(mockWebinar()));\n    const items = [upcomingPost, ...pastPosts];\n    const { result } = renderHook(() => useBlogList({ items }));\n\n    expect(result.current).toEqual({\n      upcomingItem: upcomingPost,\n      currentPageItems: pastPosts.slice(0, 4),\n      paginationProps: {\n        pageSize: 4,\n        currentPage: 1,\n        totalPages: 8,\n        totalResults: 30,\n        nextPageUrlObject: { pathname: \"\", query: { page: \"2\" } },\n        prevPageUrlObject: { pathname: \"\" },\n      },\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/lp/[landingPageSlug].test.tsx": {
      "tests": [
        {
          "id": "204",
          "name": "pages/lp/[landingPageSlug].tsx LandingPage Renders title from props ",
          "location": {
            "start": {
              "column": 6,
              "line": 68
            }
          }
        },
        {
          "id": "205",
          "name": "pages/lp/[landingPageSlug].tsx LandingPage SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 8,
              "line": 76
            }
          }
        },
        {
          "id": "206",
          "name": "pages/lp/[landingPageSlug].tsx getStaticPaths Should return the paths of all landing pages",
          "location": {
            "start": {
              "column": 6,
              "line": 87
            }
          }
        },
        {
          "id": "207",
          "name": "pages/lp/[landingPageSlug].tsx getStaticProps Should fetch the correct landing page",
          "location": {
            "start": {
              "column": 6,
              "line": 97
            }
          }
        },
        {
          "id": "208",
          "name": "pages/lp/[landingPageSlug].tsx getStaticProps should return notFound when a landing page is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 108
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport LandingPageTemplate, {\n  getStaticPaths,\n  getStaticProps,\n} from \"../../../pages/lp/[landingPageSlug]\";\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport CMSClient from \"../../../node-lib/cms\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\nimport { LandingPage } from \"../../../common-lib/cms-types/landingPage\";\nimport { mockImageAsset, portableTextFromString } from \"../../__helpers__/cms\";\n\njest.mock(\"../../../node-lib/cms\");\n\nconst mockCMSClient = CMSClient as jest.MockedObject<typeof CMSClient>;\n\nconst testLandingPage: LandingPage = {\n  id: \"5\",\n  slug: \"some-landing-page\",\n  hero: {\n    title: \"some-landing-page\",\n    heading: \"some-landing\",\n  },\n  content: [\n    {\n      type: \"LandingPageTextBlock\",\n      bodyPortableText: portableTextFromString(\"Contact summary\"),\n    },\n    {\n      type: \"LandingPageTextAndMediaBlock\",\n      textAndMedia: {\n        title: \"title\",\n        bodyPortableText: [],\n        alignMedia: \"left\",\n        mediaType: \"image\",\n        image: mockImageAsset(),\n      },\n    },\n    {\n      type: \"LandingPageQuoteBlock\",\n      quote: {\n        text: \"text\",\n        attribution: \"person mcpersonface\",\n      },\n    },\n    {\n      type: \"LandingPageFormBlock\",\n      bodyPortableText: [],\n      title: \"title\",\n      form: {\n        title: \"title of the form\",\n      },\n    },\n  ],\n  seo: null,\n};\njest.mock(\"next/dist/client/router\", () => require(\"next-router-mock\"));\ndescribe(\"pages/lp/[landingPageSlug].tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n\n    mockCMSClient.landingPages.mockResolvedValue([testLandingPage]);\n    mockCMSClient.landingPageBySlug.mockResolvedValue(testLandingPage);\n  });\n\n  describe(\"LandingPage\", () => {\n    it(\"Renders title from props \", async () => {\n      renderWithProviders(<LandingPageTemplate pageData={testLandingPage} />);\n      await waitFor(() => {\n        expect(screen.getByText(\"some-landing-page\")).toBeInTheDocument();\n      });\n    });\n\n    describe.skip(\"SEO\", () => {\n      it(\"renders the correct SEO details\", async () => {\n        const { seo } = renderWithSeo(\n          <LandingPageTemplate pageData={testLandingPage} />\n        );\n\n        expect(seo).toEqual({});\n      });\n    });\n  });\n\n  describe(\"getStaticPaths\", () => {\n    it(\"Should return the paths of all landing pages\", async () => {\n      const pathsResult = await getStaticPaths({});\n\n      expect(pathsResult.paths).toEqual([\n        { params: { landingPageSlug: \"some-landing-page\" } },\n      ]);\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should fetch the correct landing page\", async () => {\n      await getStaticProps({\n        params: { landingPageSlug: \"some-landing-page\" },\n      });\n\n      expect(mockCMSClient.landingPageBySlug).toHaveBeenCalledWith(\n        \"some-landing-page\",\n        expect.anything()\n      );\n    });\n\n    it(\"should return notFound when a landing page is missing\", async () => {\n      mockCMSClient.landingPageBySlug.mockResolvedValueOnce(null as never);\n\n      const propsResult = await getStaticProps({\n        params: { landingPageSlug: \"some-landing-page\" },\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/node-lib/cms/sanity-client/resolveSanityReferences.test.ts": {
      "tests": [
        {
          "id": "209",
          "name": "resolveReferences getAllPaths returns all paths to a match",
          "location": {
            "start": {
              "column": 6,
              "line": 17
            }
          }
        },
        {
          "id": "210",
          "name": "resolveReferences resolveReferences merges each _ref object with the result of the query",
          "location": {
            "start": {
              "column": 6,
              "line": 68
            }
          }
        },
        {
          "id": "211",
          "name": "resolveReferences resolveReferences calls api.portableTextReferences with each referenced ID",
          "location": {
            "start": {
              "column": 6,
              "line": 84
            }
          }
        },
        {
          "id": "212",
          "name": "resolveReferences resolveReferences throws an OakError with metadata when it can't match refs to responses",
          "location": {
            "start": {
              "column": 6,
              "line": 92
            }
          }
        }
      ],
      "source": "import OakError from \"../../../errors/OakError\";\nimport sanityGraphqlApi from \"../../sanity-graphql\";\n\nimport {\n  getAllPaths,\n  resolveSanityReferences,\n} from \"./resolveSanityReferences\";\n\njest.mock(\"../../sanity-graphql\");\n\nconst mockSanityGraphqlApi = sanityGraphqlApi as jest.MockedObject<\n  typeof sanityGraphqlApi\n>;\n\ndescribe(\"resolveReferences\", () => {\n  describe(\"getAllPaths\", () => {\n    it(\"returns all paths to a match\", () => {\n      const obj1 = {\n        foo: { bar: [{ baz: \"bing\" }, { baz: \"bing\" }] },\n      };\n\n      const matcher = (v: unknown) => (v as { baz: string })?.baz === \"bing\";\n\n      expect(getAllPaths(obj1, matcher)).toEqual([\n        [\"foo\", \"bar\", \"0\"],\n        [\"foo\", \"bar\", \"1\"],\n      ]);\n    });\n  });\n\n  describe(\"resolveReferences\", () => {\n    beforeEach(() => {\n      jest.clearAllMocks();\n      jest.resetModules();\n\n      mockSanityGraphqlApi.portableTextReferences.mockResolvedValue({\n        allDocument: [\n          {\n            contentType: \"newsPost\",\n            _type: \"newsPost\",\n            id: \"ref2\",\n            slug: { current: \"some-blog-post\" },\n          },\n          {\n            contentType: \"sanity.imageAsset\",\n            _type: \"sanity.imageAsset\",\n            id: \"ref1\",\n            _id: \"ref1\",\n            url: \"https://example.com/foo.png\",\n          },\n        ],\n      });\n    });\n\n    const mockObjWithReferences = {\n      foo: {\n        bar: {\n          post: { _type: \"reference\", _ref: \"ref1\", _key: \"001\" },\n        },\n      },\n      baz: [\n        {\n          image: { _type: \"reference\", _ref: \"ref2\" },\n        },\n      ],\n    };\n\n    it(\"merges each _ref object with the result of the query\", async () => {\n      const resolved = await resolveSanityReferences(mockObjWithReferences);\n      expect(resolved.foo.bar.post).toMatchObject({\n        contentType: \"sanity.imageAsset\",\n        id: \"ref1\",\n        url: \"https://example.com/foo.png\",\n        _key: \"001\",\n      });\n\n      expect(resolved?.baz?.[0]?.image).toMatchObject({\n        contentType: \"newsPost\",\n        id: \"ref2\",\n        slug: \"some-blog-post\",\n      });\n    });\n\n    it(\"calls api.portableTextReferences with each referenced ID\", async () => {\n      await resolveSanityReferences(mockObjWithReferences);\n\n      expect(sanityGraphqlApi.portableTextReferences).toBeCalledWith({\n        ids: [\"ref1\", \"ref2\"],\n      });\n    });\n\n    it(\"throws an OakError with metadata when it can't match refs to responses\", async () => {\n      const mockErrorCausingResponse = [\n        {\n          contentType: \"aboutCorePage\",\n          _type: \"aboutCorePage\",\n          id: \"wont-be-found\",\n        },\n      ];\n\n      mockSanityGraphqlApi.portableTextReferences.mockResolvedValue({\n        allDocument: mockErrorCausingResponse,\n      });\n\n      const capturedError = await resolveSanityReferences(\n        mockObjWithReferences\n      ).catch((err) => err);\n\n      await expect(\n        async () => await resolveSanityReferences(mockObjWithReferences)\n      ).rejects.toThrowError(\n        new OakError({ code: \"cms/invalid-reference-data\" })\n      );\n\n      expect(capturedError.meta).toEqual({\n        portableTextPath: [\"foo\", \"bar\", \"post\"],\n        portableTextRefId: \"ref1\",\n        queryResults: JSON.stringify(mockErrorCausingResponse),\n      });\n    });\n  });\n});\n"
    },
    "src/components/Blog/BlogPortableText/BlogPortableText.test.tsx": {
      "tests": [
        {
          "id": "213",
          "name": "components/BlogPortableText text and media renders an image",
          "location": {
            "start": {
              "column": 4,
              "line": 77
            }
          }
        },
        {
          "id": "214",
          "name": "components/BlogPortableText image with alt text has alt text",
          "location": {
            "start": {
              "column": 4,
              "line": 86
            }
          }
        },
        {
          "id": "215",
          "name": "components/BlogPortableText quote renders a quote",
          "location": {
            "start": {
              "column": 4,
              "line": 95
            }
          }
        },
        {
          "id": "216",
          "name": "components/BlogPortableText cta renders a button with a label",
          "location": {
            "start": {
              "column": 4,
              "line": 106
            }
          }
        },
        {
          "id": "217",
          "name": "components/BlogPortableText callout has styled background",
          "location": {
            "start": {
              "column": 4,
              "line": 115
            }
          }
        }
      ],
      "source": "import renderWithProviders from \"../../../__tests__/__helpers__/renderWithProviders\";\n\nimport BlogPortableText from \"./BlogPortableText\";\n\nconst textAndMedia = [\n  {\n    _key: \"9c579cd361f2\",\n    _type: \"textAndMedia\",\n    alignMedia: \"left\",\n    mediaType: \"image\",\n    title: \"text and media\",\n    body: [\n      {\n        _type: \"block\",\n        _key: \"af3f0b635ef1\",\n        style: \"normal\",\n        markDefs: [],\n        children: [\n          {\n            _type: \"span\",\n            _key: \"f44d2133da69\",\n            text: \"Text and media body text\",\n            marks: [],\n          },\n        ],\n      },\n    ],\n    cta: {\n      _type: \"cta\",\n      label: \"CTA\",\n      linkType: \"anchor\",\n      anchor: \"formBlock\",\n    },\n    image: {\n      _type: \"imageWithAltText\",\n      asset: {\n        _type: \"reference\",\n        _ref: \"image-e773e8cf5a40205daacef9f97a9a6d45101eb0ae-720x480-png\",\n      },\n      altText: \"image alt text\",\n    },\n  },\n];\n\nconst quote = [\n  {\n    _key: \"b9955be0a1c7\",\n    _type: \"quote\",\n    attribution: \"Professor Dylan Wiliam\",\n    role: \"Emeritus Professor of Educational Assessment, UCL\",\n    text: \"The best curricula generate at least 25% more learning than the worst, irrespective of teacher quality.\",\n  },\n];\n\nconst callout = {\n  _key: \"1de5bdd05892\",\n  _type: \"callout\",\n  body: [\n    {\n      _type: \"block\",\n      _key: \"889bbab67157\",\n      style: \"normal\",\n      markDefs: [],\n      children: [\n        {\n          _type: \"span\",\n          _key: \"9dd2c19278b1\",\n          text: \"I'm a callout out!\",\n          marks: [],\n        },\n      ],\n    },\n  ],\n};\n\ndescribe(\"components/BlogPortableText\", () => {\n  test(\"text and media renders an image\", () => {\n    const { getByAltText } = renderWithProviders(\n      <BlogPortableText portableText={textAndMedia} />\n    );\n\n    const imageAltText = getByAltText(\"image alt text\");\n\n    expect(imageAltText).toBeInTheDocument();\n  });\n  test(\"image with alt text has alt text\", () => {\n    const { getByAltText } = renderWithProviders(\n      <BlogPortableText portableText={[textAndMedia[0]?.image]} />\n    );\n\n    const imageAltText = getByAltText(\"image alt text\");\n\n    expect(imageAltText).toBeInTheDocument();\n  });\n  test(\"quote renders a quote\", () => {\n    const { getByText } = renderWithProviders(\n      <BlogPortableText portableText={quote} />\n    );\n\n    const quoteText = getByText(\n      \"“The best curricula generate at least 25% more learning than the worst, irrespective of teacher quality.”\"\n    );\n\n    expect(quoteText).toBeInTheDocument();\n  });\n  test(\"cta renders a button with a label\", () => {\n    const { getByText } = renderWithProviders(\n      <BlogPortableText portableText={[textAndMedia[0]?.cta]} />\n    );\n\n    const ctaLabel = getByText(\"CTA\");\n\n    expect(ctaLabel).toBeInTheDocument();\n  });\n  test(\"callout has styled background\", () => {\n    const { getByText } = renderWithProviders(\n      <BlogPortableText portableText={[callout]} />\n    );\n\n    const calloutText = getByText(\"I'm a callout out!\").closest(\"div\");\n\n    expect(calloutText).toHaveStyle(\"background-color: #f6e8a0\");\n  });\n});\n"
    },
    "src/node-lib/cms/sanity-client/parseResults.test.ts": {
      "tests": [
        {
          "id": "218",
          "name": "cms/sanity-client/parseResults uniqBy it filters a list to contain only unique items",
          "location": {
            "start": {
              "column": 6,
              "line": 7
            }
          }
        },
        {
          "id": "219",
          "name": "cms/sanity-client/parseResults uniqBy uses the getProp arg to discern uniqueness",
          "location": {
            "start": {
              "column": 6,
              "line": 24
            }
          }
        },
        {
          "id": "220",
          "name": "cms/sanity-client/parseResults uniqBy uses the onConflict arg to decide which to keep",
          "location": {
            "start": {
              "column": 6,
              "line": 34
            }
          }
        },
        {
          "id": "221",
          "name": "cms/sanity-client/parseResults parseResults parses data with the given schema",
          "location": {
            "start": {
              "column": 6,
              "line": 47
            }
          }
        },
        {
          "id": "222",
          "name": "cms/sanity-client/parseResults parseResults throws when invalid data is provided for schema",
          "location": {
            "start": {
              "column": 6,
              "line": 52
            }
          }
        },
        {
          "id": "223",
          "name": "cms/sanity-client/parseResults parseResults throws on invalid list items without isPreviewMode",
          "location": {
            "start": {
              "column": 6,
              "line": 60
            }
          }
        },
        {
          "id": "224",
          "name": "cms/sanity-client/parseResults parseResults filters invalid list items with isPreviewMode=true",
          "location": {
            "start": {
              "column": 6,
              "line": 68
            }
          }
        },
        {
          "id": "225",
          "name": "cms/sanity-client/parseResults parseResults filters non-draft content when matching draft content exists",
          "location": {
            "start": {
              "column": 6,
              "line": 74
            }
          }
        }
      ],
      "source": "import { z } from \"zod\";\n\nimport { parseResults, uniqBy } from \"./parseResults\";\n\ndescribe(\"cms/sanity-client/parseResults\", () => {\n  describe(\"uniqBy\", () => {\n    it(\"it filters a list to contain only unique items\", () => {\n      const filtered = uniqBy(\n        [1, 2, 3, 2],\n        (x) => x,\n        (_prev, current) => current\n      );\n      /**\n       * Surprising result here - because the values being compared\n       * are primitives it's always considering the returned `current`\n       * to equal `prevItem` because 2 === 2\n       *\n       * This doesn't matter in our usage as we're comparing objects\n       * but the return here strictly speaking should be [1, 3, 2]\n       */\n      expect(filtered).toEqual([1, 2, 3]);\n    });\n\n    it(\"uses the getProp arg to discern uniqueness\", () => {\n      const filtered = uniqBy(\n        [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 2 }],\n        (x) => x.id,\n        (_prev, current) => current\n      );\n\n      expect(filtered).toEqual([{ id: 1 }, { id: 3 }, { id: 2 }]);\n    });\n\n    it(\"uses the onConflict arg to decide which to keep\", () => {\n      const filtered = uniqBy(\n        [{ id: 1 }, { id: 2, keepMe: true }, { id: 3 }, { id: 2 }],\n        (x) => x.id,\n        (prev, current) =>\n          current.keepMe ? current : prev.keepMe ? prev : current\n      );\n\n      expect(filtered).toEqual([{ id: 1 }, { id: 2, keepMe: true }, { id: 3 }]);\n    });\n  });\n\n  describe(\"parseResults\", () => {\n    it(\"parses data with the given schema\", () => {\n      const schema = z.object({ foo: z.boolean() });\n      expect(parseResults(schema, { foo: true })).toEqual({ foo: true });\n    });\n\n    it(\"throws when invalid data is provided for schema\", () => {\n      const schema = z.object({ foo: z.boolean() });\n\n      expect(() => {\n        parseResults(schema, { foo: \"true\" });\n      }).toThrow();\n    });\n\n    it(\"throws on invalid list items without isPreviewMode\", () => {\n      const schema = z.array(z.object({ foo: z.boolean() }));\n      const data = [{ foo: null }, { foo: true }];\n      expect(() => {\n        parseResults(schema, data);\n      }).toThrow();\n    });\n\n    it(\"filters invalid list items with isPreviewMode=true\", () => {\n      const schema = z.array(z.object({ foo: z.boolean() }));\n      const data = [{ foo: \"bar\" }, { foo: true }];\n      expect(parseResults(schema, data, true)).toEqual([{ foo: true }]);\n    });\n\n    it(\"filters non-draft content when matching draft content exists\", () => {\n      const schema = z.array(z.object({ id: z.string() }));\n\n      const data = [\n        { id: \"abc\" },\n        { id: \"drafts.abc\" },\n        { id: \"asdf\" },\n        { id: \"drafts.wasd\" },\n      ];\n      const parsed = parseResults(schema, data, true);\n\n      expect(parsed).toEqual([\n        { id: \"drafts.abc\" },\n        { id: \"asdf\" },\n        { id: \"drafts.wasd\" },\n      ]);\n    });\n  });\n});\n\n// Silence module error\nexport {};\n"
    },
    "src/components/CMSImage/CMSImage.test.tsx": {
      "tests": [
        {
          "id": "226",
          "name": "CMSImage renders an image",
          "location": {
            "start": {
              "column": 4,
              "line": 10
            }
          }
        },
        {
          "id": "227",
          "name": "CMSImage uses the altText from the image prop",
          "location": {
            "start": {
              "column": 4,
              "line": 29
            }
          }
        },
        {
          "id": "228",
          "name": "CMSImage overrides the image altText with the `alt` prop",
          "location": {
            "start": {
              "column": 4,
              "line": 39
            }
          }
        },
        {
          "id": "229",
          "name": "CMSImage sets an empty alt text string if explicitly provided",
          "location": {
            "start": {
              "column": 4,
              "line": 50
            }
          }
        },
        {
          "id": "230",
          "name": "CMSImage hides an image from the accessability tree when isPresentational is true",
          "location": {
            "start": {
              "column": 4,
              "line": 59
            }
          }
        }
      ],
      "source": "import { render, screen } from \"@testing-library/react\";\nimport { DefaultTheme, ThemeProvider } from \"styled-components\";\n\nimport { mockImageAsset } from \"../../__tests__/__helpers__/cms\";\nimport renderWithProviders from \"../../__tests__/__helpers__/renderWithProviders\";\n\nimport CMSImage from \"./CMSImage\";\n\ndescribe(\"CMSImage\", () => {\n  it(\"renders an image\", () => {\n    const mockImage = mockImageAsset();\n    render(\n      <ThemeProvider\n        theme={\n          {\n            colors: { pastelTurquoise: \"#123456\" },\n            contrastColors: { pastelTurquoise: \"white\" },\n          } as DefaultTheme\n        }\n      >\n        <CMSImage image={mockImage} />\n      </ThemeProvider>\n    );\n\n    const img = screen.getByRole(\"img\");\n    expect(img).toBeInTheDocument();\n  });\n\n  it(\"uses the altText from the image prop\", async () => {\n    const altString = \"a donkey in a field on a sunny day\";\n    const mockImage = { ...mockImageAsset(), altText: altString };\n\n    renderWithProviders(<CMSImage image={mockImage} />);\n\n    const img = screen.getByRole(\"img\");\n    expect(img.getAttribute(\"alt\")).toBe(altString);\n  });\n\n  it(\"overrides the image altText with the `alt` prop\", async () => {\n    const altString = \"a donkey in a field on a sunny day\";\n    const altStringOverride = \"a horse in a field on an overcast day\";\n    const mockImage = { ...mockImageAsset(), altText: altString };\n\n    renderWithProviders(<CMSImage image={mockImage} alt={altStringOverride} />);\n\n    const img = screen.getByRole(\"img\");\n    expect(img.getAttribute(\"alt\")).toBe(altStringOverride);\n  });\n\n  it(\"sets an empty alt text string if explicitly provided\", async () => {\n    const mockImage = mockImageAsset();\n    renderWithProviders(<CMSImage image={mockImage} alt=\"\" />);\n\n    const img = screen.getByRole(\"img\");\n    // note: `toHaveAttribute(\"alt\", \"\")` returns false positives, explicitly check\n    expect(img.getAttribute(\"alt\")).toBe(\"\");\n  });\n\n  it(\"hides an image from the accessability tree when isPresentational is true\", async () => {\n    const altString = \"a donkey in a field on a sunny day\";\n    const mockImage = {\n      ...mockImageAsset(),\n      altText: altString,\n      isPresentational: true,\n    };\n    renderWithProviders(<CMSImage image={mockImage} />);\n\n    const img = screen.queryByRole(\"img\");\n    expect(img).not.toBeInTheDocument();\n\n    const hiddenImg = screen.getByRole(\"img\", { hidden: true });\n    // note: `toHaveAttribute(\"alt\", \"\")` returns false positives, explicitly check\n    expect(hiddenImg.getAttribute(\"alt\")).toBe(\"\");\n    expect(hiddenImg).toHaveAttribute(\"aria-hidden\", \"true\");\n  });\n});\n"
    },
    "src/__tests__/pages/about-us/leadership.test.tsx": {
      "tests": [
        {
          "id": "231",
          "name": "pages/about/leadership.tsx Renders correct title ",
          "location": {
            "start": {
              "column": 4,
              "line": 52
            }
          }
        },
        {
          "id": "232",
          "name": "pages/about/leadership.tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 63
            }
          }
        },
        {
          "id": "233",
          "name": "pages/about/leadership.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 81
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../__helpers__/renderWithSeo\";\nimport CMSClient from \"../../../node-lib/cms\";\nimport AboutUsLeadership, {\n  getStaticProps,\n} from \"../../../pages/about-us/leadership\";\nimport {\n  mockImageAsset,\n  mockSeoResult,\n  portableTextFromString,\n} from \"../../__helpers__/cms\";\nimport { AboutLeadershipPage } from \"../../../common-lib/cms-types\";\n\nimport { testAboutPageBaseData } from \"./about-us.fixtures\";\n\njest.mock(\"../../../node-lib/cms\");\n\nconst mockCMSClient = CMSClient as jest.MockedObject<typeof CMSClient>;\n\nconst testAboutLeadershipPageData: AboutLeadershipPage = {\n  ...testAboutPageBaseData,\n  heading: \"Leadership\",\n  introPortableText: [],\n  leadershipTeam: [\n    {\n      name: \"name\",\n      id: \"1\",\n      image: mockImageAsset(),\n      bioPortableText: portableTextFromString(\"Great person\"),\n    },\n    {\n      name: \"name\",\n      role: \"chief executive\",\n      id: \"1\",\n      image: mockImageAsset(),\n      bioPortableText: portableTextFromString(\n        \"This somethine else before, now does this\"\n      ),\n    },\n  ],\n};\n\njest.mock(\"next/dist/client/router\", () => require(\"next-router-mock\"));\ndescribe(\"pages/about/leadership.tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n  });\n\n  it(\"Renders correct title \", async () => {\n    renderWithProviders(\n      <AboutUsLeadership pageData={testAboutLeadershipPageData} />\n    );\n\n    expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n      \"About us\"\n    );\n  });\n\n  describe(\"SEO\", () => {\n    it(\"renders the correct SEO details\", async () => {\n      const { seo } = renderWithSeo(\n        <AboutUsLeadership pageData={testAboutLeadershipPageData} />\n      );\n\n      expect(seo).toEqual({\n        ...mockSeoResult,\n        ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n        title: \"About Us | NEXT_PUBLIC_SEO_APP_NAME\",\n        description: \"We're doing the things that need to get done.\",\n        ogTitle: \"About Us | NEXT_PUBLIC_SEO_APP_NAME\",\n        ogDescription: \"We're doing the things that need to get done.\",\n        ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n      });\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"should return notFound when the page data is missing\", async () => {\n      mockCMSClient.aboutLeadershipPage.mockResolvedValueOnce(null);\n\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/beta/key-stages/[keyStageSlug].test.tsx": {
      "tests": [
        {
          "id": "234",
          "name": "pages/key-stages/[keyStageSlug].tsx Renders title from props ",
          "location": {
            "start": {
              "column": 4,
              "line": 11
            }
          }
        },
        {
          "id": "235",
          "name": "pages/key-stages/[keyStageSlug].tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 28
            }
          }
        },
        {
          "id": "236",
          "name": "pages/key-stages/[keyStageSlug].tsx getStaticPaths Should return the paths of all keystages",
          "location": {
            "start": {
              "column": 6,
              "line": 51
            }
          }
        },
        {
          "id": "237",
          "name": "pages/key-stages/[keyStageSlug].tsx getStaticProps Should fetch the correct data",
          "location": {
            "start": {
              "column": 6,
              "line": 68
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport KeyStageListPage, {\n  KeyStageProps,\n} from \"../../../../pages/beta/key-stages/[keyStageSlug]\";\nimport { mockSeoResult } from \"../../../__helpers__/cms\";\nimport renderWithProviders from \"../../../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../../../__helpers__/renderWithSeo\";\n\ndescribe(\"pages/key-stages/[keyStageSlug].tsx\", () => {\n  it(\"Renders title from props \", async () => {\n    renderWithProviders(\n      <KeyStageListPage\n        keyStageData={{\n          data: \"key-stage-1\",\n        }}\n      />\n    );\n\n    await waitFor(() => {\n      expect(screen.getByRole(\"heading\", { level: 1 })).toHaveTextContent(\n        \"Key stage key-stage-1\"\n      );\n    });\n  });\n\n  describe(\"SEO\", () => {\n    it(\"renders the correct SEO details\", async () => {\n      const { seo } = renderWithSeo(\n        <KeyStageListPage\n          keyStageData={{\n            data: \"key-stage-1\",\n          }}\n        />\n      );\n\n      expect(seo).toEqual({\n        ...mockSeoResult,\n        ogSiteName: \"NEXT_PUBLIC_SEO_APP_NAME\",\n        title: \"Key stage | NEXT_PUBLIC_SEO_APP_NAME\",\n        description: \"Key stage by subject\",\n        ogTitle: \"Key stage | NEXT_PUBLIC_SEO_APP_NAME\",\n        ogDescription: \"Key stage by subject\",\n        ogUrl: \"NEXT_PUBLIC_SEO_APP_URL\",\n        canonical: \"NEXT_PUBLIC_SEO_APP_URL\",\n      });\n    });\n  });\n\n  describe(\"getStaticPaths\", () => {\n    it(\"Should return the paths of all keystages\", async () => {\n      const { getStaticPaths } = await import(\n        \"../../../../pages/beta/key-stages/[keyStageSlug]\"\n      );\n\n      const pathsResult = await getStaticPaths({});\n\n      expect(pathsResult.paths).toEqual([\n        { params: { keyStageSlug: \"key-stage-1\" } },\n        { params: { keyStageSlug: \"key-stage-2\" } },\n        { params: { keyStageSlug: \"key-stage-3\" } },\n        { params: { keyStageSlug: \"key-stage-4\" } },\n      ]);\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should fetch the correct data\", async () => {\n      const { getStaticProps } = await import(\n        \"../../../../pages/beta/key-stages/[keyStageSlug]\"\n      );\n      const propsResult = (await getStaticProps({\n        params: { keyStageSlug: \"key-stage-1\" },\n      })) as {\n        props: KeyStageProps;\n      };\n\n      expect(propsResult.props.keyStageData.data).toEqual(\"key-stage-1\");\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/contact-us.test.tsx": {
      "tests": [
        {
          "id": "238",
          "name": "pages/contact-us.tsx contains an h1 ",
          "location": {
            "start": {
              "column": 4,
              "line": 27
            }
          }
        },
        {
          "id": "239",
          "name": "pages/contact-us.tsx contains a sign up button",
          "location": {
            "start": {
              "column": 4,
              "line": 37
            }
          }
        },
        {
          "id": "240",
          "name": "pages/contact-us.tsx SEO renders the correct SEO details",
          "location": {
            "start": {
              "column": 6,
              "line": 50
            }
          }
        },
        {
          "id": "241",
          "name": "pages/contact-us.tsx getStaticProps Should not fetch draft content by default",
          "location": {
            "start": {
              "column": 6,
              "line": 60
            }
          }
        },
        {
          "id": "242",
          "name": "pages/contact-us.tsx getStaticProps should return notFound when the page data is missing",
          "location": {
            "start": {
              "column": 6,
              "line": 70
            }
          }
        }
      ],
      "source": "import CMSClient from \"../../node-lib/cms\";\nimport { ContactPage } from \"../../common-lib/cms-types\";\nimport ContactUs, { getStaticProps } from \"../../pages/contact-us\";\nimport { portableTextFromString, mockSeo } from \"../__helpers__/cms\";\nimport renderWithProviders from \"../__helpers__/renderWithProviders\";\nimport renderWithSeo from \"../__helpers__/renderWithSeo\";\n\nconst testContactPageData: ContactPage = {\n  id: \"01\",\n  title: \"Contact title\",\n  heading: \"Contact heading\",\n  summaryPortableText: portableTextFromString(\"Contact summary\"),\n  bodyPortableText: portableTextFromString(\"Intro summary\"),\n  seo: mockSeo(),\n};\n\njest.mock(\"../../node-lib/cms\");\n\nconst mockCMSClient = CMSClient as jest.MockedObject<typeof CMSClient>;\n\ndescribe(\"pages/contact-us.tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n  });\n\n  it(\"contains an h1 \", () => {\n    const { getByRole } = renderWithProviders(\n      <ContactUs pageData={testContactPageData} />\n    );\n\n    expect(getByRole(\"heading\", { level: 1 })).toHaveTextContent(\n      \"Contact title\"\n    );\n  });\n\n  it(\"contains a sign up button\", () => {\n    const { getByRole } = renderWithProviders(\n      <ContactUs pageData={testContactPageData} />\n    );\n\n    expect(\n      getByRole(\"button\", {\n        name: /sign up/i,\n      })\n    ).toHaveAccessibleName(\"Sign up\");\n  });\n\n  describe.skip(\"SEO\", () => {\n    it(\"renders the correct SEO details\", async () => {\n      const { seo } = renderWithSeo(\n        <ContactUs pageData={testContactPageData} />\n      );\n\n      expect(seo).toEqual({});\n    });\n  });\n\n  describe(\"getStaticProps\", () => {\n    it(\"Should not fetch draft content by default\", async () => {\n      await getStaticProps({\n        params: {},\n      });\n\n      expect(mockCMSClient.contactPage).toHaveBeenCalledWith({\n        previewMode: false,\n      });\n    });\n\n    it(\"should return notFound when the page data is missing\", async () => {\n      mockCMSClient.contactPage.mockResolvedValueOnce(null);\n\n      const propsResult = await getStaticProps({\n        params: {},\n      });\n\n      expect(propsResult).toMatchObject({\n        notFound: true,\n      });\n    });\n  });\n});\n"
    },
    "src/components/MenuLinks/MenuLinks.test.tsx": {
      "tests": [
        {
          "id": "243",
          "name": "MenuLinks should render a list of links",
          "location": {
            "start": {
              "column": 4,
              "line": 12
            }
          }
        },
        {
          "id": "244",
          "name": "MenuLinks will position the arrow at home",
          "location": {
            "start": {
              "column": 4,
              "line": 23
            }
          }
        },
        {
          "id": "245",
          "name": "MenuLinks should position the arrow based on the current path",
          "location": {
            "start": {
              "column": 4,
              "line": 39
            }
          }
        }
      ],
      "source": "import mockRouter from \"next-router-mock\";\n\nimport renderWithProviders from \"../../__tests__/__helpers__/renderWithProviders\";\nimport { menuSections } from \"../../browser-lib/fixtures/menuSections\";\nimport { resolveOakHref } from \"../../common-lib/urls\";\n\nimport MenuLinks from \"./MenuLinks\";\n\njest.mock(\"next/dist/client/router\", () => require(\"next-router-mock\"));\n\ndescribe(\"MenuLinks\", () => {\n  test(\"should render a list of links\", () => {\n    const { getByText } = renderWithProviders(\n      <MenuLinks menuSections={menuSections} />\n    );\n    Object.values(menuSections).forEach((section) =>\n      section.forEach(({ linkText, page }) => {\n        const href = resolveOakHref({ page });\n        expect(getByText(linkText).closest(\"a\")).toHaveAttribute(\"href\", href);\n      })\n    );\n  });\n  test(\"will position the arrow at home\", () => {\n    mockRouter.setCurrentUrl(\"http://localhost:3000/\");\n    const { getByRole, container } = renderWithProviders(\n      <MenuLinks menuSections={menuSections} />\n    );\n    const link = getByRole(\"link\", { name: /Home/i });\n    const li = link.closest(\"li\");\n\n    expect(li).toBeInTheDocument();\n    // arrow next to \"Home\" link\n    const svgs = li?.getElementsByTagName(\"svg\");\n    expect(svgs?.length).toBe(1);\n    // no other arrows\n    const allSvgs = container.getElementsByTagName(\"svg\");\n    expect(allSvgs.length).toBe(1);\n  });\n  test(\"should position the arrow based on the current path\", () => {\n    mockRouter.setCurrentUrl(\"http://localhost:3000/about-us/board\");\n    const { getByRole, container } = renderWithProviders(\n      <MenuLinks menuSections={menuSections} />\n    );\n    const link = getByRole(\"link\", { name: /About us/i });\n    const li = link.closest(\"li\");\n\n    expect(li).toBeInTheDocument();\n    // arrow next to \"About us\" link\n    const svgs = li?.getElementsByTagName(\"svg\");\n    expect(svgs?.length).toBe(1);\n    // no other arrows\n    const allSvgs = container.getElementsByTagName(\"svg\");\n    expect(allSvgs.length).toBe(1);\n  });\n});\n"
    },
    "src/context/Search/useFetchSearchResults.test.ts": {
      "tests": [
        {
          "id": "246",
          "name": "useFetchSearchResults() 'loading' should default to true",
          "location": {
            "start": {
              "column": 4,
              "line": 17
            }
          }
        },
        {
          "id": "247",
          "name": "useFetchSearchResults() error should be returned if fetch fails",
          "location": {
            "start": {
              "column": 4,
              "line": 25
            }
          }
        },
        {
          "id": "248",
          "name": "useFetchSearchResults() results should be returned if fetch succeeds",
          "location": {
            "start": {
              "column": 4,
              "line": 43
            }
          }
        }
      ],
      "source": "import { renderHook, act } from \"@testing-library/react\";\n\nimport { SearchProvider } from \"./SearchContext\";\nimport useFetchSearchResults from \"./useFetchSearchResults\";\n\nconst reportError = jest.fn();\nconst errorReporter = () => () => reportError;\n\ndescribe(\"useFetchSearchResults()\", () => {\n  beforeEach(() => {\n    jest.resetAllMocks();\n    jest.mock(\"../../common-lib/error-reporter\", () => ({\n      __esModule: true,\n      default: errorReporter,\n    }));\n  });\n  test(\"'loading' should default to true\", () => {\n    const { result } = renderHook(() => useFetchSearchResults(), {\n      wrapper: SearchProvider,\n    });\n    const { loading } = result.current;\n\n    expect(loading).toBe(true);\n  });\n  test(\"error should be returned if fetch fails\", async () => {\n    window.fetch = jest.fn(() => Promise.reject(\"bad thing\"));\n\n    const { result } = renderHook(() => useFetchSearchResults(), {\n      wrapper: SearchProvider,\n    });\n    const { fetchSearchResults, error } = result.current;\n\n    await act(async () => {\n      await fetchSearchResults({ isCancelled: false });\n    });\n\n    // expect(reportError).toHaveBeenCalled();\n    /**\n     * @todo fix this. it should be .toBe(\"bad thing\")\n     */\n    expect(error).toBe(\"\");\n  });\n  test(\"results should be returned if fetch succeeds\", async () => {\n    const hits = [\"\"];\n    const jsonMock = jest.fn(\n      async () => ({ ok: true, hits: { hits } } as unknown as Response)\n    );\n    window.fetch = jsonMock;\n\n    const { result } = renderHook(() => useFetchSearchResults(), {\n      wrapper: SearchProvider,\n    });\n    const { fetchSearchResults, results } = result.current;\n\n    await act(async () => {\n      await fetchSearchResults({ isCancelled: false });\n    });\n\n    expect(jsonMock).toHaveBeenCalled();\n    /**\n     * @todo fix this. it should be .toBe(hits)\n     */\n    expect(results).toEqual([]);\n  });\n});\n"
    },
    "src/__tests__/pages/_error.test.tsx": {
      "tests": [
        {
          "id": "249",
          "name": "pages/_error.tsx Renders 404 message ",
          "location": {
            "start": {
              "column": 4,
              "line": 7
            }
          }
        },
        {
          "id": "250",
          "name": "pages/_error.tsx Renders 500 message ",
          "location": {
            "start": {
              "column": 4,
              "line": 13
            }
          }
        },
        {
          "id": "251",
          "name": "pages/_error.tsx Renders error page with no statusCode ",
          "location": {
            "start": {
              "column": 4,
              "line": 20
            }
          }
        },
        {
          "id": "252",
          "name": "pages/_error.tsx contains a button with link to homepage",
          "location": {
            "start": {
              "column": 4,
              "line": 26
            }
          }
        },
        {
          "id": "253",
          "name": "pages/_error.tsx getStaticProps Should return 404 with no props",
          "location": {
            "start": {
              "column": 6,
              "line": 35
            }
          }
        },
        {
          "id": "254",
          "name": "pages/_error.tsx getStaticProps Should return 404 with empty object",
          "location": {
            "start": {
              "column": 6,
              "line": 41
            }
          }
        },
        {
          "id": "255",
          "name": "pages/_error.tsx getStaticProps Should error status code if there is an error object",
          "location": {
            "start": {
              "column": 6,
              "line": 47
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport renderWithProviders from \"../__helpers__/renderWithProviders\";\nimport ErrorPage, { getInitialProps } from \"../../pages/_error\";\n\ndescribe(\"pages/_error.tsx\", () => {\n  it(\"Renders 404 message \", async () => {\n    renderWithProviders(<ErrorPage statusCode={404} />);\n    expect(\n      screen.getByTestId(\"errorStatus\").querySelector(\"h1\")\n    ).toHaveTextContent(\"404\");\n  });\n  it(\"Renders 500 message \", async () => {\n    renderWithProviders(<ErrorPage statusCode={500} />);\n    expect(\n      screen.getByTestId(\"errorStatus\").querySelector(\"h1\")\n    ).toHaveTextContent(\"500\");\n  });\n\n  it(\"Renders error page with no statusCode \", async () => {\n    renderWithProviders(<ErrorPage />);\n    expect(\n      screen.getByTestId(\"errorStatus\").querySelector(\"h1\")\n    ).toHaveTextContent(\"An error occurred\");\n  });\n  it(\"contains a button with link to homepage\", () => {\n    renderWithProviders(<ErrorPage />);\n\n    expect(screen.getByTestId(\"homeButton\").closest(\"a\")).toHaveAttribute(\n      \"href\",\n      \"/\"\n    );\n  });\n  describe(\"getStaticProps\", () => {\n    it(\"Should return 404 with no props\", async () => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const props = getInitialProps({});\n      expect(props.statusCode).toBe(404);\n    });\n    it(\"Should return 404 with empty object\", async () => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const props = getInitialProps({ res: { statusCode: 505 } });\n      expect(props.statusCode).toBe(505);\n    });\n    it(\"Should error status code if there is an error object\", async () => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const props = getInitialProps({ err: { statusCode: 500 } });\n      expect(props.statusCode).toBe(500);\n    });\n  });\n});\n"
    },
    "src/components/SiteHeader/SiteHeader.test.tsx": {
      "tests": [
        {
          "id": "256",
          "name": "components/SiteHeader header should be in the document",
          "location": {
            "start": {
              "column": 4,
              "line": 8
            }
          }
        },
        {
          "id": "257",
          "name": "components/SiteHeader it should contain a link to classroom",
          "location": {
            "start": {
              "column": 4,
              "line": 14
            }
          }
        },
        {
          "id": "258",
          "name": "components/SiteHeader it should contain a link to teachers hub",
          "location": {
            "start": {
              "column": 4,
              "line": 23
            }
          }
        },
        {
          "id": "259",
          "name": "components/SiteHeader clicking on the hamburger button opens the menu",
          "location": {
            "start": {
              "column": 4,
              "line": 32
            }
          }
        },
        {
          "id": "260",
          "name": "components/SiteHeader menu can be opened from keyboard",
          "location": {
            "start": {
              "column": 4,
              "line": 43
            }
          }
        }
      ],
      "source": "import userEvent from \"@testing-library/user-event\";\n\nimport renderWithProviders from \"../../__tests__/__helpers__/renderWithProviders\";\n\nimport SiteHeader from \".\";\n\ndescribe(\"components/SiteHeader\", () => {\n  test(\"header should be in the document\", () => {\n    const { getByRole } = renderWithProviders(<SiteHeader />);\n\n    expect(getByRole(\"banner\")).toBeInTheDocument();\n  });\n\n  test(\"it should contain a link to classroom\", () => {\n    const { getByTestId } = renderWithProviders(<SiteHeader />);\n\n    expect(getByTestId(\"SiteHeaderClassroomLink\").closest(\"a\")).toHaveAttribute(\n      \"href\",\n      \"https://classroom.thenational.academy\"\n    );\n  });\n\n  test(\"it should contain a link to teachers hub\", () => {\n    const { getByText } = renderWithProviders(<SiteHeader />);\n\n    expect(getByText(\"Teacher Hub\").closest(\"a\")).toHaveAttribute(\n      \"href\",\n      \"https://teachers.thenational.academy\"\n    );\n  });\n\n  test(\"clicking on the hamburger button opens the menu\", async () => {\n    const { getByLabelText, getByTestId } = renderWithProviders(<SiteHeader />);\n\n    const user = userEvent.setup();\n    const hamburgerButton = getByLabelText(\"Menu\");\n    expect(getByTestId(\"menu\")).not.toBeVisible();\n\n    await user.click(hamburgerButton);\n    expect(getByTestId(\"menu\")).toBeVisible();\n  });\n\n  test(\"menu can be opened from keyboard\", async () => {\n    const { queryByText } = renderWithProviders(<SiteHeader />);\n\n    const user = userEvent.setup();\n    expect(queryByText(\"Home\")).not.toBeVisible();\n\n    await user.keyboard(\"{tab}\");\n    await user.keyboard(\"{tab}\");\n    await user.keyboard(\"{Enter}\");\n    expect(queryByText(\"Home\")).toBeVisible();\n  });\n});\n"
    },
    "src/components/Blog/BlogList/BlogList.test.tsx": {
      "tests": [
        {
          "id": "261",
          "name": "Pagination it renders",
          "location": {
            "start": {
              "column": 4,
              "line": 13
            }
          }
        },
        {
          "id": "262",
          "name": "Pagination displays the correct text",
          "location": {
            "start": {
              "column": 4,
              "line": 30
            }
          }
        },
        {
          "id": "263",
          "name": "Pagination next arrow has correct href",
          "location": {
            "start": {
              "column": 4,
              "line": 47
            }
          }
        },
        {
          "id": "264",
          "name": "Pagination previous arrow has correct href",
          "location": {
            "start": {
              "column": 4,
              "line": 67
            }
          }
        },
        {
          "id": "265",
          "name": "Pagination the next arrow is disabled when there are no more pages",
          "location": {
            "start": {
              "column": 4,
              "line": 88
            }
          }
        },
        {
          "id": "266",
          "name": "Pagination previous button is disabled on page 1",
          "location": {
            "start": {
              "column": 4,
              "line": 109
            }
          }
        },
        {
          "id": "267",
          "name": "Pagination nothing is displayed if there is only one page",
          "location": {
            "start": {
              "column": 4,
              "line": 129
            }
          }
        },
        {
          "id": "268",
          "name": "components/BlogList renders the list items",
          "location": {
            "start": {
              "column": 4,
              "line": 7
            }
          }
        },
        {
          "id": "269",
          "name": "components/BlogList formats the date correctly",
          "location": {
            "start": {
              "column": 4,
              "line": 33
            }
          }
        }
      ],
      "source": "import renderWithProviders from \"../../../__tests__/__helpers__/renderWithProviders\";\nimport { mockPaginationProps } from \"../../Pagination/Pagination.test\";\n\nimport BlogList from \".\";\n\ndescribe(\"components/BlogList\", () => {\n  test(\"renders the list items\", () => {\n    const { getByRole } = renderWithProviders(\n      <BlogList\n        paginationProps={mockPaginationProps}\n        currentPageItems={[\n          {\n            title: \"Item title\",\n            titleTag: \"h3\",\n            summary: \"Item summary\",\n            slug: \"item-slug\",\n            contentType: \"blog-post\",\n            category: {\n              title: \"Curriculum Planning\",\n              slug: \"curriculum-planning\",\n            },\n            date: new Date(2022, 8, 22).toISOString(),\n          },\n        ]}\n      />\n    );\n\n    const listHeading = getByRole(\"heading\", { level: 3 });\n\n    expect(listHeading).toBeInTheDocument();\n  });\n\n  test(\"formats the date correctly\", () => {\n    const { getByText } = renderWithProviders(\n      <BlogList\n        paginationProps={mockPaginationProps}\n        currentPageItems={[\n          {\n            title: \"Item title\",\n            titleTag: \"h3\",\n            summary: \"Item summary\",\n            slug: \"item-slug\",\n            contentType: \"blog-post\",\n            category: {\n              title: \"Curriculum Planning\",\n              slug: \"curriculum-planning\",\n            },\n            date: new Date(2022, 7, 22).toISOString(),\n          },\n        ]}\n      />\n    );\n\n    const formattedDate = getByText(\"22 August 2022\");\n\n    expect(formattedDate).toBeInTheDocument();\n  });\n});\n"
    },
    "src/components/MobileBlogFilters/MobileBlogFilters.test.tsx": {
      "tests": [
        {
          "id": "270",
          "name": "components/MobileBlogFilters it renders all blogs button and has focus",
          "location": {
            "start": {
              "column": 4,
              "line": 30
            }
          }
        },
        {
          "id": "271",
          "name": "components/MobileBlogFilters it hides all blogs button when categories is clicked",
          "location": {
            "start": {
              "column": 4,
              "line": 42
            }
          }
        }
      ],
      "source": "import userEvent from \"@testing-library/user-event\";\n\nimport renderWithProviders from \"../../__tests__/__helpers__/renderWithProviders\";\n\nimport MobileBlogFilters, { MobileBlogFiltersProps } from \"./MobileBlogFilters\";\n\nconst testProps: MobileBlogFiltersProps = {\n  page: \"webinars-index\",\n  withBackButton: true,\n  categoryListProps: {\n    categories: [\n      {\n        title: \"Curriculum planning\",\n        slug: \"curriculum-planning\",\n      },\n      {\n        title: \"Lesson planning\",\n        slug: \"lesson-planning\",\n      },\n      {\n        title: \"Research and insights\",\n        slug: \"research-and-insights\",\n      },\n    ],\n    selectedCategorySlug: \"lesson-planning\",\n  },\n};\n\ndescribe(\"components/MobileBlogFilters\", () => {\n  test(\"it renders all blogs button and has focus\", async () => {\n    const { getByText } = renderWithProviders(\n      <MobileBlogFilters {...testProps} />\n    );\n    const user = userEvent.setup();\n\n    const allBlogs = getByText(\"All webinars\").closest(\"a\");\n\n    await user.tab();\n    expect(allBlogs).toHaveFocus();\n  });\n\n  test(\"it hides all blogs button when categories is clicked\", async () => {\n    const { getByText } = renderWithProviders(\n      <MobileBlogFilters {...testProps} />\n    );\n    const user = userEvent.setup();\n\n    const allBlogsContainer = getByText(\"All webinars\").closest(\"div\");\n\n    await user.tab();\n    await user.tab();\n    await user.keyboard(\"{Enter}\");\n    expect(allBlogsContainer).toHaveStyle(`visibility: hidden`);\n  });\n});\n"
    },
    "src/node-lib/isr/index.test.ts": {
      "tests": [
        {
          "id": "272",
          "name": "isr.decorateWithIsr() Does not mutate the original results",
          "location": {
            "start": {
              "column": 4,
              "line": 6
            }
          }
        },
        {
          "id": "273",
          "name": "isr.decorateWithIsr() if DISABLE_ISR is undefined, adds revalidate prop to GetStaticProps results",
          "location": {
            "start": {
              "column": 4,
              "line": 18
            }
          }
        },
        {
          "id": "274",
          "name": "isr.decorateWithIsr() if DISABLE_ISR is off, adds revalidate prop to GetStaticProps results",
          "location": {
            "start": {
              "column": 4,
              "line": 28
            }
          }
        },
        {
          "id": "275",
          "name": "isr.decorateWithIsr() if DISABLE_ISR is 'on', does nothing",
          "location": {
            "start": {
              "column": 4,
              "line": 39
            }
          }
        }
      ],
      "source": "describe(\"isr.decorateWithIsr()\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n  });\n  it(\"Does not mutate the original results\", async () => {\n    process.env.DISABLE_ISR = \"anything_but_on\";\n    const { decorateWithIsr } = await import(\".\");\n    const initialResult = {\n      props: {\n        someProp: true,\n      },\n    };\n    const decoratedResults = decorateWithIsr(initialResult);\n\n    expect(decoratedResults).not.toBe(initialResult);\n  });\n  it(\"if DISABLE_ISR is undefined, adds revalidate prop to GetStaticProps results\", async () => {\n    const { decorateWithIsr } = await import(\".\");\n    const initialResult = {\n      props: {\n        someProp: true,\n      },\n    };\n\n    expect(decorateWithIsr(initialResult)).toHaveProperty<number>(\"revalidate\");\n  });\n  it(\"if DISABLE_ISR is off, adds revalidate prop to GetStaticProps results\", async () => {\n    process.env.DISABLE_ISR = \"anything_but_on\";\n    const { decorateWithIsr } = await import(\".\");\n    const initialResult = {\n      props: {\n        someProp: true,\n      },\n    };\n\n    expect(decorateWithIsr(initialResult)).toHaveProperty<number>(\"revalidate\");\n  });\n  it(\"if DISABLE_ISR is 'on', does nothing\", async () => {\n    process.env.DISABLE_ISR = \"on\";\n    const { decorateWithIsr } = await import(\".\");\n    const initialResult = {\n      props: {\n        someProp: true,\n      },\n    };\n\n    expect(decorateWithIsr(initialResult)).toEqual(initialResult);\n  });\n});\n\nexport {};\n"
    },
    "src/components/Breadcrumbs/getBreadcrumbs.test.ts": {
      "tests": [
        {
          "id": "276",
          "name": "getBlogBreadcrumbs passed a category list and slug it returns a breadcrumbs array",
          "location": {
            "start": {
              "column": 4,
              "line": 23
            }
          }
        },
        {
          "id": "277",
          "name": "getBlogBreadcrumbs passed a category list but NO slug it still returns breadcrumbs array with All as the last slug",
          "location": {
            "start": {
              "column": 4,
              "line": 45
            }
          }
        }
      ],
      "source": "import { getBlogWebinarListBreadcrumbs } from \"./getBreadcrumbs\";\n\nconst categories = [\n  {\n    title: \"Curriculum planning\",\n    slug: \"curriculum-planning\",\n  },\n  {\n    title: \"Lesson planning\",\n    slug: \"lesson-planning\",\n  },\n  {\n    title: \"Oak updates\",\n    slug: \"oak-updates\",\n  },\n  {\n    title: \"Research and insights\",\n    slug: \"research-and-insights\",\n  },\n];\n\ndescribe(\"getBlogBreadcrumbs\", () => {\n  test(\"passed a category list and slug it returns a breadcrumbs array\", () => {\n    const breadcrumbs = getBlogWebinarListBreadcrumbs(\n      categories,\n      \"research-and-insights\",\n      \"blog\",\n      \"Blog\"\n    );\n    const expectedCrumbs = [\n      {\n        label: \"Blog\",\n        href: \"/blog\",\n      },\n      {\n        label: \"Research and insights\",\n        href: \"research-and-insights\",\n        disabled: true,\n      },\n    ];\n\n    expect(breadcrumbs).toEqual(expectedCrumbs);\n  });\n\n  test(\"passed a category list but NO slug it still returns breadcrumbs array with All as the last slug\", () => {\n    const breadcrumbs = getBlogWebinarListBreadcrumbs(\n      categories,\n      null,\n      \"webinars\",\n      \"Webinars\"\n    );\n    const expectedCrumbs = [\n      {\n        label: \"Webinars\",\n        href: \"/webinars\",\n      },\n      {\n        label: \"All\",\n        href: \"/webinars\",\n        disabled: true,\n      },\n    ];\n\n    expect(breadcrumbs).toEqual(expectedCrumbs);\n  });\n});\n"
    },
    "src/components/AppHeader/AppHeader.test.tsx": {
      "tests": [
        {
          "id": "278",
          "name": "components/AppHeader header should be in the document",
          "location": {
            "start": {
              "column": 4,
              "line": 8
            }
          }
        },
        {
          "id": "279",
          "name": "components/AppHeader it should be the teachers header colour",
          "location": {
            "start": {
              "column": 4,
              "line": 14
            }
          }
        },
        {
          "id": "280",
          "name": "components/AppHeader clicking on the hamburger button opens the menu",
          "location": {
            "start": {
              "column": 4,
              "line": 22
            }
          }
        },
        {
          "id": "281",
          "name": "components/AppHeader menu can be opened from keyboard",
          "location": {
            "start": {
              "column": 4,
              "line": 33
            }
          }
        }
      ],
      "source": "import userEvent from \"@testing-library/user-event\";\n\nimport renderWithProviders from \"../../__tests__/__helpers__/renderWithProviders\";\n\nimport AppHeader from \".\";\n\ndescribe(\"components/AppHeader\", () => {\n  test(\"header should be in the document\", () => {\n    const { getByRole } = renderWithProviders(<AppHeader />);\n\n    expect(getByRole(\"banner\")).toBeInTheDocument();\n  });\n\n  test(\"it should be the teachers header colour\", () => {\n    const { getByRole } = renderWithProviders(<AppHeader />);\n\n    expect(getByRole(\"banner\")).toHaveStyle(\n      \"background-color: rgb(176, 226, 222);\"\n    );\n  });\n\n  test(\"clicking on the hamburger button opens the menu\", async () => {\n    const { getByLabelText, getByTestId } = renderWithProviders(<AppHeader />);\n\n    const user = userEvent.setup();\n    const hamburgerButton = getByLabelText(\"Menu\");\n    expect(getByTestId(\"menu\")).not.toBeVisible();\n\n    await user.click(hamburgerButton);\n    expect(getByTestId(\"menu\")).toBeVisible();\n  });\n\n  test(\"menu can be opened from keyboard\", async () => {\n    const { queryByText } = renderWithProviders(<AppHeader />);\n\n    const user = userEvent.setup();\n    expect(queryByText(\"Home\")).not.toBeVisible();\n\n    await user.keyboard(\"{tab}\");\n    await user.keyboard(\"{tab}\");\n    await user.keyboard(\"{Enter}\");\n    expect(queryByText(\"Home\")).toBeVisible();\n  });\n});\n"
    },
    "src/node-lib/sanity-graphql/index.test.ts": {
      "tests": [
        {
          "id": "282",
          "name": "node-lib/sanity-graphql/index.ts should return the sdk",
          "location": {
            "start": {
              "column": 4,
              "line": 29
            }
          }
        },
        {
          "id": "283",
          "name": "node-lib/sanity-graphql/index.ts should build the API endpoint from config",
          "location": {
            "start": {
              "column": 4,
              "line": 33
            }
          }
        },
        {
          "id": "284",
          "name": "node-lib/sanity-graphql/index.ts should set auth headers",
          "location": {
            "start": {
              "column": 4,
              "line": 41
            }
          }
        }
      ],
      "source": "import graphqlApi from \".\";\n\nconst configGetSpy = jest.fn((key: string) => {\n  return {\n    sanityProjectId: \"the-project\",\n    sanityDataset: \"the-dataset\",\n    sanityDatasetTag: \"the-tag\",\n    sanityUseCDN: true,\n    sanityGraphqlApiSecret: \"sanity-secret\",\n  }[key];\n});\nconst GraphQLClientSpy = jest.fn();\njest.mock(\"./generated/sdk\", () => ({\n  getSdk: jest.fn(() => \"the sdk\"),\n}));\n\ndescribe(\"node-lib/sanity-graphql/index.ts\", () => {\n  beforeEach(() => {\n    jest.resetModules();\n    jest.restoreAllMocks();\n    jest.mock(\"../../config/server\", () => ({\n      get: configGetSpy,\n    }));\n    jest.mock(\"graphql-request\", () => ({\n      GraphQLClient: GraphQLClientSpy,\n    }));\n  });\n\n  it(\"should return the sdk\", () => {\n    expect(graphqlApi).toBe(\"the sdk\");\n  });\n\n  it(\"should build the API endpoint from config\", async () => {\n    await import(\".\");\n    expect(GraphQLClientSpy).toHaveBeenCalledWith(\n      \"https://the-project.api.sanity.io/v1/graphql/the-dataset/the-tag\",\n      expect.any(Object)\n    );\n  });\n\n  it(\"should set auth headers\", async () => {\n    await import(\".\");\n    expect(GraphQLClientSpy).toHaveBeenCalledWith(expect.any(String), {\n      headers: { Authorization: \"Bearer sanity-secret\" },\n    });\n  });\n});\n\nexport {};\n"
    },
    "src/__tests__/pages/webinars/categories/[categorySlug].test.tsx": {
      "tests": [
        {
          "id": "285",
          "name": "pages/webinar/categories/[categorySlug].tsx getStaticPaths Should return the paths of all webinar categories",
          "location": {
            "start": {
              "column": 6,
              "line": 27
            }
          }
        }
      ],
      "source": "import { Webinar } from \"../../../../common-lib/cms-types\";\n\nconst testWebinar = {\n  slug: \"an-upcoming-webinar\",\n  category: { title: \"Some category\", slug: \"some-webinar-category\" },\n} as Webinar;\n\nconst testWebinar2 = {\n  slug: \"a-past-webinar\",\n  category: { title: \"Some other category\", slug: \"some-other-category\" },\n} as Webinar;\nconst webinars = jest.fn(() => [testWebinar, testWebinar2]);\n\ndescribe(\"pages/webinar/categories/[categorySlug].tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../../node-lib/cms\", () => ({\n      __esModule: true,\n      default: {\n        webinars: jest.fn(webinars),\n      },\n    }));\n  });\n\n  describe(\"getStaticPaths\", () => {\n    it(\"Should return the paths of all webinar categories\", async () => {\n      const { getStaticPaths } = await import(\n        \"../../../../pages/webinars/categories/[categorySlug]\"\n      );\n\n      const pathsResult = await getStaticPaths({});\n\n      expect(pathsResult.paths).toEqual([\n        { params: { categorySlug: \"some-webinar-category\" } },\n        { params: { categorySlug: \"some-other-category\" } },\n      ]);\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/blog/categories/[categorySlug].test.tsx": {
      "tests": [
        {
          "id": "286",
          "name": "pages/blog/categories/[categorySlug].tsx getStaticPaths Should return the paths of all blog categories",
          "location": {
            "start": {
              "column": 6,
              "line": 28
            }
          }
        }
      ],
      "source": "import { Webinar } from \"../../../../common-lib/cms-types\";\n\nconst testBlog = {\n  slug: \"a-blog\",\n  category: { title: \"Some category\", slug: \"some-blog-category\" },\n} as Webinar;\n\nconst testBlog2 = {\n  slug: \"another-blog\",\n  category: { title: \"Some other category\", slug: \"some-other-category\" },\n} as Webinar;\n\nconst blogPosts = jest.fn(() => [testBlog, testBlog2]);\n\ndescribe(\"pages/blog/categories/[categorySlug].tsx\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    jest.mock(\"../../../../node-lib/cms\", () => ({\n      __esModule: true,\n      default: {\n        blogPosts: jest.fn(blogPosts),\n      },\n    }));\n  });\n\n  describe(\"getStaticPaths\", () => {\n    it(\"Should return the paths of all blog categories\", async () => {\n      const { getStaticPaths } = await import(\n        \"../../../../pages/blog/categories/[categorySlug]\"\n      );\n\n      const pathsResult = await getStaticPaths({});\n\n      expect(pathsResult.paths).toEqual([\n        { params: { categorySlug: \"some-blog-category\" } },\n        { params: { categorySlug: \"some-other-category\" } },\n      ]);\n    });\n  });\n});\n"
    },
    "src/context/Analytics/useAnalytics.test.ts": {
      "tests": [
        {
          "id": "287",
          "name": "useAnalytics track should not work if statistics consent not given",
          "location": {
            "start": {
              "column": 4,
              "line": 19
            }
          }
        },
        {
          "id": "288",
          "name": "useAnalytics posthog should not be initialised if statistics consent not given",
          "location": {
            "start": {
              "column": 4,
              "line": 28
            }
          }
        }
      ],
      "source": "import { act, renderHook } from \"@testing-library/react\";\n\nimport { AllTheProviders } from \"../../__tests__/__helpers__/renderWithProviders\";\n\nimport useAnalytics from \"./useAnalytics\";\n\nconst posthogCapture = jest.fn();\nconst posthogInit = jest.fn();\njest.mock(\"posthog-js\", () => ({\n  __esModule: true,\n  default: {\n    ...jest.requireActual(\"posthog-js\"),\n    capture: (...args: []) => posthogCapture(...args),\n    init: (...args: []) => posthogInit(...args),\n  },\n}));\n\ndescribe(\"useAnalytics\", () => {\n  test(\"track should not work if statistics consent not given\", () => {\n    const { result } = renderHook(useAnalytics, { wrapper: AllTheProviders });\n\n    act(() => {\n      result.current.track.aboutSelected();\n    });\n\n    expect(posthogCapture).not.toHaveBeenCalled();\n  });\n  test(\"posthog should not be initialised if statistics consent not given\", () => {\n    const { result } = renderHook(useAnalytics, { wrapper: AllTheProviders });\n    act(() => {\n      result.current.track.developYourCurriculumSelected();\n    });\n\n    expect(posthogInit).not.toHaveBeenCalled();\n  });\n});\n"
    },
    "src/__tests__/pages/_app.test.tsx": {
      "tests": [
        {
          "id": "289",
          "name": "<MyApp> Renders Component",
          "location": {
            "start": {
              "column": 4,
              "line": 23
            }
          }
        }
      ],
      "source": "import { render, screen } from \"@testing-library/react\";\nimport mockRouter from \"next-router-mock\";\n\nimport MyApp from \"../../pages/_app\";\n\nconst noopAvoLogger = {\n  logDebug: () => true,\n  logWarn: () => true,\n  // returning false will make avo use console errors, which\n  // we may prefer for actual errors\n  logError: () => false,\n};\n\njest.mock(\"../../hooks/useOakTheme\", () => ({\n  __esModule: true,\n  default: () => ({\n    name: \"default\",\n    theme: {},\n  }),\n}));\n\ndescribe(\"<MyApp>\", () => {\n  it(\"Renders Component\", () => {\n    const Component = () => {\n      return <div>Test: value</div>;\n    };\n    const pageProps = {};\n\n    render(\n      <MyApp\n        pageProps={pageProps}\n        Component={Component}\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        router={mockRouter}\n        analyticsOptions={{ avoOptions: { avoLogger: noopAvoLogger } }}\n      />\n    );\n\n    expect(screen.getByText(/^Test:/).textContent).toBe(\"Test: value\");\n  });\n});\n"
    },
    "src/components/CMSVideo/CMSVideo.test.tsx": {
      "tests": [
        {
          "id": "290",
          "name": "CMSVideo passes video props to VideoPlayer",
          "location": {
            "start": {
              "column": 4,
              "line": 14
            }
          }
        }
      ],
      "source": "import { mockVideoAsset } from \"../../__tests__/__helpers__/cms\";\nimport renderWithProviders from \"../../__tests__/__helpers__/renderWithProviders\";\nimport CMSVideo from \"../CMSVideo\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mockPlayer = jest.fn((_props: never) => <div />);\n\njest.mock(\"../VideoPlayer\", () => ({\n  __esModule: true,\n  default: (props: never) => mockPlayer(props),\n}));\n\ndescribe(\"CMSVideo\", () => {\n  it(\"passes video props to VideoPlayer\", () => {\n    const mockVideo = mockVideoAsset();\n    renderWithProviders(<CMSVideo video={mockVideo} location=\"marketing\" />);\n\n    expect(mockPlayer).toHaveBeenCalledWith(\n      expect.objectContaining({\n        playbackId: mockVideo.video.asset.playbackId,\n        thumbnailTime: mockVideo.video.asset.thumbTime,\n        title: mockVideo.title,\n      })\n    );\n  });\n});\n"
    },
    "src/components/Layout/Layout.test.tsx": {
      "tests": [
        {
          "id": "291",
          "name": "Layout renders a header",
          "location": {
            "start": {
              "column": 4,
              "line": 9
            }
          }
        },
        {
          "id": "292",
          "name": "Layout renders a main",
          "location": {
            "start": {
              "column": 4,
              "line": 16
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport { DEFAULT_SEO_PROPS } from \"../../browser-lib/seo/Seo\";\nimport renderWithProviders from \"../../__tests__/__helpers__/renderWithProviders\";\n\nimport Layout from \"./Layout\";\n\ndescribe(\"Layout\", () => {\n  it(\"renders a header\", () => {\n    renderWithProviders(<Layout seoProps={DEFAULT_SEO_PROPS} />);\n\n    const header = screen.getByRole(\"banner\");\n\n    expect(header).toBeInTheDocument();\n  });\n  it(\"renders a main\", () => {\n    renderWithProviders(<Layout seoProps={DEFAULT_SEO_PROPS} />);\n\n    const main = screen.getByRole(\"main\");\n\n    expect(main).toBeInTheDocument();\n  });\n});\n"
    },
    "src/components/Blog/UpcomingWebinarWall/useUpcomingWebinarWall.test.ts": {
      "tests": [
        {
          "id": "293",
          "name": "useUpcomingWebinarWall.ts returns the expected data",
          "location": {
            "start": {
              "column": 4,
              "line": 8
            }
          }
        }
      ],
      "source": "import { renderHook } from \"@testing-library/react\";\n\nimport { mockWebinar } from \"../../../__tests__/pages/webinars/webinar.fixtures\";\n\nimport useUpcomingWebinarWall from \"./useUpcomingWebinarWall\";\n\ndescribe(\"useUpcomingWebinarWall.ts\", () => {\n  test(\"returns the expected data\", () => {\n    const { result } = renderHook(() => useUpcomingWebinarWall(mockWebinar()));\n\n    expect(result.current).toMatchObject({\n      headingText: \"Starts at 14 April 2020 at 14:00 (UK time)\",\n      buttonHref: \"https://example.com/webinar-sign-up\",\n      buttonText: \"Save my place\",\n      buttonSuffixA11y: \"on the webinar\",\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/beta/index.test.tsx": {
      "tests": [
        {
          "id": "294",
          "name": "pages/beta.tsx Renders correct title ",
          "location": {
            "start": {
              "column": 4,
              "line": 7
            }
          }
        }
      ],
      "source": "import { screen, waitFor } from \"@testing-library/react\";\n\nimport Beta from \"../../../pages/beta\";\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\n\ndescribe(\"pages/beta.tsx\", () => {\n  it(\"Renders correct title \", async () => {\n    renderWithProviders(<Beta />);\n\n    await waitFor(() => {\n      expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n        \"Oak National Academy BETA\"\n      );\n    });\n  });\n});\n"
    },
    "src/__tests__/pages/beta/teachers.text.tsx": {
      "tests": [
        {
          "id": "295",
          "name": "pages/beta/teachers.tsx it renders correct title",
          "location": {
            "start": {
              "column": 4,
              "line": 7
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport Teachers from \"../../../pages/beta/teachers\";\nimport renderWithProviders from \"../../__helpers__/renderWithProviders\";\n\ndescribe(\"pages/beta/teachers.tsx\", () => {\n  test(\"it renders correct title\", () => {\n    renderWithProviders(<Teachers />);\n    expect(screen.getByRole(\"heading\", { level: 1 }).textContent).toBe(\n      \"Teachers homepage\"\n    );\n  });\n});\n"
    },
    "src/__tests__/pages/500.test.tsx": {
      "tests": [
        {
          "id": "296",
          "name": "pages/500.tsx Renders 500 message ",
          "location": {
            "start": {
              "column": 4,
              "line": 7
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport renderWithProviders from \"../__helpers__/renderWithProviders\";\nimport Custom500 from \"../../pages/500\";\n\ndescribe(\"pages/500.tsx\", () => {\n  it(\"Renders 500 message \", async () => {\n    renderWithProviders(<Custom500 />);\n    expect(screen.getByTestId(\"errorStatus\")).toHaveTextContent(\"500\");\n  });\n});\n"
    },
    "src/__tests__/pages/404.test.tsx": {
      "tests": [
        {
          "id": "297",
          "name": "pages/404.tsx Renders 404 message ",
          "location": {
            "start": {
              "column": 4,
              "line": 7
            }
          }
        }
      ],
      "source": "import { screen } from \"@testing-library/react\";\n\nimport renderWithProviders from \"../__helpers__/renderWithProviders\";\nimport Custom404 from \"../../pages/404\";\n\ndescribe(\"pages/404.tsx\", () => {\n  it(\"Renders 404 message \", () => {\n    renderWithProviders(<Custom404 />);\n    expect(screen.getByTestId(\"errorStatus\")).toHaveTextContent(\"404\");\n  });\n});\n"
    },
    "src/components/Typography/Hr.test.tsx": {
      "tests": [
        {
          "id": "298",
          "name": "Hr should render a 'separator'",
          "location": {
            "start": {
              "column": 4,
              "line": 6
            }
          }
        }
      ],
      "source": "import renderWithProviders from \"../../__tests__/__helpers__/renderWithProviders\";\n\nimport Hr from \"./Hr\";\n\ndescribe(\"Hr\", () => {\n  test(\"should render a 'separator'\", () => {\n    const { getByTestId } = renderWithProviders(<Hr />);\n    expect(getByTestId(\"hr\")).toBeInTheDocument();\n  });\n});\n"
    }
  },
  "projectRoot": "/Users/jim/code/oak/Oak-Web-Application",
  "config": {
    "_comment": "This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.",
    "packageManager": "npm",
    "reporters": [
      "html",
      "clear-text",
      "progress"
    ],
    "ignoreStatic": true,
    "incremental": true,
    "testRunner": "jest",
    "testRunner_comment": "More information about the jest plugin can be found here: https://stryker-mutator.io/docs/stryker-js/jest-runner",
    "coverageAnalysis": "perTest",
    "checkers": [
      "typescript"
    ],
    "tsconfigFile": "tsconfig.json",
    "ignorePatterns": [
      ".next",
      ".netlify",
      ".github",
      ".storybook",
      "coverage",
      "dist",
      "out",
      "public",
      "e2e_tests",
      "cloudbuild"
    ],
    "commandRunner": {
      "command": "npm run test ./src/node-lib"
    },
    "mutate": [
      "src/node-lib/**/*.{j,t}s?(x)",
      "!{src,lib}/**/generated/**/*.{j,t}s?(x)",
      "!{src,lib}/**/__tests__/**/*.{j,t}s?(x)",
      "!{src,lib}/**/?(*.)+(spec|test).{j,t}s?(x)",
      "!{src,lib}/**/*+(Spec|Test).{j,t}s?(x)"
    ],
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "incrementalFile": "reports/stryker-incremental.json",
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "plugins": [
      "@stryker-mutator/*"
    ],
    "appendPlugins": [],
    "htmlReporter": {
      "fileName": "reports/mutation/mutation.html"
    },
    "jsonReporter": {
      "fileName": "reports/mutation/mutation.json"
    },
    "disableTypeChecks": "{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}",
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "cleanTempDir": true,
    "testRunnerNodeArgs": [],
    "thresholds": {
      "high": 80,
      "low": 60,
      "break": null
    },
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "warnings": true,
    "disableBail": false,
    "jest": {
      "projectType": "custom",
      "enableFindRelatedTests": true
    }
  },
  "framework": {
    "name": "StrykerJS",
    "version": "6.3.0",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "@stryker-mutator/typescript-checker": "6.3.0",
      "jest": "29.3.1",
      "typescript": "4.8.4",
      "webpack": "5.74.0"
    }
  }
}